<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="39723419755"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (74,174,959 samples, 0.19%)</title><rect x="0.0097%" y="165" width="0.1867%" height="15" fill="rgb(227,0,7)" fg:x="3868092" fg:w="74174959"/><text x="0.2597%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (74,174,959 samples, 0.19%)</title><rect x="0.0097%" y="149" width="0.1867%" height="15" fill="rgb(217,0,24)" fg:x="3868092" fg:w="74174959"/><text x="0.2597%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (74,174,959 samples, 0.19%)</title><rect x="0.0097%" y="133" width="0.1867%" height="15" fill="rgb(221,193,54)" fg:x="3868092" fg:w="74174959"/><text x="0.2597%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (74,174,959 samples, 0.19%)</title><rect x="0.0097%" y="117" width="0.1867%" height="15" fill="rgb(248,212,6)" fg:x="3868092" fg:w="74174959"/><text x="0.2597%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (74,174,959 samples, 0.19%)</title><rect x="0.0097%" y="101" width="0.1867%" height="15" fill="rgb(208,68,35)" fg:x="3868092" fg:w="74174959"/><text x="0.2597%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (74,174,959 samples, 0.19%)</title><rect x="0.0097%" y="85" width="0.1867%" height="15" fill="rgb(232,128,0)" fg:x="3868092" fg:w="74174959"/><text x="0.2597%" y="95.50"></text></g><g><title>alloc::alloc::alloc (74,174,959 samples, 0.19%)</title><rect x="0.0097%" y="69" width="0.1867%" height="15" fill="rgb(207,160,47)" fg:x="3868092" fg:w="74174959"/><text x="0.2597%" y="79.50"></text></g><g><title>malloc (70,517,162 samples, 0.18%)</title><rect x="0.0189%" y="53" width="0.1775%" height="15" fill="rgb(228,23,34)" fg:x="7525889" fg:w="70517162"/><text x="0.2689%" y="63.50"></text></g><g><title>[libc.so.6] (55,323,648 samples, 0.14%)</title><rect x="0.0572%" y="37" width="0.1393%" height="15" fill="rgb(218,30,26)" fg:x="22719403" fg:w="55323648"/><text x="0.3072%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (89,415,471 samples, 0.23%)</title><rect x="0.0000%" y="373" width="0.2251%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="89415471"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (89,415,471 samples, 0.23%)</title><rect x="0.0000%" y="357" width="0.2251%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="89415471"/><text x="0.2500%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (89,415,471 samples, 0.23%)</title><rect x="0.0000%" y="341" width="0.2251%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="89415471"/><text x="0.2500%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (89,415,471 samples, 0.23%)</title><rect x="0.0000%" y="325" width="0.2251%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="89415471"/><text x="0.2500%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (89,415,471 samples, 0.23%)</title><rect x="0.0000%" y="309" width="0.2251%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="89415471"/><text x="0.2500%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (89,415,471 samples, 0.23%)</title><rect x="0.0000%" y="293" width="0.2251%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="89415471"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (89,415,471 samples, 0.23%)</title><rect x="0.0000%" y="277" width="0.2251%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="89415471"/><text x="0.2500%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (85,547,379 samples, 0.22%)</title><rect x="0.0097%" y="261" width="0.2154%" height="15" fill="rgb(225,20,46)" fg:x="3868092" fg:w="85547379"/><text x="0.2597%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (85,547,379 samples, 0.22%)</title><rect x="0.0097%" y="245" width="0.2154%" height="15" fill="rgb(210,31,41)" fg:x="3868092" fg:w="85547379"/><text x="0.2597%" y="255.50"></text></g><g><title>core::clone::Clone::clone (85,547,379 samples, 0.22%)</title><rect x="0.0097%" y="229" width="0.2154%" height="15" fill="rgb(221,200,47)" fg:x="3868092" fg:w="85547379"/><text x="0.2597%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (85,547,379 samples, 0.22%)</title><rect x="0.0097%" y="213" width="0.2154%" height="15" fill="rgb(226,26,5)" fg:x="3868092" fg:w="85547379"/><text x="0.2597%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (85,547,379 samples, 0.22%)</title><rect x="0.0097%" y="197" width="0.2154%" height="15" fill="rgb(249,33,26)" fg:x="3868092" fg:w="85547379"/><text x="0.2597%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (85,547,379 samples, 0.22%)</title><rect x="0.0097%" y="181" width="0.2154%" height="15" fill="rgb(235,183,28)" fg:x="3868092" fg:w="85547379"/><text x="0.2597%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11,372,420 samples, 0.03%)</title><rect x="0.1965%" y="165" width="0.0286%" height="15" fill="rgb(221,5,38)" fg:x="78043051" fg:w="11372420"/><text x="0.4465%" y="175.50"></text></g><g><title>core::ptr::copy_nonoverlapping (11,372,420 samples, 0.03%)</title><rect x="0.1965%" y="149" width="0.0286%" height="15" fill="rgb(247,18,42)" fg:x="78043051" fg:w="11372420"/><text x="0.4465%" y="159.50"></text></g><g><title>[libc.so.6] (11,372,420 samples, 0.03%)</title><rect x="0.1965%" y="133" width="0.0286%" height="15" fill="rgb(241,131,45)" fg:x="78043051" fg:w="11372420"/><text x="0.4465%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22,595,118 samples, 0.06%)</title><rect x="0.2251%" y="325" width="0.0569%" height="15" fill="rgb(249,31,29)" fg:x="89415471" fg:w="22595118"/><text x="0.4751%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22,595,118 samples, 0.06%)</title><rect x="0.2251%" y="309" width="0.0569%" height="15" fill="rgb(225,111,53)" fg:x="89415471" fg:w="22595118"/><text x="0.4751%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (22,595,118 samples, 0.06%)</title><rect x="0.2251%" y="293" width="0.0569%" height="15" fill="rgb(238,160,17)" fg:x="89415471" fg:w="22595118"/><text x="0.4751%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (22,595,118 samples, 0.06%)</title><rect x="0.2251%" y="277" width="0.0569%" height="15" fill="rgb(214,148,48)" fg:x="89415471" fg:w="22595118"/><text x="0.4751%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22,595,118 samples, 0.06%)</title><rect x="0.2251%" y="261" width="0.0569%" height="15" fill="rgb(232,36,49)" fg:x="89415471" fg:w="22595118"/><text x="0.4751%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22,595,118 samples, 0.06%)</title><rect x="0.2251%" y="245" width="0.0569%" height="15" fill="rgb(209,103,24)" fg:x="89415471" fg:w="22595118"/><text x="0.4751%" y="255.50"></text></g><g><title>alloc::alloc::alloc (22,595,118 samples, 0.06%)</title><rect x="0.2251%" y="229" width="0.0569%" height="15" fill="rgb(229,88,8)" fg:x="89415471" fg:w="22595118"/><text x="0.4751%" y="239.50"></text></g><g><title>malloc (22,595,118 samples, 0.06%)</title><rect x="0.2251%" y="213" width="0.0569%" height="15" fill="rgb(213,181,19)" fg:x="89415471" fg:w="22595118"/><text x="0.4751%" y="223.50"></text></g><g><title>[libc.so.6] (22,595,118 samples, 0.06%)</title><rect x="0.2251%" y="197" width="0.0569%" height="15" fill="rgb(254,191,54)" fg:x="89415471" fg:w="22595118"/><text x="0.4751%" y="207.50"></text></g><g><title>[libc.so.6] (11,226,803 samples, 0.03%)</title><rect x="0.2537%" y="181" width="0.0283%" height="15" fill="rgb(241,83,37)" fg:x="100783786" fg:w="11226803"/><text x="0.5037%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41,953,275 samples, 0.11%)</title><rect x="0.2820%" y="261" width="0.1056%" height="15" fill="rgb(233,36,39)" fg:x="112010589" fg:w="41953275"/><text x="0.5320%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41,953,275 samples, 0.11%)</title><rect x="0.2820%" y="245" width="0.1056%" height="15" fill="rgb(226,3,54)" fg:x="112010589" fg:w="41953275"/><text x="0.5320%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (41,953,275 samples, 0.11%)</title><rect x="0.2820%" y="229" width="0.1056%" height="15" fill="rgb(245,192,40)" fg:x="112010589" fg:w="41953275"/><text x="0.5320%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (41,953,275 samples, 0.11%)</title><rect x="0.2820%" y="213" width="0.1056%" height="15" fill="rgb(238,167,29)" fg:x="112010589" fg:w="41953275"/><text x="0.5320%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41,953,275 samples, 0.11%)</title><rect x="0.2820%" y="197" width="0.1056%" height="15" fill="rgb(232,182,51)" fg:x="112010589" fg:w="41953275"/><text x="0.5320%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41,953,275 samples, 0.11%)</title><rect x="0.2820%" y="181" width="0.1056%" height="15" fill="rgb(231,60,39)" fg:x="112010589" fg:w="41953275"/><text x="0.5320%" y="191.50"></text></g><g><title>alloc::alloc::alloc (41,953,275 samples, 0.11%)</title><rect x="0.2820%" y="165" width="0.1056%" height="15" fill="rgb(208,69,12)" fg:x="112010589" fg:w="41953275"/><text x="0.5320%" y="175.50"></text></g><g><title>malloc (41,953,275 samples, 0.11%)</title><rect x="0.2820%" y="149" width="0.1056%" height="15" fill="rgb(235,93,37)" fg:x="112010589" fg:w="41953275"/><text x="0.5320%" y="159.50"></text></g><g><title>[libc.so.6] (30,659,527 samples, 0.08%)</title><rect x="0.3104%" y="133" width="0.0772%" height="15" fill="rgb(213,116,39)" fg:x="123304337" fg:w="30659527"/><text x="0.5604%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (68,463,585 samples, 0.17%)</title><rect x="0.2251%" y="373" width="0.1724%" height="15" fill="rgb(222,207,29)" fg:x="89415471" fg:w="68463585"/><text x="0.4751%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (68,463,585 samples, 0.17%)</title><rect x="0.2251%" y="357" width="0.1724%" height="15" fill="rgb(206,96,30)" fg:x="89415471" fg:w="68463585"/><text x="0.4751%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (68,463,585 samples, 0.17%)</title><rect x="0.2251%" y="341" width="0.1724%" height="15" fill="rgb(218,138,4)" fg:x="89415471" fg:w="68463585"/><text x="0.4751%" y="351.50"></text></g><g><title>core::clone::Clone::clone (45,868,467 samples, 0.12%)</title><rect x="0.2820%" y="325" width="0.1155%" height="15" fill="rgb(250,191,14)" fg:x="112010589" fg:w="45868467"/><text x="0.5320%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (45,868,467 samples, 0.12%)</title><rect x="0.2820%" y="309" width="0.1155%" height="15" fill="rgb(239,60,40)" fg:x="112010589" fg:w="45868467"/><text x="0.5320%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (45,868,467 samples, 0.12%)</title><rect x="0.2820%" y="293" width="0.1155%" height="15" fill="rgb(206,27,48)" fg:x="112010589" fg:w="45868467"/><text x="0.5320%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (45,868,467 samples, 0.12%)</title><rect x="0.2820%" y="277" width="0.1155%" height="15" fill="rgb(225,35,8)" fg:x="112010589" fg:w="45868467"/><text x="0.5320%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="309" width="0.0195%" height="15" fill="rgb(250,213,24)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="293" width="0.0195%" height="15" fill="rgb(247,123,22)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="303.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="277" width="0.0195%" height="15" fill="rgb(231,138,38)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt;&gt; (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="261" width="0.0195%" height="15" fill="rgb(231,145,46)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt; (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="245" width="0.0195%" height="15" fill="rgb(251,118,11)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="229" width="0.0195%" height="15" fill="rgb(217,147,25)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u32,alloc::alloc::Global&gt;&gt; (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="213" width="0.0195%" height="15" fill="rgb(247,81,37)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="197" width="0.0195%" height="15" fill="rgb(209,12,38)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="181" width="0.0195%" height="15" fill="rgb(227,1,9)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="165" width="0.0195%" height="15" fill="rgb(248,47,43)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="149" width="0.0195%" height="15" fill="rgb(221,10,30)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="133" width="0.0195%" height="15" fill="rgb(210,229,1)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="117" width="0.0195%" height="15" fill="rgb(222,148,37)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="127.50"></text></g><g><title>cfree (7,749,049 samples, 0.02%)</title><rect x="0.4159%" y="101" width="0.0195%" height="15" fill="rgb(234,67,33)" fg:x="165221869" fg:w="7749049"/><text x="0.6659%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (11,594,936 samples, 0.03%)</title><rect x="0.4159%" y="325" width="0.0292%" height="15" fill="rgb(247,98,35)" fg:x="165221869" fg:w="11594936"/><text x="0.6659%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (7,449,130 samples, 0.02%)</title><rect x="0.4646%" y="309" width="0.0188%" height="15" fill="rgb(247,138,52)" fg:x="184569011" fg:w="7449130"/><text x="0.7146%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (37,938,881 samples, 0.10%)</title><rect x="0.5020%" y="261" width="0.0955%" height="15" fill="rgb(213,79,30)" fg:x="199403997" fg:w="37938881"/><text x="0.7520%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,938,881 samples, 0.10%)</title><rect x="0.5020%" y="245" width="0.0955%" height="15" fill="rgb(246,177,23)" fg:x="199403997" fg:w="37938881"/><text x="0.7520%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (37,938,881 samples, 0.10%)</title><rect x="0.5020%" y="229" width="0.0955%" height="15" fill="rgb(230,62,27)" fg:x="199403997" fg:w="37938881"/><text x="0.7520%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,938,881 samples, 0.10%)</title><rect x="0.5020%" y="213" width="0.0955%" height="15" fill="rgb(216,154,8)" fg:x="199403997" fg:w="37938881"/><text x="0.7520%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (37,938,881 samples, 0.10%)</title><rect x="0.5020%" y="197" width="0.0955%" height="15" fill="rgb(244,35,45)" fg:x="199403997" fg:w="37938881"/><text x="0.7520%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,938,881 samples, 0.10%)</title><rect x="0.5020%" y="181" width="0.0955%" height="15" fill="rgb(251,115,12)" fg:x="199403997" fg:w="37938881"/><text x="0.7520%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (37,938,881 samples, 0.10%)</title><rect x="0.5020%" y="165" width="0.0955%" height="15" fill="rgb(240,54,50)" fg:x="199403997" fg:w="37938881"/><text x="0.7520%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37,938,881 samples, 0.10%)</title><rect x="0.5020%" y="149" width="0.0955%" height="15" fill="rgb(233,84,52)" fg:x="199403997" fg:w="37938881"/><text x="0.7520%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (37,938,881 samples, 0.10%)</title><rect x="0.5020%" y="133" width="0.0955%" height="15" fill="rgb(207,117,47)" fg:x="199403997" fg:w="37938881"/><text x="0.7520%" y="143.50"></text></g><g><title>cfree (34,106,007 samples, 0.09%)</title><rect x="0.5116%" y="117" width="0.0859%" height="15" fill="rgb(249,43,39)" fg:x="203236871" fg:w="34106007"/><text x="0.7616%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt; (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="261" width="0.0192%" height="15" fill="rgb(209,38,44)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="245" width="0.0192%" height="15" fill="rgb(236,212,23)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u32,alloc::alloc::Global&gt;&gt; (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="229" width="0.0192%" height="15" fill="rgb(242,79,21)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="213" width="0.0192%" height="15" fill="rgb(211,96,35)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="197" width="0.0192%" height="15" fill="rgb(253,215,40)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="181" width="0.0192%" height="15" fill="rgb(211,81,21)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="165" width="0.0192%" height="15" fill="rgb(208,190,38)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="149" width="0.0192%" height="15" fill="rgb(235,213,38)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="133" width="0.0192%" height="15" fill="rgb(237,122,38)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="143.50"></text></g><g><title>cfree (7,618,149 samples, 0.02%)</title><rect x="0.5975%" y="117" width="0.0192%" height="15" fill="rgb(244,218,35)" fg:x="237342878" fg:w="7618149"/><text x="0.8475%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;u16,alloc::vec::Vec&lt;u16&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;,alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (7,543,724 samples, 0.02%)</title><rect x="0.6167%" y="261" width="0.0190%" height="15" fill="rgb(240,68,47)" fg:x="244961027" fg:w="7543724"/><text x="0.8667%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;,alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt;&gt;::{{closure}}&gt; (7,543,724 samples, 0.02%)</title><rect x="0.6167%" y="245" width="0.0190%" height="15" fill="rgb(210,16,53)" fg:x="244961027" fg:w="7543724"/><text x="0.8667%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (7,543,724 samples, 0.02%)</title><rect x="0.6167%" y="229" width="0.0190%" height="15" fill="rgb(235,124,12)" fg:x="244961027" fg:w="7543724"/><text x="0.8667%" y="239.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (7,543,724 samples, 0.02%)</title><rect x="0.6167%" y="213" width="0.0190%" height="15" fill="rgb(224,169,11)" fg:x="244961027" fg:w="7543724"/><text x="0.8667%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (64,111,285 samples, 0.16%)</title><rect x="0.4834%" y="293" width="0.1614%" height="15" fill="rgb(250,166,2)" fg:x="192018141" fg:w="64111285"/><text x="0.7334%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (64,111,285 samples, 0.16%)</title><rect x="0.4834%" y="277" width="0.1614%" height="15" fill="rgb(242,216,29)" fg:x="192018141" fg:w="64111285"/><text x="0.7334%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,405,127 samples, 0.03%)</title><rect x="0.6448%" y="277" width="0.0262%" height="15" fill="rgb(230,116,27)" fg:x="256129426" fg:w="10405127"/><text x="0.8948%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (10,405,127 samples, 0.03%)</title><rect x="0.6448%" y="261" width="0.0262%" height="15" fill="rgb(228,99,48)" fg:x="256129426" fg:w="10405127"/><text x="0.8948%" y="271.50"></text></g><g><title>img::png::deflate::prefix_table::get_cl_codes_for_code_lengths::_{{closure}} (10,405,127 samples, 0.03%)</title><rect x="0.6448%" y="245" width="0.0262%" height="15" fill="rgb(253,11,6)" fg:x="256129426" fg:w="10405127"/><text x="0.8948%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10,405,127 samples, 0.03%)</title><rect x="0.6448%" y="229" width="0.0262%" height="15" fill="rgb(247,143,39)" fg:x="256129426" fg:w="10405127"/><text x="0.8948%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10,405,127 samples, 0.03%)</title><rect x="0.6448%" y="213" width="0.0262%" height="15" fill="rgb(236,97,10)" fg:x="256129426" fg:w="10405127"/><text x="0.8948%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10,405,127 samples, 0.03%)</title><rect x="0.6448%" y="197" width="0.0262%" height="15" fill="rgb(233,208,19)" fg:x="256129426" fg:w="10405127"/><text x="0.8948%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (6,761,551 samples, 0.02%)</title><rect x="0.6540%" y="181" width="0.0170%" height="15" fill="rgb(216,164,2)" fg:x="259773002" fg:w="6761551"/><text x="0.9040%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,761,551 samples, 0.02%)</title><rect x="0.6540%" y="165" width="0.0170%" height="15" fill="rgb(220,129,5)" fg:x="259773002" fg:w="6761551"/><text x="0.9040%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,761,551 samples, 0.02%)</title><rect x="0.6540%" y="149" width="0.0170%" height="15" fill="rgb(242,17,10)" fg:x="259773002" fg:w="6761551"/><text x="0.9040%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,570,545 samples, 0.03%)</title><rect x="0.6448%" y="293" width="0.0291%" height="15" fill="rgb(242,107,0)" fg:x="256129426" fg:w="11570545"/><text x="0.8948%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7,703,726 samples, 0.02%)</title><rect x="0.6833%" y="277" width="0.0194%" height="15" fill="rgb(251,28,31)" fg:x="271435628" fg:w="7703726"/><text x="0.9333%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (7,703,726 samples, 0.02%)</title><rect x="0.6833%" y="261" width="0.0194%" height="15" fill="rgb(233,223,10)" fg:x="271435628" fg:w="7703726"/><text x="0.9333%" y="271.50"></text></g><g><title>core::ptr::write (7,703,726 samples, 0.02%)</title><rect x="0.6833%" y="245" width="0.0194%" height="15" fill="rgb(215,21,27)" fg:x="271435628" fg:w="7703726"/><text x="0.9333%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (185,557,917 samples, 0.47%)</title><rect x="0.4159%" y="341" width="0.4671%" height="15" fill="rgb(232,23,21)" fg:x="165221869" fg:w="185557917"/><text x="0.6659%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (173,962,981 samples, 0.44%)</title><rect x="0.4451%" y="325" width="0.4379%" height="15" fill="rgb(244,5,23)" fg:x="176816805" fg:w="173962981"/><text x="0.6951%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (158,761,645 samples, 0.40%)</title><rect x="0.4834%" y="309" width="0.3997%" height="15" fill="rgb(226,81,46)" fg:x="192018141" fg:w="158761645"/><text x="0.7334%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (83,079,815 samples, 0.21%)</title><rect x="0.6739%" y="293" width="0.2091%" height="15" fill="rgb(247,70,30)" fg:x="267699971" fg:w="83079815"/><text x="0.9239%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (71,640,432 samples, 0.18%)</title><rect x="0.7027%" y="277" width="0.1803%" height="15" fill="rgb(212,68,19)" fg:x="279139354" fg:w="71640432"/><text x="0.9527%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (71,640,432 samples, 0.18%)</title><rect x="0.7027%" y="261" width="0.1803%" height="15" fill="rgb(240,187,13)" fg:x="279139354" fg:w="71640432"/><text x="0.9527%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (71,640,432 samples, 0.18%)</title><rect x="0.7027%" y="245" width="0.1803%" height="15" fill="rgb(223,113,26)" fg:x="279139354" fg:w="71640432"/><text x="0.9527%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (71,640,432 samples, 0.18%)</title><rect x="0.7027%" y="229" width="0.1803%" height="15" fill="rgb(206,192,2)" fg:x="279139354" fg:w="71640432"/><text x="0.9527%" y="239.50"></text></g><g><title>core::ptr::copy (71,640,432 samples, 0.18%)</title><rect x="0.7027%" y="213" width="0.1803%" height="15" fill="rgb(241,108,4)" fg:x="279139354" fg:w="71640432"/><text x="0.9527%" y="223.50"></text></g><g><title>[libc.so.6] (71,640,432 samples, 0.18%)</title><rect x="0.7027%" y="197" width="0.1803%" height="15" fill="rgb(247,173,49)" fg:x="279139354" fg:w="71640432"/><text x="0.9527%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (227,026,428 samples, 0.57%)</title><rect x="0.3974%" y="373" width="0.5715%" height="15" fill="rgb(224,114,35)" fg:x="157879056" fg:w="227026428"/><text x="0.6474%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (219,683,615 samples, 0.55%)</title><rect x="0.4159%" y="357" width="0.5530%" height="15" fill="rgb(245,159,27)" fg:x="165221869" fg:w="219683615"/><text x="0.6659%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (30,169,465 samples, 0.08%)</title><rect x="0.8930%" y="341" width="0.0759%" height="15" fill="rgb(245,172,44)" fg:x="354736019" fg:w="30169465"/><text x="1.1430%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (30,169,465 samples, 0.08%)</title><rect x="0.8930%" y="325" width="0.0759%" height="15" fill="rgb(236,23,11)" fg:x="354736019" fg:w="30169465"/><text x="1.1430%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22,462,985 samples, 0.06%)</title><rect x="0.9124%" y="309" width="0.0565%" height="15" fill="rgb(205,117,38)" fg:x="362442499" fg:w="22462985"/><text x="1.1624%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (22,462,985 samples, 0.06%)</title><rect x="0.9124%" y="293" width="0.0565%" height="15" fill="rgb(237,72,25)" fg:x="362442499" fg:w="22462985"/><text x="1.1624%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (22,462,985 samples, 0.06%)</title><rect x="0.9124%" y="277" width="0.0565%" height="15" fill="rgb(244,70,9)" fg:x="362442499" fg:w="22462985"/><text x="1.1624%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15,074,859 samples, 0.04%)</title><rect x="0.9310%" y="261" width="0.0379%" height="15" fill="rgb(217,125,39)" fg:x="369830625" fg:w="15074859"/><text x="1.1810%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15,074,859 samples, 0.04%)</title><rect x="0.9310%" y="245" width="0.0379%" height="15" fill="rgb(235,36,10)" fg:x="369830625" fg:w="15074859"/><text x="1.1810%" y="255.50"></text></g><g><title>alloc::alloc::alloc (15,074,859 samples, 0.04%)</title><rect x="0.9310%" y="229" width="0.0379%" height="15" fill="rgb(251,123,47)" fg:x="369830625" fg:w="15074859"/><text x="1.1810%" y="239.50"></text></g><g><title>malloc (15,074,859 samples, 0.04%)</title><rect x="0.9310%" y="213" width="0.0379%" height="15" fill="rgb(221,13,13)" fg:x="369830625" fg:w="15074859"/><text x="1.1810%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (46,772,568 samples, 0.12%)</title><rect x="0.9690%" y="373" width="0.1177%" height="15" fill="rgb(238,131,9)" fg:x="384905484" fg:w="46772568"/><text x="1.2190%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (46,772,568 samples, 0.12%)</title><rect x="0.9690%" y="357" width="0.1177%" height="15" fill="rgb(211,50,8)" fg:x="384905484" fg:w="46772568"/><text x="1.2190%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (46,772,568 samples, 0.12%)</title><rect x="0.9690%" y="341" width="0.1177%" height="15" fill="rgb(245,182,24)" fg:x="384905484" fg:w="46772568"/><text x="1.2190%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (23,168,285 samples, 0.06%)</title><rect x="1.0284%" y="325" width="0.0583%" height="15" fill="rgb(242,14,37)" fg:x="408509767" fg:w="23168285"/><text x="1.2784%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (19,353,860 samples, 0.05%)</title><rect x="1.0963%" y="293" width="0.0487%" height="15" fill="rgb(246,228,12)" fg:x="435495839" fg:w="19353860"/><text x="1.3463%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (19,353,860 samples, 0.05%)</title><rect x="1.0963%" y="277" width="0.0487%" height="15" fill="rgb(213,55,15)" fg:x="435495839" fg:w="19353860"/><text x="1.3463%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,353,860 samples, 0.05%)</title><rect x="1.0963%" y="261" width="0.0487%" height="15" fill="rgb(209,9,3)" fg:x="435495839" fg:w="19353860"/><text x="1.3463%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (19,353,860 samples, 0.05%)</title><rect x="1.0963%" y="245" width="0.0487%" height="15" fill="rgb(230,59,30)" fg:x="435495839" fg:w="19353860"/><text x="1.3463%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19,353,860 samples, 0.05%)</title><rect x="1.0963%" y="229" width="0.0487%" height="15" fill="rgb(209,121,21)" fg:x="435495839" fg:w="19353860"/><text x="1.3463%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (19,353,860 samples, 0.05%)</title><rect x="1.0963%" y="213" width="0.0487%" height="15" fill="rgb(220,109,13)" fg:x="435495839" fg:w="19353860"/><text x="1.3463%" y="223.50"></text></g><g><title>cfree (19,353,860 samples, 0.05%)</title><rect x="1.0963%" y="197" width="0.0487%" height="15" fill="rgb(232,18,1)" fg:x="435495839" fg:w="19353860"/><text x="1.3463%" y="207.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (23,212,964 samples, 0.06%)</title><rect x="1.0963%" y="325" width="0.0584%" height="15" fill="rgb(215,41,42)" fg:x="435495839" fg:w="23212964"/><text x="1.3463%" y="335.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (23,212,964 samples, 0.06%)</title><rect x="1.0963%" y="309" width="0.0584%" height="15" fill="rgb(224,123,36)" fg:x="435495839" fg:w="23212964"/><text x="1.3463%" y="319.50"></text></g><g><title>[img] (34,756,200 samples, 0.09%)</title><rect x="1.0867%" y="373" width="0.0875%" height="15" fill="rgb(240,125,3)" fg:x="431678052" fg:w="34756200"/><text x="1.3367%" y="383.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (34,756,200 samples, 0.09%)</title><rect x="1.0867%" y="357" width="0.0875%" height="15" fill="rgb(205,98,50)" fg:x="431678052" fg:w="34756200"/><text x="1.3367%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (30,938,413 samples, 0.08%)</title><rect x="1.0963%" y="341" width="0.0779%" height="15" fill="rgb(205,185,37)" fg:x="435495839" fg:w="30938413"/><text x="1.3463%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="325" width="0.0194%" height="15" fill="rgb(238,207,15)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="309" width="0.0194%" height="15" fill="rgb(213,199,42)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="293" width="0.0194%" height="15" fill="rgb(235,201,11)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="277" width="0.0194%" height="15" fill="rgb(207,46,11)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="261" width="0.0194%" height="15" fill="rgb(241,35,35)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="245" width="0.0194%" height="15" fill="rgb(243,32,47)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="229" width="0.0194%" height="15" fill="rgb(247,202,23)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="213" width="0.0194%" height="15" fill="rgb(219,102,11)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="197" width="0.0194%" height="15" fill="rgb(243,110,44)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="181" width="0.0194%" height="15" fill="rgb(222,74,54)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="191.50"></text></g><g><title>cfree (7,725,449 samples, 0.02%)</title><rect x="1.1548%" y="165" width="0.0194%" height="15" fill="rgb(216,99,12)" fg:x="458708803" fg:w="7725449"/><text x="1.4048%" y="175.50"></text></g><g><title>[libc.so.6] (11,187,345 samples, 0.03%)</title><rect x="1.1742%" y="373" width="0.0282%" height="15" fill="rgb(226,22,26)" fg:x="466434252" fg:w="11187345"/><text x="1.4242%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7,508,611 samples, 0.02%)</title><rect x="1.2024%" y="357" width="0.0189%" height="15" fill="rgb(217,163,10)" fg:x="477621597" fg:w="7508611"/><text x="1.4524%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7,508,611 samples, 0.02%)</title><rect x="1.2024%" y="341" width="0.0189%" height="15" fill="rgb(213,25,53)" fg:x="477621597" fg:w="7508611"/><text x="1.4524%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (7,508,611 samples, 0.02%)</title><rect x="1.2024%" y="325" width="0.0189%" height="15" fill="rgb(252,105,26)" fg:x="477621597" fg:w="7508611"/><text x="1.4524%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (7,487,134 samples, 0.02%)</title><rect x="1.2493%" y="309" width="0.0188%" height="15" fill="rgb(220,39,43)" fg:x="496252588" fg:w="7487134"/><text x="1.4993%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="245" width="0.0196%" height="15" fill="rgb(229,68,48)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="229" width="0.0196%" height="15" fill="rgb(252,8,32)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="213" width="0.0196%" height="15" fill="rgb(223,20,43)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="197" width="0.0196%" height="15" fill="rgb(229,81,49)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="181" width="0.0196%" height="15" fill="rgb(236,28,36)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="165" width="0.0196%" height="15" fill="rgb(249,185,26)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="149" width="0.0196%" height="15" fill="rgb(249,174,33)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="133" width="0.0196%" height="15" fill="rgb(233,201,37)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="117" width="0.0196%" height="15" fill="rgb(221,78,26)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="127.50"></text></g><g><title>cfree (7,777,109 samples, 0.02%)</title><rect x="1.2681%" y="101" width="0.0196%" height="15" fill="rgb(250,127,30)" fg:x="503739722" fg:w="7777109"/><text x="1.5181%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (23,073,832 samples, 0.06%)</title><rect x="1.2493%" y="325" width="0.0581%" height="15" fill="rgb(230,49,44)" fg:x="496252588" fg:w="23073832"/><text x="1.4993%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (15,586,698 samples, 0.04%)</title><rect x="1.2681%" y="309" width="0.0392%" height="15" fill="rgb(229,67,23)" fg:x="503739722" fg:w="15586698"/><text x="1.5181%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15,586,698 samples, 0.04%)</title><rect x="1.2681%" y="293" width="0.0392%" height="15" fill="rgb(249,83,47)" fg:x="503739722" fg:w="15586698"/><text x="1.5181%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,586,698 samples, 0.04%)</title><rect x="1.2681%" y="277" width="0.0392%" height="15" fill="rgb(215,43,3)" fg:x="503739722" fg:w="15586698"/><text x="1.5181%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,586,698 samples, 0.04%)</title><rect x="1.2681%" y="261" width="0.0392%" height="15" fill="rgb(238,154,13)" fg:x="503739722" fg:w="15586698"/><text x="1.5181%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41,702,494 samples, 0.10%)</title><rect x="1.2213%" y="357" width="0.1050%" height="15" fill="rgb(219,56,2)" fg:x="485130208" fg:w="41702494"/><text x="1.4713%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (38,083,691 samples, 0.10%)</title><rect x="1.2304%" y="341" width="0.0959%" height="15" fill="rgb(233,0,4)" fg:x="488749011" fg:w="38083691"/><text x="1.4804%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7,506,282 samples, 0.02%)</title><rect x="1.3074%" y="325" width="0.0189%" height="15" fill="rgb(235,30,7)" fg:x="519326420" fg:w="7506282"/><text x="1.5574%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,506,282 samples, 0.02%)</title><rect x="1.3074%" y="309" width="0.0189%" height="15" fill="rgb(250,79,13)" fg:x="519326420" fg:w="7506282"/><text x="1.5574%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (18,466,713 samples, 0.05%)</title><rect x="1.3548%" y="213" width="0.0465%" height="15" fill="rgb(211,146,34)" fg:x="538187229" fg:w="18466713"/><text x="1.6048%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33,474,723 samples, 0.08%)</title><rect x="1.3263%" y="357" width="0.0843%" height="15" fill="rgb(228,22,38)" fg:x="526832702" fg:w="33474723"/><text x="1.5763%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (33,474,723 samples, 0.08%)</title><rect x="1.3263%" y="341" width="0.0843%" height="15" fill="rgb(235,168,5)" fg:x="526832702" fg:w="33474723"/><text x="1.5763%" y="351.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths::_{{closure}} (33,474,723 samples, 0.08%)</title><rect x="1.3263%" y="325" width="0.0843%" height="15" fill="rgb(221,155,16)" fg:x="526832702" fg:w="33474723"/><text x="1.5763%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (33,474,723 samples, 0.08%)</title><rect x="1.3263%" y="309" width="0.0843%" height="15" fill="rgb(215,215,53)" fg:x="526832702" fg:w="33474723"/><text x="1.5763%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (33,474,723 samples, 0.08%)</title><rect x="1.3263%" y="293" width="0.0843%" height="15" fill="rgb(223,4,10)" fg:x="526832702" fg:w="33474723"/><text x="1.5763%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (33,474,723 samples, 0.08%)</title><rect x="1.3263%" y="277" width="0.0843%" height="15" fill="rgb(234,103,6)" fg:x="526832702" fg:w="33474723"/><text x="1.5763%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33,474,723 samples, 0.08%)</title><rect x="1.3263%" y="261" width="0.0843%" height="15" fill="rgb(227,97,0)" fg:x="526832702" fg:w="33474723"/><text x="1.5763%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33,474,723 samples, 0.08%)</title><rect x="1.3263%" y="245" width="0.0843%" height="15" fill="rgb(234,150,53)" fg:x="526832702" fg:w="33474723"/><text x="1.5763%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (22,120,196 samples, 0.06%)</title><rect x="1.3548%" y="229" width="0.0557%" height="15" fill="rgb(228,201,54)" fg:x="538187229" fg:w="22120196"/><text x="1.6048%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6,940,838 samples, 0.02%)</title><rect x="1.4105%" y="357" width="0.0175%" height="15" fill="rgb(222,22,37)" fg:x="560307425" fg:w="6940838"/><text x="1.6605%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6,940,838 samples, 0.02%)</title><rect x="1.4105%" y="341" width="0.0175%" height="15" fill="rgb(237,53,32)" fg:x="560307425" fg:w="6940838"/><text x="1.6605%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,940,838 samples, 0.02%)</title><rect x="1.4105%" y="325" width="0.0175%" height="15" fill="rgb(233,25,53)" fg:x="560307425" fg:w="6940838"/><text x="1.6605%" y="335.50"></text></g><g><title>[unknown] (7,460,183 samples, 0.02%)</title><rect x="1.4372%" y="357" width="0.0188%" height="15" fill="rgb(210,40,34)" fg:x="570908349" fg:w="7460183"/><text x="1.6872%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (7,460,183 samples, 0.02%)</title><rect x="1.4372%" y="341" width="0.0188%" height="15" fill="rgb(241,220,44)" fg:x="570908349" fg:w="7460183"/><text x="1.6872%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (22,935,702 samples, 0.06%)</title><rect x="1.4657%" y="357" width="0.0577%" height="15" fill="rgb(235,28,35)" fg:x="582243072" fg:w="22935702"/><text x="1.7157%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (22,935,702 samples, 0.06%)</title><rect x="1.4657%" y="341" width="0.0577%" height="15" fill="rgb(210,56,17)" fg:x="582243072" fg:w="22935702"/><text x="1.7157%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (22,935,702 samples, 0.06%)</title><rect x="1.4657%" y="325" width="0.0577%" height="15" fill="rgb(224,130,29)" fg:x="582243072" fg:w="22935702"/><text x="1.7157%" y="335.50"></text></g><g><title>alloc::alloc::realloc (22,935,702 samples, 0.06%)</title><rect x="1.4657%" y="309" width="0.0577%" height="15" fill="rgb(235,212,8)" fg:x="582243072" fg:w="22935702"/><text x="1.7157%" y="319.50"></text></g><g><title>realloc (22,935,702 samples, 0.06%)</title><rect x="1.4657%" y="293" width="0.0577%" height="15" fill="rgb(223,33,50)" fg:x="582243072" fg:w="22935702"/><text x="1.7157%" y="303.50"></text></g><g><title>[libc.so.6] (19,274,466 samples, 0.05%)</title><rect x="1.4750%" y="277" width="0.0485%" height="15" fill="rgb(219,149,13)" fg:x="585904308" fg:w="19274466"/><text x="1.7250%" y="287.50"></text></g><g><title>[libc.so.6] (15,566,697 samples, 0.04%)</title><rect x="1.4843%" y="261" width="0.0392%" height="15" fill="rgb(250,156,29)" fg:x="589612077" fg:w="15566697"/><text x="1.7343%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7,505,711 samples, 0.02%)</title><rect x="1.5521%" y="293" width="0.0189%" height="15" fill="rgb(216,193,19)" fg:x="616551460" fg:w="7505711"/><text x="1.8021%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11,122,156 samples, 0.03%)</title><rect x="1.5807%" y="277" width="0.0280%" height="15" fill="rgb(216,135,14)" fg:x="627894785" fg:w="11122156"/><text x="1.8307%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (34,011,835 samples, 0.09%)</title><rect x="1.5421%" y="341" width="0.0856%" height="15" fill="rgb(241,47,5)" fg:x="612589300" fg:w="34011835"/><text x="1.7921%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (34,011,835 samples, 0.09%)</title><rect x="1.5421%" y="325" width="0.0856%" height="15" fill="rgb(233,42,35)" fg:x="612589300" fg:w="34011835"/><text x="1.7921%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (34,011,835 samples, 0.09%)</title><rect x="1.5421%" y="309" width="0.0856%" height="15" fill="rgb(231,13,6)" fg:x="612589300" fg:w="34011835"/><text x="1.7921%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (22,543,964 samples, 0.06%)</title><rect x="1.5710%" y="293" width="0.0568%" height="15" fill="rgb(207,181,40)" fg:x="624057171" fg:w="22543964"/><text x="1.8210%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7,584,194 samples, 0.02%)</title><rect x="1.6087%" y="277" width="0.0191%" height="15" fill="rgb(254,173,49)" fg:x="639016941" fg:w="7584194"/><text x="1.8587%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (45,020,662 samples, 0.11%)</title><rect x="1.5329%" y="357" width="0.1133%" height="15" fill="rgb(221,1,38)" fg:x="608912415" fg:w="45020662"/><text x="1.7829%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (14,614,011 samples, 0.04%)</title><rect x="1.6462%" y="357" width="0.0368%" height="15" fill="rgb(206,124,46)" fg:x="653933077" fg:w="14614011"/><text x="1.8962%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (14,614,011 samples, 0.04%)</title><rect x="1.6462%" y="341" width="0.0368%" height="15" fill="rgb(249,21,11)" fg:x="653933077" fg:w="14614011"/><text x="1.8962%" y="351.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (10,996,934 samples, 0.03%)</title><rect x="1.6553%" y="325" width="0.0277%" height="15" fill="rgb(222,201,40)" fg:x="657550154" fg:w="10996934"/><text x="1.9053%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (10,996,934 samples, 0.03%)</title><rect x="1.6553%" y="309" width="0.0277%" height="15" fill="rgb(235,61,29)" fg:x="657550154" fg:w="10996934"/><text x="1.9053%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (10,996,934 samples, 0.03%)</title><rect x="1.6553%" y="293" width="0.0277%" height="15" fill="rgb(219,207,3)" fg:x="657550154" fg:w="10996934"/><text x="1.9053%" y="303.50"></text></g><g><title>core::ptr::copy_nonoverlapping (10,996,934 samples, 0.03%)</title><rect x="1.6553%" y="277" width="0.0277%" height="15" fill="rgb(222,56,46)" fg:x="657550154" fg:w="10996934"/><text x="1.9053%" y="287.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_down (11,198,249 samples, 0.03%)</title><rect x="1.6830%" y="309" width="0.0282%" height="15" fill="rgb(239,76,54)" fg:x="668547088" fg:w="11198249"/><text x="1.9330%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (7,329,666 samples, 0.02%)</title><rect x="1.6927%" y="293" width="0.0185%" height="15" fill="rgb(231,124,27)" fg:x="672415671" fg:w="7329666"/><text x="1.9427%" y="303.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (18,430,833 samples, 0.05%)</title><rect x="1.6830%" y="341" width="0.0464%" height="15" fill="rgb(249,195,6)" fg:x="668547088" fg:w="18430833"/><text x="1.9330%" y="351.50"></text></g><g><title>core::slice::sort::stable::merge::merge (18,430,833 samples, 0.05%)</title><rect x="1.6830%" y="325" width="0.0464%" height="15" fill="rgb(237,174,47)" fg:x="668547088" fg:w="18430833"/><text x="1.9330%" y="335.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_up (7,232,584 samples, 0.02%)</title><rect x="1.7112%" y="309" width="0.0182%" height="15" fill="rgb(206,201,31)" fg:x="679745337" fg:w="7232584"/><text x="1.9612%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (7,232,584 samples, 0.02%)</title><rect x="1.7112%" y="293" width="0.0182%" height="15" fill="rgb(231,57,52)" fg:x="679745337" fg:w="7232584"/><text x="1.9612%" y="303.50"></text></g><g><title>core::slice::sort::stable::drift::sort (22,296,451 samples, 0.06%)</title><rect x="1.6830%" y="357" width="0.0561%" height="15" fill="rgb(248,177,22)" fg:x="668547088" fg:w="22296451"/><text x="1.9330%" y="367.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (7,719,239 samples, 0.02%)</title><rect x="1.7391%" y="341" width="0.0194%" height="15" fill="rgb(215,211,37)" fg:x="690843539" fg:w="7719239"/><text x="1.9891%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7,719,239 samples, 0.02%)</title><rect x="1.7391%" y="325" width="0.0194%" height="15" fill="rgb(241,128,51)" fg:x="690843539" fg:w="7719239"/><text x="1.9891%" y="335.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (19,302,902 samples, 0.05%)</title><rect x="1.7391%" y="357" width="0.0486%" height="15" fill="rgb(227,165,31)" fg:x="690843539" fg:w="19302902"/><text x="1.9891%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (11,583,663 samples, 0.03%)</title><rect x="1.7586%" y="341" width="0.0292%" height="15" fill="rgb(228,167,24)" fg:x="698562778" fg:w="11583663"/><text x="2.0086%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (7,703,115 samples, 0.02%)</title><rect x="1.7683%" y="325" width="0.0194%" height="15" fill="rgb(228,143,12)" fg:x="702443326" fg:w="7703115"/><text x="2.0183%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (7,703,115 samples, 0.02%)</title><rect x="1.7683%" y="309" width="0.0194%" height="15" fill="rgb(249,149,8)" fg:x="702443326" fg:w="7703115"/><text x="2.0183%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7,324,251 samples, 0.02%)</title><rect x="1.7877%" y="261" width="0.0184%" height="15" fill="rgb(243,35,44)" fg:x="710146441" fg:w="7324251"/><text x="2.0377%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11,165,727 samples, 0.03%)</title><rect x="1.7877%" y="357" width="0.0281%" height="15" fill="rgb(246,89,9)" fg:x="710146441" fg:w="11165727"/><text x="2.0377%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (11,165,727 samples, 0.03%)</title><rect x="1.7877%" y="341" width="0.0281%" height="15" fill="rgb(233,213,13)" fg:x="710146441" fg:w="11165727"/><text x="2.0377%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11,165,727 samples, 0.03%)</title><rect x="1.7877%" y="325" width="0.0281%" height="15" fill="rgb(233,141,41)" fg:x="710146441" fg:w="11165727"/><text x="2.0377%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11,165,727 samples, 0.03%)</title><rect x="1.7877%" y="309" width="0.0281%" height="15" fill="rgb(239,167,4)" fg:x="710146441" fg:w="11165727"/><text x="2.0377%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11,165,727 samples, 0.03%)</title><rect x="1.7877%" y="293" width="0.0281%" height="15" fill="rgb(209,217,16)" fg:x="710146441" fg:w="11165727"/><text x="2.0377%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11,165,727 samples, 0.03%)</title><rect x="1.7877%" y="277" width="0.0281%" height="15" fill="rgb(219,88,35)" fg:x="710146441" fg:w="11165727"/><text x="2.0377%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (7,825,732 samples, 0.02%)</title><rect x="1.8158%" y="309" width="0.0197%" height="15" fill="rgb(220,193,23)" fg:x="721312168" fg:w="7825732"/><text x="2.0658%" y="319.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (7,825,732 samples, 0.02%)</title><rect x="1.8158%" y="293" width="0.0197%" height="15" fill="rgb(230,90,52)" fg:x="721312168" fg:w="7825732"/><text x="2.0658%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (7,825,732 samples, 0.02%)</title><rect x="1.8158%" y="277" width="0.0197%" height="15" fill="rgb(252,106,19)" fg:x="721312168" fg:w="7825732"/><text x="2.0658%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7,825,732 samples, 0.02%)</title><rect x="1.8158%" y="261" width="0.0197%" height="15" fill="rgb(206,74,20)" fg:x="721312168" fg:w="7825732"/><text x="2.0658%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7,825,732 samples, 0.02%)</title><rect x="1.8158%" y="245" width="0.0197%" height="15" fill="rgb(230,138,44)" fg:x="721312168" fg:w="7825732"/><text x="2.0658%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7,825,732 samples, 0.02%)</title><rect x="1.8158%" y="229" width="0.0197%" height="15" fill="rgb(235,182,43)" fg:x="721312168" fg:w="7825732"/><text x="2.0658%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7,825,732 samples, 0.02%)</title><rect x="1.8158%" y="213" width="0.0197%" height="15" fill="rgb(242,16,51)" fg:x="721312168" fg:w="7825732"/><text x="2.0658%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7,825,732 samples, 0.02%)</title><rect x="1.8158%" y="197" width="0.0197%" height="15" fill="rgb(248,9,4)" fg:x="721312168" fg:w="7825732"/><text x="2.0658%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11,686,337 samples, 0.03%)</title><rect x="1.8158%" y="357" width="0.0294%" height="15" fill="rgb(210,31,22)" fg:x="721312168" fg:w="11686337"/><text x="2.0658%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (11,686,337 samples, 0.03%)</title><rect x="1.8158%" y="341" width="0.0294%" height="15" fill="rgb(239,54,39)" fg:x="721312168" fg:w="11686337"/><text x="2.0658%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (11,686,337 samples, 0.03%)</title><rect x="1.8158%" y="325" width="0.0294%" height="15" fill="rgb(230,99,41)" fg:x="721312168" fg:w="11686337"/><text x="2.0658%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (11,315,038 samples, 0.03%)</title><rect x="1.8453%" y="357" width="0.0285%" height="15" fill="rgb(253,106,12)" fg:x="732998505" fg:w="11315038"/><text x="2.0953%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (11,315,038 samples, 0.03%)</title><rect x="1.8453%" y="341" width="0.0285%" height="15" fill="rgb(213,46,41)" fg:x="732998505" fg:w="11315038"/><text x="2.0953%" y="351.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (11,315,038 samples, 0.03%)</title><rect x="1.8453%" y="325" width="0.0285%" height="15" fill="rgb(215,133,35)" fg:x="732998505" fg:w="11315038"/><text x="2.0953%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::flush_buffer (7,506,214 samples, 0.02%)</title><rect x="1.8548%" y="309" width="0.0189%" height="15" fill="rgb(213,28,5)" fg:x="736807329" fg:w="7506214"/><text x="2.1048%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,506,214 samples, 0.02%)</title><rect x="1.8548%" y="293" width="0.0189%" height="15" fill="rgb(215,77,49)" fg:x="736807329" fg:w="7506214"/><text x="2.1048%" y="303.50"></text></g><g><title>img::png::deflate::encode_block_type_two (15,543,647 samples, 0.04%)</title><rect x="1.8829%" y="357" width="0.0391%" height="15" fill="rgb(248,100,22)" fg:x="747935768" fg:w="15543647"/><text x="2.1329%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11,020,140 samples, 0.03%)</title><rect x="1.9496%" y="197" width="0.0277%" height="15" fill="rgb(208,67,9)" fg:x="774458976" fg:w="11020140"/><text x="2.1996%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7,305,031 samples, 0.02%)</title><rect x="1.9866%" y="181" width="0.0184%" height="15" fill="rgb(219,133,21)" fg:x="789135494" fg:w="7305031"/><text x="2.2366%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (29,299,427 samples, 0.07%)</title><rect x="1.9404%" y="277" width="0.0738%" height="15" fill="rgb(246,46,29)" fg:x="770794220" fg:w="29299427"/><text x="2.1904%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25,634,671 samples, 0.06%)</title><rect x="1.9496%" y="261" width="0.0645%" height="15" fill="rgb(246,185,52)" fg:x="774458976" fg:w="25634671"/><text x="2.1996%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (25,634,671 samples, 0.06%)</title><rect x="1.9496%" y="245" width="0.0645%" height="15" fill="rgb(252,136,11)" fg:x="774458976" fg:w="25634671"/><text x="2.1996%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (25,634,671 samples, 0.06%)</title><rect x="1.9496%" y="229" width="0.0645%" height="15" fill="rgb(219,138,53)" fg:x="774458976" fg:w="25634671"/><text x="2.1996%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (25,634,671 samples, 0.06%)</title><rect x="1.9496%" y="213" width="0.0645%" height="15" fill="rgb(211,51,23)" fg:x="774458976" fg:w="25634671"/><text x="2.1996%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (14,614,531 samples, 0.04%)</title><rect x="1.9774%" y="197" width="0.0368%" height="15" fill="rgb(247,221,28)" fg:x="785479116" fg:w="14614531"/><text x="2.2274%" y="207.50"></text></g><g><title>core::intrinsics::likely (7,329,917 samples, 0.02%)</title><rect x="2.0142%" y="229" width="0.0185%" height="15" fill="rgb(251,222,45)" fg:x="800093647" fg:w="7329917"/><text x="2.2642%" y="239.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (47,583,214 samples, 0.12%)</title><rect x="1.9312%" y="341" width="0.1198%" height="15" fill="rgb(217,162,53)" fg:x="767147738" fg:w="47583214"/><text x="2.1812%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (43,936,732 samples, 0.11%)</title><rect x="1.9404%" y="325" width="0.1106%" height="15" fill="rgb(229,93,14)" fg:x="770794220" fg:w="43936732"/><text x="2.1904%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (43,936,732 samples, 0.11%)</title><rect x="1.9404%" y="309" width="0.1106%" height="15" fill="rgb(209,67,49)" fg:x="770794220" fg:w="43936732"/><text x="2.1904%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (43,936,732 samples, 0.11%)</title><rect x="1.9404%" y="293" width="0.1106%" height="15" fill="rgb(213,87,29)" fg:x="770794220" fg:w="43936732"/><text x="2.1904%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (14,637,305 samples, 0.04%)</title><rect x="2.0142%" y="277" width="0.0368%" height="15" fill="rgb(205,151,52)" fg:x="800093647" fg:w="14637305"/><text x="2.2642%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (14,637,305 samples, 0.04%)</title><rect x="2.0142%" y="261" width="0.0368%" height="15" fill="rgb(253,215,39)" fg:x="800093647" fg:w="14637305"/><text x="2.2642%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (14,637,305 samples, 0.04%)</title><rect x="2.0142%" y="245" width="0.0368%" height="15" fill="rgb(221,220,41)" fg:x="800093647" fg:w="14637305"/><text x="2.2642%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (7,369,683 samples, 0.02%)</title><rect x="2.0604%" y="325" width="0.0186%" height="15" fill="rgb(218,133,21)" fg:x="818460679" fg:w="7369683"/><text x="2.3104%" y="335.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (7,369,683 samples, 0.02%)</title><rect x="2.0604%" y="309" width="0.0186%" height="15" fill="rgb(221,193,43)" fg:x="818460679" fg:w="7369683"/><text x="2.3104%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (7,369,683 samples, 0.02%)</title><rect x="2.0604%" y="293" width="0.0186%" height="15" fill="rgb(240,128,52)" fg:x="818460679" fg:w="7369683"/><text x="2.3104%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (7,369,683 samples, 0.02%)</title><rect x="2.0604%" y="277" width="0.0186%" height="15" fill="rgb(253,114,12)" fg:x="818460679" fg:w="7369683"/><text x="2.3104%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,369,683 samples, 0.02%)</title><rect x="2.0604%" y="261" width="0.0186%" height="15" fill="rgb(215,223,47)" fg:x="818460679" fg:w="7369683"/><text x="2.3104%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,369,683 samples, 0.02%)</title><rect x="2.0604%" y="245" width="0.0186%" height="15" fill="rgb(248,225,23)" fg:x="818460679" fg:w="7369683"/><text x="2.3104%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,369,683 samples, 0.02%)</title><rect x="2.0604%" y="229" width="0.0186%" height="15" fill="rgb(250,108,0)" fg:x="818460679" fg:w="7369683"/><text x="2.3104%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (7,369,683 samples, 0.02%)</title><rect x="2.0604%" y="213" width="0.0186%" height="15" fill="rgb(228,208,7)" fg:x="818460679" fg:w="7369683"/><text x="2.3104%" y="223.50"></text></g><g><title>cfree (7,369,683 samples, 0.02%)</title><rect x="2.0604%" y="197" width="0.0186%" height="15" fill="rgb(244,45,10)" fg:x="818460679" fg:w="7369683"/><text x="2.3104%" y="207.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (77,013,935 samples, 0.19%)</title><rect x="1.9220%" y="357" width="0.1939%" height="15" fill="rgb(207,125,25)" fg:x="763479415" fg:w="77013935"/><text x="2.1720%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (25,762,398 samples, 0.06%)</title><rect x="2.0510%" y="341" width="0.0649%" height="15" fill="rgb(210,195,18)" fg:x="814730952" fg:w="25762398"/><text x="2.3010%" y="351.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_greedy (11,549,250 samples, 0.03%)</title><rect x="2.1256%" y="357" width="0.0291%" height="15" fill="rgb(249,80,12)" fg:x="844372673" fg:w="11549250"/><text x="2.3756%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;img::png::deflate::lzss::hash::LzssHashTable&gt; (11,549,250 samples, 0.03%)</title><rect x="2.1256%" y="341" width="0.0291%" height="15" fill="rgb(221,65,9)" fg:x="844372673" fg:w="11549250"/><text x="2.3756%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;&gt;&gt; (11,549,250 samples, 0.03%)</title><rect x="2.1256%" y="325" width="0.0291%" height="15" fill="rgb(235,49,36)" fg:x="844372673" fg:w="11549250"/><text x="2.3756%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;,std::hash::random::RandomState&gt;&gt; (11,549,250 samples, 0.03%)</title><rect x="2.1256%" y="309" width="0.0291%" height="15" fill="rgb(225,32,20)" fg:x="844372673" fg:w="11549250"/><text x="2.3756%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;)&gt;&gt; (11,549,250 samples, 0.03%)</title><rect x="2.1256%" y="293" width="0.0291%" height="15" fill="rgb(215,141,46)" fg:x="844372673" fg:w="11549250"/><text x="2.3756%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,549,250 samples, 0.03%)</title><rect x="2.1256%" y="277" width="0.0291%" height="15" fill="rgb(250,160,47)" fg:x="844372673" fg:w="11549250"/><text x="2.3756%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (11,549,250 samples, 0.03%)</title><rect x="2.1256%" y="261" width="0.0291%" height="15" fill="rgb(216,222,40)" fg:x="844372673" fg:w="11549250"/><text x="2.3756%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (7,691,125 samples, 0.02%)</title><rect x="2.1353%" y="245" width="0.0194%" height="15" fill="rgb(234,217,39)" fg:x="848230798" fg:w="7691125"/><text x="2.3853%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,691,125 samples, 0.02%)</title><rect x="2.1353%" y="229" width="0.0194%" height="15" fill="rgb(207,178,40)" fg:x="848230798" fg:w="7691125"/><text x="2.3853%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (7,691,125 samples, 0.02%)</title><rect x="2.1353%" y="213" width="0.0194%" height="15" fill="rgb(221,136,13)" fg:x="848230798" fg:w="7691125"/><text x="2.3853%" y="223.50"></text></g><g><title>cfree (7,691,125 samples, 0.02%)</title><rect x="2.1353%" y="197" width="0.0194%" height="15" fill="rgb(249,199,10)" fg:x="848230798" fg:w="7691125"/><text x="2.3853%" y="207.50"></text></g><g><title>[libc.so.6] (7,691,125 samples, 0.02%)</title><rect x="2.1353%" y="181" width="0.0194%" height="15" fill="rgb(249,222,13)" fg:x="848230798" fg:w="7691125"/><text x="2.3853%" y="191.50"></text></g><g><title>[libc.so.6] (7,691,125 samples, 0.02%)</title><rect x="2.1353%" y="165" width="0.0194%" height="15" fill="rgb(244,185,38)" fg:x="848230798" fg:w="7691125"/><text x="2.3853%" y="175.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (7,762,621 samples, 0.02%)</title><rect x="2.1547%" y="357" width="0.0195%" height="15" fill="rgb(236,202,9)" fg:x="855921923" fg:w="7762621"/><text x="2.4047%" y="367.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (7,762,621 samples, 0.02%)</title><rect x="2.1547%" y="341" width="0.0195%" height="15" fill="rgb(250,229,37)" fg:x="855921923" fg:w="7762621"/><text x="2.4047%" y="351.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter_mut::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,993,700,332 samples, 5.02%)</title><rect x="4.8789%" y="341" width="5.0190%" height="15" fill="rgb(206,174,23)" fg:x="1938074946" fg:w="1993700332"/><text x="5.1289%" y="351.50">&lt;alloc..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (124,973,197 samples, 0.31%)</title><rect x="9.5833%" y="325" width="0.3146%" height="15" fill="rgb(211,33,43)" fg:x="3806802081" fg:w="124973197"/><text x="9.8333%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (124,973,197 samples, 0.31%)</title><rect x="9.5833%" y="309" width="0.3146%" height="15" fill="rgb(245,58,50)" fg:x="3806802081" fg:w="124973197"/><text x="9.8333%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (324,789,890 samples, 0.82%)</title><rect x="15.8954%" y="325" width="0.8176%" height="15" fill="rgb(244,68,36)" fg:x="6314177553" fg:w="324789890"/><text x="16.1454%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (324,789,890 samples, 0.82%)</title><rect x="15.8954%" y="309" width="0.8176%" height="15" fill="rgb(232,229,15)" fg:x="6314177553" fg:w="324789890"/><text x="16.1454%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (324,789,890 samples, 0.82%)</title><rect x="15.8954%" y="293" width="0.8176%" height="15" fill="rgb(254,30,23)" fg:x="6314177553" fg:w="324789890"/><text x="16.1454%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (324,789,890 samples, 0.82%)</title><rect x="15.8954%" y="277" width="0.8176%" height="15" fill="rgb(235,160,14)" fg:x="6314177553" fg:w="324789890"/><text x="16.1454%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,661,736,826 samples, 14.25%)</title><rect x="9.9077%" y="341" width="14.2529%" height="15" fill="rgb(212,155,44)" fg:x="3935692792" fg:w="5661736826"/><text x="10.1577%" y="351.50">alloc::vec::Vec&lt;T,A&gt;::..</text></g><g><title>core::ptr::write (2,958,462,175 samples, 7.45%)</title><rect x="16.7130%" y="325" width="7.4477%" height="15" fill="rgb(226,2,50)" fg:x="6638967443" fg:w="2958462175"/><text x="16.9630%" y="335.50">core::ptr:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (33,611,158 samples, 0.08%)</title><rect x="24.1606%" y="341" width="0.0846%" height="15" fill="rgb(234,177,6)" fg:x="9597429618" fg:w="33611158"/><text x="24.4106%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (33,611,158 samples, 0.08%)</title><rect x="24.1606%" y="325" width="0.0846%" height="15" fill="rgb(217,24,9)" fg:x="9597429618" fg:w="33611158"/><text x="24.4106%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29,851,207 samples, 0.08%)</title><rect x="24.1701%" y="309" width="0.0751%" height="15" fill="rgb(220,13,46)" fg:x="9601189569" fg:w="29851207"/><text x="24.4201%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (29,851,207 samples, 0.08%)</title><rect x="24.1701%" y="293" width="0.0751%" height="15" fill="rgb(239,221,27)" fg:x="9601189569" fg:w="29851207"/><text x="24.4201%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (29,851,207 samples, 0.08%)</title><rect x="24.1701%" y="277" width="0.0751%" height="15" fill="rgb(222,198,25)" fg:x="9601189569" fg:w="29851207"/><text x="24.4201%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29,851,207 samples, 0.08%)</title><rect x="24.1701%" y="261" width="0.0751%" height="15" fill="rgb(211,99,13)" fg:x="9601189569" fg:w="29851207"/><text x="24.4201%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29,851,207 samples, 0.08%)</title><rect x="24.1701%" y="245" width="0.0751%" height="15" fill="rgb(232,111,31)" fg:x="9601189569" fg:w="29851207"/><text x="24.4201%" y="255.50"></text></g><g><title>alloc::alloc::alloc (29,851,207 samples, 0.08%)</title><rect x="24.1701%" y="229" width="0.0751%" height="15" fill="rgb(245,82,37)" fg:x="9601189569" fg:w="29851207"/><text x="24.4201%" y="239.50"></text></g><g><title>malloc (29,851,207 samples, 0.08%)</title><rect x="24.1701%" y="213" width="0.0751%" height="15" fill="rgb(227,149,46)" fg:x="9601189569" fg:w="29851207"/><text x="24.4201%" y="223.50"></text></g><g><title>[libc.so.6] (29,851,207 samples, 0.08%)</title><rect x="24.1701%" y="197" width="0.0751%" height="15" fill="rgb(218,36,50)" fg:x="9601189569" fg:w="29851207"/><text x="24.4201%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2,398,967,179 samples, 6.04%)</title><rect x="24.2452%" y="341" width="6.0392%" height="15" fill="rgb(226,80,48)" fg:x="9631040776" fg:w="2398967179"/><text x="24.4952%" y="351.50">core::cm..</text></g><g><title>core::intrinsics::likely (7,617,555 samples, 0.02%)</title><rect x="30.2844%" y="245" width="0.0192%" height="15" fill="rgb(238,224,15)" fg:x="12030007955" fg:w="7617555"/><text x="30.5344%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (11,185,074,769 samples, 28.16%)</title><rect x="2.1742%" y="357" width="28.1574%" height="15" fill="rgb(241,136,10)" fg:x="863684544" fg:w="11185074769"/><text x="2.4242%" y="367.50">img::png::deflate::lzss::hash::LzssHashTable:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (18,751,358 samples, 0.05%)</title><rect x="30.2844%" y="341" width="0.0472%" height="15" fill="rgb(208,32,45)" fg:x="12030007955" fg:w="18751358"/><text x="30.5344%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (18,751,358 samples, 0.05%)</title><rect x="30.2844%" y="325" width="0.0472%" height="15" fill="rgb(207,135,9)" fg:x="12030007955" fg:w="18751358"/><text x="30.5344%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (18,751,358 samples, 0.05%)</title><rect x="30.2844%" y="309" width="0.0472%" height="15" fill="rgb(206,86,44)" fg:x="12030007955" fg:w="18751358"/><text x="30.5344%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (18,751,358 samples, 0.05%)</title><rect x="30.2844%" y="293" width="0.0472%" height="15" fill="rgb(245,177,15)" fg:x="12030007955" fg:w="18751358"/><text x="30.5344%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18,751,358 samples, 0.05%)</title><rect x="30.2844%" y="277" width="0.0472%" height="15" fill="rgb(206,64,50)" fg:x="12030007955" fg:w="18751358"/><text x="30.5344%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (18,751,358 samples, 0.05%)</title><rect x="30.2844%" y="261" width="0.0472%" height="15" fill="rgb(234,36,40)" fg:x="12030007955" fg:w="18751358"/><text x="30.5344%" y="271.50"></text></g><g><title>hashbrown::control::tag::Tag::full (7,305,315 samples, 0.02%)</title><rect x="30.3132%" y="245" width="0.0184%" height="15" fill="rgb(213,64,8)" fg:x="12041453998" fg:w="7305315"/><text x="30.5632%" y="255.50"></text></g><g><title>core::intrinsics::likely (7,437,562 samples, 0.02%)</title><rect x="30.3513%" y="245" width="0.0187%" height="15" fill="rgb(210,75,36)" fg:x="12056572526" fg:w="7437562"/><text x="30.6013%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (18,917,054 samples, 0.05%)</title><rect x="30.3316%" y="357" width="0.0476%" height="15" fill="rgb(229,88,21)" fg:x="12048759313" fg:w="18917054"/><text x="30.5816%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (11,103,841 samples, 0.03%)</title><rect x="30.3513%" y="341" width="0.0280%" height="15" fill="rgb(252,204,47)" fg:x="12056572526" fg:w="11103841"/><text x="30.6013%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (11,103,841 samples, 0.03%)</title><rect x="30.3513%" y="325" width="0.0280%" height="15" fill="rgb(208,77,27)" fg:x="12056572526" fg:w="11103841"/><text x="30.6013%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (11,103,841 samples, 0.03%)</title><rect x="30.3513%" y="309" width="0.0280%" height="15" fill="rgb(221,76,26)" fg:x="12056572526" fg:w="11103841"/><text x="30.6013%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (11,103,841 samples, 0.03%)</title><rect x="30.3513%" y="293" width="0.0280%" height="15" fill="rgb(225,139,18)" fg:x="12056572526" fg:w="11103841"/><text x="30.6013%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11,103,841 samples, 0.03%)</title><rect x="30.3513%" y="277" width="0.0280%" height="15" fill="rgb(230,137,11)" fg:x="12056572526" fg:w="11103841"/><text x="30.6013%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11,103,841 samples, 0.03%)</title><rect x="30.3513%" y="261" width="0.0280%" height="15" fill="rgb(212,28,1)" fg:x="12056572526" fg:w="11103841"/><text x="30.6013%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,528,673 samples, 0.02%)</title><rect x="30.3792%" y="293" width="0.0190%" height="15" fill="rgb(248,164,17)" fg:x="12067676367" fg:w="7528673"/><text x="30.6292%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,528,673 samples, 0.02%)</title><rect x="30.3792%" y="277" width="0.0190%" height="15" fill="rgb(222,171,42)" fg:x="12067676367" fg:w="7528673"/><text x="30.6292%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,528,673 samples, 0.02%)</title><rect x="30.3792%" y="261" width="0.0190%" height="15" fill="rgb(243,84,45)" fg:x="12067676367" fg:w="7528673"/><text x="30.6292%" y="271.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,528,673 samples, 0.02%)</title><rect x="30.3792%" y="245" width="0.0190%" height="15" fill="rgb(252,49,23)" fg:x="12067676367" fg:w="7528673"/><text x="30.6292%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,528,673 samples, 0.02%)</title><rect x="30.3792%" y="229" width="0.0190%" height="15" fill="rgb(215,19,7)" fg:x="12067676367" fg:w="7528673"/><text x="30.6292%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (15,238,406 samples, 0.04%)</title><rect x="30.3792%" y="357" width="0.0384%" height="15" fill="rgb(238,81,41)" fg:x="12067676367" fg:w="15238406"/><text x="30.6292%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (15,238,406 samples, 0.04%)</title><rect x="30.3792%" y="341" width="0.0384%" height="15" fill="rgb(210,199,37)" fg:x="12067676367" fg:w="15238406"/><text x="30.6292%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (15,238,406 samples, 0.04%)</title><rect x="30.3792%" y="325" width="0.0384%" height="15" fill="rgb(244,192,49)" fg:x="12067676367" fg:w="15238406"/><text x="30.6292%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (15,238,406 samples, 0.04%)</title><rect x="30.3792%" y="309" width="0.0384%" height="15" fill="rgb(226,211,11)" fg:x="12067676367" fg:w="15238406"/><text x="30.6292%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,709,733 samples, 0.02%)</title><rect x="30.3982%" y="293" width="0.0194%" height="15" fill="rgb(236,162,54)" fg:x="12075205040" fg:w="7709733"/><text x="30.6482%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,709,733 samples, 0.02%)</title><rect x="30.3982%" y="277" width="0.0194%" height="15" fill="rgb(220,229,9)" fg:x="12075205040" fg:w="7709733"/><text x="30.6482%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7,709,733 samples, 0.02%)</title><rect x="30.3982%" y="261" width="0.0194%" height="15" fill="rgb(250,87,22)" fg:x="12075205040" fg:w="7709733"/><text x="30.6482%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7,709,733 samples, 0.02%)</title><rect x="30.3982%" y="245" width="0.0194%" height="15" fill="rgb(239,43,17)" fg:x="12075205040" fg:w="7709733"/><text x="30.6482%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (7,709,733 samples, 0.02%)</title><rect x="30.3982%" y="229" width="0.0194%" height="15" fill="rgb(231,177,25)" fg:x="12075205040" fg:w="7709733"/><text x="30.6482%" y="239.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (7,709,733 samples, 0.02%)</title><rect x="30.3982%" y="213" width="0.0194%" height="15" fill="rgb(219,179,1)" fg:x="12075205040" fg:w="7709733"/><text x="30.6482%" y="223.50"></text></g><g><title>[unknown] (11,612,783,586 samples, 29.23%)</title><rect x="1.2024%" y="373" width="29.2341%" height="15" fill="rgb(238,219,53)" fg:x="477621597" fg:w="11612783586"/><text x="1.4524%" y="383.50">[unknown]</text></g><g><title>malloc (7,490,410 samples, 0.02%)</title><rect x="30.4176%" y="357" width="0.0189%" height="15" fill="rgb(232,167,36)" fg:x="12082914773" fg:w="7490410"/><text x="30.6676%" y="367.50"></text></g><g><title>__rustc::__rust_alloc (7,732,640 samples, 0.02%)</title><rect x="30.4475%" y="373" width="0.0195%" height="15" fill="rgb(244,19,51)" fg:x="12094771451" fg:w="7732640"/><text x="30.6975%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (82,235,279 samples, 0.21%)</title><rect x="30.4856%" y="357" width="0.2070%" height="15" fill="rgb(224,6,22)" fg:x="12109903012" fg:w="82235279"/><text x="30.7356%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (82,235,279 samples, 0.21%)</title><rect x="30.4856%" y="341" width="0.2070%" height="15" fill="rgb(224,145,5)" fg:x="12109903012" fg:w="82235279"/><text x="30.7356%" y="351.50"></text></g><g><title>alloc::alloc::realloc (82,235,279 samples, 0.21%)</title><rect x="30.4856%" y="325" width="0.2070%" height="15" fill="rgb(234,130,49)" fg:x="12109903012" fg:w="82235279"/><text x="30.7356%" y="335.50"></text></g><g><title>realloc (82,235,279 samples, 0.21%)</title><rect x="30.4856%" y="309" width="0.2070%" height="15" fill="rgb(254,6,2)" fg:x="12109903012" fg:w="82235279"/><text x="30.7356%" y="319.50"></text></g><g><title>[libc.so.6] (82,235,279 samples, 0.21%)</title><rect x="30.4856%" y="293" width="0.2070%" height="15" fill="rgb(208,96,46)" fg:x="12109903012" fg:w="82235279"/><text x="30.7356%" y="303.50"></text></g><g><title>[libc.so.6] (78,383,622 samples, 0.20%)</title><rect x="30.4952%" y="277" width="0.1973%" height="15" fill="rgb(239,3,39)" fg:x="12113754669" fg:w="78383622"/><text x="30.7452%" y="287.50"></text></g><g><title>[libc.so.6] (44,272,978 samples, 0.11%)</title><rect x="30.5811%" y="261" width="0.1115%" height="15" fill="rgb(233,210,1)" fg:x="12147865313" fg:w="44272978"/><text x="30.8311%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (86,176,544 samples, 0.22%)</title><rect x="30.4856%" y="373" width="0.2169%" height="15" fill="rgb(244,137,37)" fg:x="12109903012" fg:w="86176544"/><text x="30.7356%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (18,915,644 samples, 0.05%)</title><rect x="30.7118%" y="245" width="0.0476%" height="15" fill="rgb(240,136,2)" fg:x="12199770177" fg:w="18915644"/><text x="30.9618%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (18,915,644 samples, 0.05%)</title><rect x="30.7118%" y="229" width="0.0476%" height="15" fill="rgb(239,18,37)" fg:x="12199770177" fg:w="18915644"/><text x="30.9618%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (18,915,644 samples, 0.05%)</title><rect x="30.7118%" y="213" width="0.0476%" height="15" fill="rgb(218,185,22)" fg:x="12199770177" fg:w="18915644"/><text x="30.9618%" y="223.50"></text></g><g><title>cfree (30,131,020 samples, 0.08%)</title><rect x="30.7025%" y="373" width="0.0759%" height="15" fill="rgb(225,218,4)" fg:x="12196079556" fg:w="30131020"/><text x="30.9525%" y="383.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (26,440,399 samples, 0.07%)</title><rect x="30.7118%" y="357" width="0.0666%" height="15" fill="rgb(230,182,32)" fg:x="12199770177" fg:w="26440399"/><text x="30.9618%" y="367.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (26,440,399 samples, 0.07%)</title><rect x="30.7118%" y="341" width="0.0666%" height="15" fill="rgb(242,56,43)" fg:x="12199770177" fg:w="26440399"/><text x="30.9618%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (26,440,399 samples, 0.07%)</title><rect x="30.7118%" y="325" width="0.0666%" height="15" fill="rgb(233,99,24)" fg:x="12199770177" fg:w="26440399"/><text x="30.9618%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26,440,399 samples, 0.07%)</title><rect x="30.7118%" y="309" width="0.0666%" height="15" fill="rgb(234,209,42)" fg:x="12199770177" fg:w="26440399"/><text x="30.9618%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26,440,399 samples, 0.07%)</title><rect x="30.7118%" y="293" width="0.0666%" height="15" fill="rgb(227,7,12)" fg:x="12199770177" fg:w="26440399"/><text x="30.9618%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26,440,399 samples, 0.07%)</title><rect x="30.7118%" y="277" width="0.0666%" height="15" fill="rgb(245,203,43)" fg:x="12199770177" fg:w="26440399"/><text x="30.9618%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26,440,399 samples, 0.07%)</title><rect x="30.7118%" y="261" width="0.0666%" height="15" fill="rgb(238,205,33)" fg:x="12199770177" fg:w="26440399"/><text x="30.9618%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,524,755 samples, 0.02%)</title><rect x="30.7594%" y="245" width="0.0189%" height="15" fill="rgb(231,56,7)" fg:x="12218685821" fg:w="7524755"/><text x="31.0094%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,524,755 samples, 0.02%)</title><rect x="30.7594%" y="229" width="0.0189%" height="15" fill="rgb(244,186,29)" fg:x="12218685821" fg:w="7524755"/><text x="31.0094%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11,446,028 samples, 0.03%)</title><rect x="30.7783%" y="357" width="0.0288%" height="15" fill="rgb(234,111,31)" fg:x="12226210576" fg:w="11446028"/><text x="31.0283%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11,446,028 samples, 0.03%)</title><rect x="30.7783%" y="341" width="0.0288%" height="15" fill="rgb(241,149,10)" fg:x="12226210576" fg:w="11446028"/><text x="31.0283%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11,446,028 samples, 0.03%)</title><rect x="30.7783%" y="325" width="0.0288%" height="15" fill="rgb(249,206,44)" fg:x="12226210576" fg:w="11446028"/><text x="31.0283%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11,446,028 samples, 0.03%)</title><rect x="30.7783%" y="309" width="0.0288%" height="15" fill="rgb(251,153,30)" fg:x="12226210576" fg:w="11446028"/><text x="31.0283%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7,726,817 samples, 0.02%)</title><rect x="30.7877%" y="293" width="0.0195%" height="15" fill="rgb(239,152,38)" fg:x="12229929787" fg:w="7726817"/><text x="31.0377%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15,102,081 samples, 0.04%)</title><rect x="30.7783%" y="373" width="0.0380%" height="15" fill="rgb(249,139,47)" fg:x="12226210576" fg:w="15102081"/><text x="31.0283%" y="383.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (7,518,004 samples, 0.02%)</title><rect x="30.8354%" y="293" width="0.0189%" height="15" fill="rgb(244,64,35)" fg:x="12248895214" fg:w="7518004"/><text x="31.0854%" y="303.50"></text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (7,518,004 samples, 0.02%)</title><rect x="30.8354%" y="277" width="0.0189%" height="15" fill="rgb(216,46,15)" fg:x="12248895214" fg:w="7518004"/><text x="31.0854%" y="287.50"></text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (7,518,004 samples, 0.02%)</title><rect x="30.8354%" y="261" width="0.0189%" height="15" fill="rgb(250,74,19)" fg:x="12248895214" fg:w="7518004"/><text x="31.0854%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (22,676,035 samples, 0.06%)</title><rect x="30.8164%" y="373" width="0.0571%" height="15" fill="rgb(249,42,33)" fg:x="12241312657" fg:w="22676035"/><text x="31.0664%" y="383.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (22,676,035 samples, 0.06%)</title><rect x="30.8164%" y="357" width="0.0571%" height="15" fill="rgb(242,149,17)" fg:x="12241312657" fg:w="22676035"/><text x="31.0664%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (22,676,035 samples, 0.06%)</title><rect x="30.8164%" y="341" width="0.0571%" height="15" fill="rgb(244,29,21)" fg:x="12241312657" fg:w="22676035"/><text x="31.0664%" y="351.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (18,933,000 samples, 0.05%)</title><rect x="30.8258%" y="325" width="0.0477%" height="15" fill="rgb(220,130,37)" fg:x="12245055692" fg:w="18933000"/><text x="31.0758%" y="335.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (18,933,000 samples, 0.05%)</title><rect x="30.8258%" y="309" width="0.0477%" height="15" fill="rgb(211,67,2)" fg:x="12245055692" fg:w="18933000"/><text x="31.0758%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7,573,545 samples, 0.02%)</title><rect x="30.8827%" y="373" width="0.0191%" height="15" fill="rgb(235,68,52)" fg:x="12267682940" fg:w="7573545"/><text x="31.1327%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (7,374,064 samples, 0.02%)</title><rect x="30.9115%" y="325" width="0.0186%" height="15" fill="rgb(246,142,3)" fg:x="12279110918" fg:w="7374064"/><text x="31.1615%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (7,374,064 samples, 0.02%)</title><rect x="30.9115%" y="309" width="0.0186%" height="15" fill="rgb(241,25,7)" fg:x="12279110918" fg:w="7374064"/><text x="31.1615%" y="319.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (11,208,353 samples, 0.03%)</title><rect x="30.9115%" y="357" width="0.0282%" height="15" fill="rgb(242,119,39)" fg:x="12279110918" fg:w="11208353"/><text x="31.1615%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (11,208,353 samples, 0.03%)</title><rect x="30.9115%" y="341" width="0.0282%" height="15" fill="rgb(241,98,45)" fg:x="12279110918" fg:w="11208353"/><text x="31.1615%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (34,066,922 samples, 0.09%)</title><rect x="30.9115%" y="373" width="0.0858%" height="15" fill="rgb(254,28,30)" fg:x="12279110918" fg:w="34066922"/><text x="31.1615%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (22,858,569 samples, 0.06%)</title><rect x="30.9397%" y="357" width="0.0575%" height="15" fill="rgb(241,142,54)" fg:x="12290319271" fg:w="22858569"/><text x="31.1897%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5,954,941 samples, 0.01%)</title><rect x="30.9973%" y="325" width="0.0150%" height="15" fill="rgb(222,85,15)" fg:x="12313177840" fg:w="5954941"/><text x="31.2473%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (9,803,112 samples, 0.02%)</title><rect x="30.9973%" y="357" width="0.0247%" height="15" fill="rgb(210,85,47)" fg:x="12313177840" fg:w="9803112"/><text x="31.2473%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (9,803,112 samples, 0.02%)</title><rect x="30.9973%" y="341" width="0.0247%" height="15" fill="rgb(224,206,25)" fg:x="12313177840" fg:w="9803112"/><text x="31.2473%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13,671,918 samples, 0.03%)</title><rect x="30.9973%" y="373" width="0.0344%" height="15" fill="rgb(243,201,19)" fg:x="12313177840" fg:w="13671918"/><text x="31.2473%" y="383.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (7,351,857 samples, 0.02%)</title><rect x="31.0317%" y="357" width="0.0185%" height="15" fill="rgb(236,59,4)" fg:x="12326849758" fg:w="7351857"/><text x="31.2817%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (7,351,857 samples, 0.02%)</title><rect x="31.0317%" y="341" width="0.0185%" height="15" fill="rgb(254,179,45)" fg:x="12326849758" fg:w="7351857"/><text x="31.2817%" y="351.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::flush_buffer (7,351,857 samples, 0.02%)</title><rect x="31.0317%" y="325" width="0.0185%" height="15" fill="rgb(226,14,10)" fg:x="12326849758" fg:w="7351857"/><text x="31.2817%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (14,647,380 samples, 0.04%)</title><rect x="31.0317%" y="373" width="0.0369%" height="15" fill="rgb(244,27,41)" fg:x="12326849758" fg:w="14647380"/><text x="31.2817%" y="383.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl_from_middle (7,295,523 samples, 0.02%)</title><rect x="31.0502%" y="357" width="0.0184%" height="15" fill="rgb(235,35,32)" fg:x="12334201615" fg:w="7295523"/><text x="31.3002%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (7,295,523 samples, 0.02%)</title><rect x="31.0502%" y="341" width="0.0184%" height="15" fill="rgb(218,68,31)" fg:x="12334201615" fg:w="7295523"/><text x="31.3002%" y="351.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (7,295,523 samples, 0.02%)</title><rect x="31.0502%" y="325" width="0.0184%" height="15" fill="rgb(207,120,37)" fg:x="12334201615" fg:w="7295523"/><text x="31.3002%" y="335.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (7,717,968 samples, 0.02%)</title><rect x="31.0782%" y="357" width="0.0194%" height="15" fill="rgb(227,98,0)" fg:x="12345310650" fg:w="7717968"/><text x="31.3282%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (7,717,968 samples, 0.02%)</title><rect x="31.0782%" y="341" width="0.0194%" height="15" fill="rgb(207,7,3)" fg:x="12345310650" fg:w="7717968"/><text x="31.3282%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (7,717,968 samples, 0.02%)</title><rect x="31.0782%" y="325" width="0.0194%" height="15" fill="rgb(206,98,19)" fg:x="12345310650" fg:w="7717968"/><text x="31.3282%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (7,717,968 samples, 0.02%)</title><rect x="31.0782%" y="309" width="0.0194%" height="15" fill="rgb(217,5,26)" fg:x="12345310650" fg:w="7717968"/><text x="31.3282%" y="319.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (7,739,118 samples, 0.02%)</title><rect x="31.0976%" y="341" width="0.0195%" height="15" fill="rgb(235,190,38)" fg:x="12353028618" fg:w="7739118"/><text x="31.3476%" y="351.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (7,739,118 samples, 0.02%)</title><rect x="31.0976%" y="325" width="0.0195%" height="15" fill="rgb(247,86,24)" fg:x="12353028618" fg:w="7739118"/><text x="31.3476%" y="335.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (37,179,999 samples, 0.09%)</title><rect x="31.0686%" y="373" width="0.0936%" height="15" fill="rgb(205,101,16)" fg:x="12341497138" fg:w="37179999"/><text x="31.3186%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (25,648,519 samples, 0.06%)</title><rect x="31.0976%" y="357" width="0.0646%" height="15" fill="rgb(246,168,33)" fg:x="12353028618" fg:w="25648519"/><text x="31.3476%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (11,556,500 samples, 0.03%)</title><rect x="31.1331%" y="341" width="0.0291%" height="15" fill="rgb(231,114,1)" fg:x="12367120637" fg:w="11556500"/><text x="31.3831%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (7,713,130 samples, 0.02%)</title><rect x="31.1427%" y="325" width="0.0194%" height="15" fill="rgb(207,184,53)" fg:x="12370964007" fg:w="7713130"/><text x="31.3927%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,713,130 samples, 0.02%)</title><rect x="31.1427%" y="309" width="0.0194%" height="15" fill="rgb(224,95,51)" fg:x="12370964007" fg:w="7713130"/><text x="31.3927%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,713,130 samples, 0.02%)</title><rect x="31.1427%" y="293" width="0.0194%" height="15" fill="rgb(212,188,45)" fg:x="12370964007" fg:w="7713130"/><text x="31.3927%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,713,130 samples, 0.02%)</title><rect x="31.1427%" y="277" width="0.0194%" height="15" fill="rgb(223,154,38)" fg:x="12370964007" fg:w="7713130"/><text x="31.3927%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (7,713,130 samples, 0.02%)</title><rect x="31.1427%" y="261" width="0.0194%" height="15" fill="rgb(251,22,52)" fg:x="12370964007" fg:w="7713130"/><text x="31.3927%" y="271.50"></text></g><g><title>cfree (7,713,130 samples, 0.02%)</title><rect x="31.1427%" y="245" width="0.0194%" height="15" fill="rgb(229,209,22)" fg:x="12370964007" fg:w="7713130"/><text x="31.3927%" y="255.50"></text></g><g><title>[libc.so.6] (7,713,130 samples, 0.02%)</title><rect x="31.1427%" y="229" width="0.0194%" height="15" fill="rgb(234,138,34)" fg:x="12370964007" fg:w="7713130"/><text x="31.3927%" y="239.50"></text></g><g><title>[libc.so.6] (7,713,130 samples, 0.02%)</title><rect x="31.1427%" y="213" width="0.0194%" height="15" fill="rgb(212,95,11)" fg:x="12370964007" fg:w="7713130"/><text x="31.3927%" y="223.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (11,120,822 samples, 0.03%)</title><rect x="31.1714%" y="373" width="0.0280%" height="15" fill="rgb(240,179,47)" fg:x="12382328417" fg:w="11120822"/><text x="31.4214%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="357" width="0.0177%" height="15" fill="rgb(240,163,11)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="341" width="0.0177%" height="15" fill="rgb(236,37,12)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="325" width="0.0177%" height="15" fill="rgb(232,164,16)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="309" width="0.0177%" height="15" fill="rgb(244,205,15)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="293" width="0.0177%" height="15" fill="rgb(223,117,47)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="277" width="0.0177%" height="15" fill="rgb(244,107,35)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="261" width="0.0177%" height="15" fill="rgb(205,140,8)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="271.50"></text></g><g><title>alloc::alloc::alloc (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="245" width="0.0177%" height="15" fill="rgb(228,84,46)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="255.50"></text></g><g><title>malloc (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="229" width="0.0177%" height="15" fill="rgb(254,188,9)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="239.50"></text></g><g><title>[libc.so.6] (7,016,444 samples, 0.02%)</title><rect x="31.1994%" y="213" width="0.0177%" height="15" fill="rgb(206,112,54)" fg:x="12393449239" fg:w="7016444"/><text x="31.4494%" y="223.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_greedy (14,789,329 samples, 0.04%)</title><rect x="31.1994%" y="373" width="0.0372%" height="15" fill="rgb(216,84,49)" fg:x="12393449239" fg:w="14789329"/><text x="31.4494%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,474,866,287 samples, 3.71%)</title><rect x="50.8781%" y="325" width="3.7128%" height="15" fill="rgb(214,194,35)" fg:x="20210538485" fg:w="1474866287"/><text x="51.1281%" y="335.50">&lt;cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,733,080,576 samples, 4.36%)</title><rect x="50.5625%" y="341" width="4.3629%" height="15" fill="rgb(249,28,3)" fg:x="20085156201" fg:w="1733080576"/><text x="50.8125%" y="351.50">&lt;allo..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (132,832,005 samples, 0.33%)</title><rect x="54.5910%" y="325" width="0.3344%" height="15" fill="rgb(222,56,52)" fg:x="21685404772" fg:w="132832005"/><text x="54.8410%" y="335.50"></text></g><g><title>core::ptr::read (132,832,005 samples, 0.33%)</title><rect x="54.5910%" y="309" width="0.3344%" height="15" fill="rgb(245,217,50)" fg:x="21685404772" fg:w="132832005"/><text x="54.8410%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,928,738,168 samples, 4.86%)</title><rect x="54.9346%" y="341" width="4.8554%" height="15" fill="rgb(213,201,24)" fg:x="21821898970" fg:w="1928738168"/><text x="55.1846%" y="351.50">core::..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,240,987,530 samples, 5.64%)</title><rect x="59.7900%" y="341" width="5.6415%" height="15" fill="rgb(248,116,28)" fg:x="23750637138" fg:w="2240987530"/><text x="60.0400%" y="351.50">core::o..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (2,240,987,530 samples, 5.64%)</title><rect x="59.7900%" y="325" width="5.6415%" height="15" fill="rgb(219,72,43)" fg:x="23750637138" fg:w="2240987530"/><text x="60.0400%" y="335.50">img::pn..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (707,967,538 samples, 1.78%)</title><rect x="63.6492%" y="309" width="1.7822%" height="15" fill="rgb(209,138,14)" fg:x="25283657130" fg:w="707967538"/><text x="63.8992%" y="319.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (707,967,538 samples, 1.78%)</title><rect x="63.6492%" y="293" width="1.7822%" height="15" fill="rgb(222,18,33)" fg:x="25283657130" fg:w="707967538"/><text x="63.8992%" y="303.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (707,967,538 samples, 1.78%)</title><rect x="63.6492%" y="277" width="1.7822%" height="15" fill="rgb(213,199,7)" fg:x="25283657130" fg:w="707967538"/><text x="63.8992%" y="287.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u16,u16)&gt;&gt; (30,172,313 samples, 0.08%)</title><rect x="65.4315%" y="341" width="0.0760%" height="15" fill="rgb(250,110,10)" fg:x="25991624668" fg:w="30172313"/><text x="65.6815%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30,172,313 samples, 0.08%)</title><rect x="65.4315%" y="325" width="0.0760%" height="15" fill="rgb(248,123,6)" fg:x="25991624668" fg:w="30172313"/><text x="65.6815%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u16,u16),alloc::alloc::Global&gt;&gt; (30,172,313 samples, 0.08%)</title><rect x="65.4315%" y="309" width="0.0760%" height="15" fill="rgb(206,91,31)" fg:x="25991624668" fg:w="30172313"/><text x="65.6815%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30,172,313 samples, 0.08%)</title><rect x="65.4315%" y="293" width="0.0760%" height="15" fill="rgb(211,154,13)" fg:x="25991624668" fg:w="30172313"/><text x="65.6815%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u16,u16)&gt;&gt; (30,172,313 samples, 0.08%)</title><rect x="65.4315%" y="277" width="0.0760%" height="15" fill="rgb(225,148,7)" fg:x="25991624668" fg:w="30172313"/><text x="65.6815%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30,172,313 samples, 0.08%)</title><rect x="65.4315%" y="261" width="0.0760%" height="15" fill="rgb(220,160,43)" fg:x="25991624668" fg:w="30172313"/><text x="65.6815%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (30,172,313 samples, 0.08%)</title><rect x="65.4315%" y="245" width="0.0760%" height="15" fill="rgb(213,52,39)" fg:x="25991624668" fg:w="30172313"/><text x="65.6815%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30,172,313 samples, 0.08%)</title><rect x="65.4315%" y="229" width="0.0760%" height="15" fill="rgb(243,137,7)" fg:x="25991624668" fg:w="30172313"/><text x="65.6815%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (30,172,313 samples, 0.08%)</title><rect x="65.4315%" y="213" width="0.0760%" height="15" fill="rgb(230,79,13)" fg:x="25991624668" fg:w="30172313"/><text x="65.6815%" y="223.50"></text></g><g><title>cfree (26,425,625 samples, 0.07%)</title><rect x="65.4409%" y="197" width="0.0665%" height="15" fill="rgb(247,105,23)" fg:x="25995371356" fg:w="26425625"/><text x="65.6909%" y="207.50"></text></g><g><title>[libc.so.6] (11,505,990 samples, 0.03%)</title><rect x="65.4785%" y="181" width="0.0290%" height="15" fill="rgb(223,179,41)" fg:x="26010290991" fg:w="11505990"/><text x="65.7285%" y="191.50"></text></g><g><title>[libc.so.6] (11,505,990 samples, 0.03%)</title><rect x="65.4785%" y="165" width="0.0290%" height="15" fill="rgb(218,9,34)" fg:x="26010290991" fg:w="11505990"/><text x="65.7285%" y="175.50"></text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (2,816,408,661 samples, 7.09%)</title><rect x="65.5074%" y="341" width="7.0900%" height="15" fill="rgb(222,106,8)" fg:x="26021796981" fg:w="2816408661"/><text x="65.7574%" y="351.50">img::png::..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (11,715,350 samples, 0.03%)</title><rect x="72.6069%" y="245" width="0.0295%" height="15" fill="rgb(211,220,0)" fg:x="28841945414" fg:w="11715350"/><text x="72.8569%" y="255.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (16,460,761,976 samples, 41.44%)</title><rect x="31.2366%" y="373" width="41.4384%" height="15" fill="rgb(229,52,16)" fg:x="12408238568" fg:w="16460761976"/><text x="31.4866%" y="383.50">img::png::deflate::lzss::encode_lzss_optimized</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (16,460,761,976 samples, 41.44%)</title><rect x="31.2366%" y="357" width="41.4384%" height="15" fill="rgb(212,155,18)" fg:x="12408238568" fg:w="16460761976"/><text x="31.4866%" y="367.50">img::png::deflate::lzss::encode_lzss_iteration</text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (30,794,902 samples, 0.08%)</title><rect x="72.5975%" y="341" width="0.0775%" height="15" fill="rgb(242,21,14)" fg:x="28838205642" fg:w="30794902"/><text x="72.8475%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (27,055,130 samples, 0.07%)</title><rect x="72.6069%" y="325" width="0.0681%" height="15" fill="rgb(222,19,48)" fg:x="28841945414" fg:w="27055130"/><text x="72.8569%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,055,130 samples, 0.07%)</title><rect x="72.6069%" y="309" width="0.0681%" height="15" fill="rgb(232,45,27)" fg:x="28841945414" fg:w="27055130"/><text x="72.8569%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27,055,130 samples, 0.07%)</title><rect x="72.6069%" y="293" width="0.0681%" height="15" fill="rgb(249,103,42)" fg:x="28841945414" fg:w="27055130"/><text x="72.8569%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27,055,130 samples, 0.07%)</title><rect x="72.6069%" y="277" width="0.0681%" height="15" fill="rgb(246,81,33)" fg:x="28841945414" fg:w="27055130"/><text x="72.8569%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (27,055,130 samples, 0.07%)</title><rect x="72.6069%" y="261" width="0.0681%" height="15" fill="rgb(252,33,42)" fg:x="28841945414" fg:w="27055130"/><text x="72.8569%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,339,780 samples, 0.04%)</title><rect x="72.6364%" y="245" width="0.0386%" height="15" fill="rgb(209,212,41)" fg:x="28853660764" fg:w="15339780"/><text x="72.8864%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15,339,780 samples, 0.04%)</title><rect x="72.6364%" y="229" width="0.0386%" height="15" fill="rgb(207,154,6)" fg:x="28853660764" fg:w="15339780"/><text x="72.8864%" y="239.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (7,280,121 samples, 0.02%)</title><rect x="72.7023%" y="357" width="0.0183%" height="15" fill="rgb(223,64,47)" fg:x="28879859397" fg:w="7280121"/><text x="72.9523%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (14,627,691 samples, 0.04%)</title><rect x="72.7299%" y="309" width="0.0368%" height="15" fill="rgb(211,161,38)" fg:x="28890808655" fg:w="14627691"/><text x="72.9799%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14,627,691 samples, 0.04%)</title><rect x="72.7299%" y="293" width="0.0368%" height="15" fill="rgb(219,138,40)" fg:x="28890808655" fg:w="14627691"/><text x="72.9799%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14,627,691 samples, 0.04%)</title><rect x="72.7299%" y="277" width="0.0368%" height="15" fill="rgb(241,228,46)" fg:x="28890808655" fg:w="14627691"/><text x="72.9799%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14,627,691 samples, 0.04%)</title><rect x="72.7299%" y="261" width="0.0368%" height="15" fill="rgb(223,209,38)" fg:x="28890808655" fg:w="14627691"/><text x="72.9799%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14,627,691 samples, 0.04%)</title><rect x="72.7299%" y="245" width="0.0368%" height="15" fill="rgb(236,164,45)" fg:x="28890808655" fg:w="14627691"/><text x="72.9799%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7,312,526 samples, 0.02%)</title><rect x="72.7483%" y="229" width="0.0184%" height="15" fill="rgb(231,15,5)" fg:x="28898123820" fg:w="7312526"/><text x="72.9983%" y="239.50"></text></g><g><title>core::intrinsics::likely (18,693,227 samples, 0.05%)</title><rect x="72.7760%" y="261" width="0.0471%" height="15" fill="rgb(252,35,15)" fg:x="28909111406" fg:w="18693227"/><text x="73.0260%" y="271.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (69,778,328 samples, 0.18%)</title><rect x="72.6750%" y="373" width="0.1757%" height="15" fill="rgb(248,181,18)" fg:x="28869000544" fg:w="69778328"/><text x="72.9250%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (51,639,354 samples, 0.13%)</title><rect x="72.7207%" y="357" width="0.1300%" height="15" fill="rgb(233,39,42)" fg:x="28887139518" fg:w="51639354"/><text x="72.9707%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (51,639,354 samples, 0.13%)</title><rect x="72.7207%" y="341" width="0.1300%" height="15" fill="rgb(238,110,33)" fg:x="28887139518" fg:w="51639354"/><text x="72.9707%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (47,970,217 samples, 0.12%)</title><rect x="72.7299%" y="325" width="0.1208%" height="15" fill="rgb(233,195,10)" fg:x="28890808655" fg:w="47970217"/><text x="72.9799%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (33,342,526 samples, 0.08%)</title><rect x="72.7667%" y="309" width="0.0839%" height="15" fill="rgb(254,105,3)" fg:x="28905436346" fg:w="33342526"/><text x="73.0167%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (33,342,526 samples, 0.08%)</title><rect x="72.7667%" y="293" width="0.0839%" height="15" fill="rgb(221,225,9)" fg:x="28905436346" fg:w="33342526"/><text x="73.0167%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (33,342,526 samples, 0.08%)</title><rect x="72.7667%" y="277" width="0.0839%" height="15" fill="rgb(224,227,45)" fg:x="28905436346" fg:w="33342526"/><text x="73.0167%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (10,974,239 samples, 0.03%)</title><rect x="72.8230%" y="261" width="0.0276%" height="15" fill="rgb(229,198,43)" fg:x="28927804633" fg:w="10974239"/><text x="73.0730%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10,974,239 samples, 0.03%)</title><rect x="72.8230%" y="245" width="0.0276%" height="15" fill="rgb(206,209,35)" fg:x="28927804633" fg:w="10974239"/><text x="73.0730%" y="255.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter_mut::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (119,226,679 samples, 0.30%)</title><rect x="88.3750%" y="357" width="0.3001%" height="15" fill="rgb(245,195,53)" fg:x="35105573458" fg:w="119226679"/><text x="88.6250%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,322,421 samples, 0.02%)</title><rect x="88.6567%" y="341" width="0.0184%" height="15" fill="rgb(240,92,26)" fg:x="35217477716" fg:w="7322421"/><text x="88.9067%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,322,421 samples, 0.02%)</title><rect x="88.6567%" y="325" width="0.0184%" height="15" fill="rgb(207,40,23)" fg:x="35217477716" fg:w="7322421"/><text x="88.9067%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (19,367,333 samples, 0.05%)</title><rect x="90.0240%" y="341" width="0.0488%" height="15" fill="rgb(223,111,35)" fg:x="35760622967" fg:w="19367333"/><text x="90.2740%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (19,367,333 samples, 0.05%)</title><rect x="90.0240%" y="325" width="0.0488%" height="15" fill="rgb(229,147,28)" fg:x="35760622967" fg:w="19367333"/><text x="90.2740%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (19,367,333 samples, 0.05%)</title><rect x="90.0240%" y="309" width="0.0488%" height="15" fill="rgb(211,29,28)" fg:x="35760622967" fg:w="19367333"/><text x="90.2740%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (19,367,333 samples, 0.05%)</title><rect x="90.0240%" y="293" width="0.0488%" height="15" fill="rgb(228,72,33)" fg:x="35760622967" fg:w="19367333"/><text x="90.2740%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (769,506,938 samples, 1.94%)</title><rect x="88.6751%" y="357" width="1.9372%" height="15" fill="rgb(205,214,31)" fg:x="35224800137" fg:w="769506938"/><text x="88.9251%" y="367.50">a..</text></g><g><title>core::ptr::write (214,316,775 samples, 0.54%)</title><rect x="90.0728%" y="341" width="0.5395%" height="15" fill="rgb(224,111,15)" fg:x="35779990300" fg:w="214316775"/><text x="90.3228%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1,115,377,266 samples, 2.81%)</title><rect x="90.6123%" y="357" width="2.8079%" height="15" fill="rgb(253,21,26)" fg:x="35994307075" fg:w="1115377266"/><text x="90.8623%" y="367.50">co..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (295,788,487 samples, 0.74%)</title><rect x="93.4202%" y="325" width="0.7446%" height="15" fill="rgb(245,139,43)" fg:x="37109684341" fg:w="295788487"/><text x="93.6702%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (772,361,770 samples, 1.94%)</title><rect x="93.4202%" y="357" width="1.9443%" height="15" fill="rgb(252,170,7)" fg:x="37109684341" fg:w="772361770"/><text x="93.6702%" y="367.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (772,361,770 samples, 1.94%)</title><rect x="93.4202%" y="341" width="1.9443%" height="15" fill="rgb(231,118,14)" fg:x="37109684341" fg:w="772361770"/><text x="93.6702%" y="351.50">&lt;..</text></g><g><title>core::slice::index::get_offset_len_noubcheck (476,573,283 samples, 1.20%)</title><rect x="94.1648%" y="325" width="1.1997%" height="15" fill="rgb(238,83,0)" fg:x="37405472828" fg:w="476573283"/><text x="94.4148%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (7,407,124 samples, 0.02%)</title><rect x="95.3645%" y="357" width="0.0186%" height="15" fill="rgb(221,39,39)" fg:x="37882046111" fg:w="7407124"/><text x="95.6145%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (7,407,124 samples, 0.02%)</title><rect x="95.3645%" y="341" width="0.0186%" height="15" fill="rgb(222,119,46)" fg:x="37882046111" fg:w="7407124"/><text x="95.6145%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,407,124 samples, 0.02%)</title><rect x="95.3645%" y="325" width="0.0186%" height="15" fill="rgb(222,165,49)" fg:x="37882046111" fg:w="7407124"/><text x="95.6145%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7,407,124 samples, 0.02%)</title><rect x="95.3645%" y="309" width="0.0186%" height="15" fill="rgb(219,113,52)" fg:x="37882046111" fg:w="7407124"/><text x="95.6145%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7,407,124 samples, 0.02%)</title><rect x="95.3645%" y="293" width="0.0186%" height="15" fill="rgb(214,7,15)" fg:x="37882046111" fg:w="7407124"/><text x="95.6145%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7,407,124 samples, 0.02%)</title><rect x="95.3645%" y="277" width="0.0186%" height="15" fill="rgb(235,32,4)" fg:x="37882046111" fg:w="7407124"/><text x="95.6145%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (7,407,124 samples, 0.02%)</title><rect x="95.3645%" y="261" width="0.0186%" height="15" fill="rgb(238,90,54)" fg:x="37882046111" fg:w="7407124"/><text x="95.6145%" y="271.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (99,094,502 samples, 0.25%)</title><rect x="96.9898%" y="341" width="0.2495%" height="15" fill="rgb(213,208,19)" fg:x="38527681095" fg:w="99094502"/><text x="97.2398%" y="351.50"></text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (99,094,502 samples, 0.25%)</title><rect x="96.9898%" y="325" width="0.2495%" height="15" fill="rgb(233,156,4)" fg:x="38527681095" fg:w="99094502"/><text x="97.2398%" y="335.50"></text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (99,094,502 samples, 0.25%)</title><rect x="96.9898%" y="309" width="0.2495%" height="15" fill="rgb(207,194,5)" fg:x="38527681095" fg:w="99094502"/><text x="97.2398%" y="319.50"></text></g><g><title>core::cmp::Ord::min (325,196,199 samples, 0.82%)</title><rect x="97.2393%" y="341" width="0.8187%" height="15" fill="rgb(206,111,30)" fg:x="38626775597" fg:w="325196199"/><text x="97.4893%" y="351.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::from_slice (79,186,560 samples, 0.20%)</title><rect x="98.0580%" y="341" width="0.1993%" height="15" fill="rgb(243,70,54)" fg:x="38951971796" fg:w="79186560"/><text x="98.3080%" y="351.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::load (79,186,560 samples, 0.20%)</title><rect x="98.0580%" y="325" width="0.1993%" height="15" fill="rgb(242,28,8)" fg:x="38951971796" fg:w="79186560"/><text x="98.3080%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (79,186,560 samples, 0.20%)</title><rect x="98.0580%" y="309" width="0.1993%" height="15" fill="rgb(219,106,18)" fg:x="38951971796" fg:w="79186560"/><text x="98.3080%" y="319.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (1,807,325,183 samples, 4.55%)</title><rect x="95.3832%" y="357" width="4.5498%" height="15" fill="rgb(244,222,10)" fg:x="37889453235" fg:w="1807325183"/><text x="95.6332%" y="367.50">img::..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (665,620,062 samples, 1.68%)</title><rect x="98.2573%" y="341" width="1.6756%" height="15" fill="rgb(236,179,52)" fg:x="39031158356" fg:w="665620062"/><text x="98.5073%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (665,620,062 samples, 1.68%)</title><rect x="98.2573%" y="325" width="1.6756%" height="15" fill="rgb(213,23,39)" fg:x="39031158356" fg:w="665620062"/><text x="98.5073%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (60,793,988 samples, 0.15%)</title><rect x="99.7799%" y="309" width="0.1530%" height="15" fill="rgb(238,48,10)" fg:x="39635984430" fg:w="60793988"/><text x="100.0299%" y="319.50"></text></g><g><title>core::intrinsics::likely (11,643,991 samples, 0.03%)</title><rect x="99.9329%" y="261" width="0.0293%" height="15" fill="rgb(251,196,23)" fg:x="39696778418" fg:w="11643991"/><text x="100.1829%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (10,773,539,068 samples, 27.12%)</title><rect x="72.8507%" y="373" width="27.1214%" height="15" fill="rgb(250,152,24)" fg:x="28938778872" fg:w="10773539068"/><text x="73.1007%" y="383.50">img::png::deflate::lzss::hash::LzssHashTabl..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (15,539,522 samples, 0.04%)</title><rect x="99.9329%" y="357" width="0.0391%" height="15" fill="rgb(209,150,17)" fg:x="39696778418" fg:w="15539522"/><text x="100.1829%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (15,539,522 samples, 0.04%)</title><rect x="99.9329%" y="341" width="0.0391%" height="15" fill="rgb(234,202,34)" fg:x="39696778418" fg:w="15539522"/><text x="100.1829%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (15,539,522 samples, 0.04%)</title><rect x="99.9329%" y="325" width="0.0391%" height="15" fill="rgb(253,148,53)" fg:x="39696778418" fg:w="15539522"/><text x="100.1829%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (15,539,522 samples, 0.04%)</title><rect x="99.9329%" y="309" width="0.0391%" height="15" fill="rgb(218,129,16)" fg:x="39696778418" fg:w="15539522"/><text x="100.1829%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15,539,522 samples, 0.04%)</title><rect x="99.9329%" y="293" width="0.0391%" height="15" fill="rgb(216,85,19)" fg:x="39696778418" fg:w="15539522"/><text x="100.1829%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15,539,522 samples, 0.04%)</title><rect x="99.9329%" y="277" width="0.0391%" height="15" fill="rgb(235,228,7)" fg:x="39696778418" fg:w="15539522"/><text x="100.1829%" y="287.50"></text></g><g><title>all (39,723,419,755 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(245,175,0)" fg:x="0" fg:w="39723419755"/><text x="0.2500%" y="415.50"></text></g><g><title>img (39,723,419,755 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(208,168,36)" fg:x="0" fg:w="39723419755"/><text x="0.2500%" y="399.50">img</text></g><g><title>malloc (7,258,881 samples, 0.02%)</title><rect x="99.9817%" y="373" width="0.0183%" height="15" fill="rgb(246,171,24)" fg:x="39716160874" fg:w="7258881"/><text x="100.2317%" y="383.50"></text></g></svg></svg>