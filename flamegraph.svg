<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="216723115635"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (56,463,295 samples, 0.03%)</title><rect x="0.0015%" y="165" width="0.0261%" height="15" fill="rgb(227,0,7)" fg:x="3235479" fg:w="56463295"/><text x="0.2515%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (56,463,295 samples, 0.03%)</title><rect x="0.0015%" y="149" width="0.0261%" height="15" fill="rgb(217,0,24)" fg:x="3235479" fg:w="56463295"/><text x="0.2515%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (56,463,295 samples, 0.03%)</title><rect x="0.0015%" y="133" width="0.0261%" height="15" fill="rgb(221,193,54)" fg:x="3235479" fg:w="56463295"/><text x="0.2515%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (56,463,295 samples, 0.03%)</title><rect x="0.0015%" y="117" width="0.0261%" height="15" fill="rgb(248,212,6)" fg:x="3235479" fg:w="56463295"/><text x="0.2515%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53,217,221 samples, 0.02%)</title><rect x="0.0030%" y="101" width="0.0246%" height="15" fill="rgb(208,68,35)" fg:x="6481553" fg:w="53217221"/><text x="0.2530%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53,217,221 samples, 0.02%)</title><rect x="0.0030%" y="85" width="0.0246%" height="15" fill="rgb(232,128,0)" fg:x="6481553" fg:w="53217221"/><text x="0.2530%" y="95.50"></text></g><g><title>alloc::alloc::alloc (53,217,221 samples, 0.02%)</title><rect x="0.0030%" y="69" width="0.0246%" height="15" fill="rgb(207,160,47)" fg:x="6481553" fg:w="53217221"/><text x="0.2530%" y="79.50"></text></g><g><title>malloc (53,217,221 samples, 0.02%)</title><rect x="0.0030%" y="53" width="0.0246%" height="15" fill="rgb(228,23,34)" fg:x="6481553" fg:w="53217221"/><text x="0.2530%" y="63.50"></text></g><g><title>[libc.so.6] (41,081,721 samples, 0.02%)</title><rect x="0.0086%" y="37" width="0.0190%" height="15" fill="rgb(218,30,26)" fg:x="18617053" fg:w="41081721"/><text x="0.2586%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="373" width="0.0329%" height="15" fill="rgb(220,122,19)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="357" width="0.0329%" height="15" fill="rgb(250,228,42)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="341" width="0.0329%" height="15" fill="rgb(240,193,28)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="325" width="0.0329%" height="15" fill="rgb(216,20,37)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="309" width="0.0329%" height="15" fill="rgb(206,188,39)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="293" width="0.0329%" height="15" fill="rgb(217,207,13)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="277" width="0.0329%" height="15" fill="rgb(231,73,38)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="261" width="0.0329%" height="15" fill="rgb(225,20,46)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="245" width="0.0329%" height="15" fill="rgb(210,31,41)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="255.50"></text></g><g><title>core::clone::Clone::clone (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="229" width="0.0329%" height="15" fill="rgb(221,200,47)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="213" width="0.0329%" height="15" fill="rgb(226,26,5)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="197" width="0.0329%" height="15" fill="rgb(249,33,26)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (71,250,168 samples, 0.03%)</title><rect x="0.0015%" y="181" width="0.0329%" height="15" fill="rgb(235,183,28)" fg:x="3235479" fg:w="71250168"/><text x="0.2515%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42,666,274 samples, 0.02%)</title><rect x="0.0449%" y="197" width="0.0197%" height="15" fill="rgb(221,5,38)" fg:x="97355526" fg:w="42666274"/><text x="0.2949%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42,666,274 samples, 0.02%)</title><rect x="0.0449%" y="181" width="0.0197%" height="15" fill="rgb(247,18,42)" fg:x="97355526" fg:w="42666274"/><text x="0.2949%" y="191.50"></text></g><g><title>alloc::alloc::alloc (42,666,274 samples, 0.02%)</title><rect x="0.0449%" y="165" width="0.0197%" height="15" fill="rgb(241,131,45)" fg:x="97355526" fg:w="42666274"/><text x="0.2949%" y="175.50"></text></g><g><title>malloc (42,666,274 samples, 0.02%)</title><rect x="0.0449%" y="149" width="0.0197%" height="15" fill="rgb(249,31,29)" fg:x="97355526" fg:w="42666274"/><text x="0.2949%" y="159.50"></text></g><g><title>[libc.so.6] (34,149,635 samples, 0.02%)</title><rect x="0.0489%" y="133" width="0.0158%" height="15" fill="rgb(225,111,53)" fg:x="105872165" fg:w="34149635"/><text x="0.2989%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (45,796,335 samples, 0.02%)</title><rect x="0.0449%" y="261" width="0.0211%" height="15" fill="rgb(238,160,17)" fg:x="97355526" fg:w="45796335"/><text x="0.2949%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (45,796,335 samples, 0.02%)</title><rect x="0.0449%" y="245" width="0.0211%" height="15" fill="rgb(214,148,48)" fg:x="97355526" fg:w="45796335"/><text x="0.2949%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (45,796,335 samples, 0.02%)</title><rect x="0.0449%" y="229" width="0.0211%" height="15" fill="rgb(232,36,49)" fg:x="97355526" fg:w="45796335"/><text x="0.2949%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (45,796,335 samples, 0.02%)</title><rect x="0.0449%" y="213" width="0.0211%" height="15" fill="rgb(209,103,24)" fg:x="97355526" fg:w="45796335"/><text x="0.2949%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (78,098,507 samples, 0.04%)</title><rect x="0.0344%" y="373" width="0.0360%" height="15" fill="rgb(229,88,8)" fg:x="74485647" fg:w="78098507"/><text x="0.2844%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (78,098,507 samples, 0.04%)</title><rect x="0.0344%" y="357" width="0.0360%" height="15" fill="rgb(213,181,19)" fg:x="74485647" fg:w="78098507"/><text x="0.2844%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (78,098,507 samples, 0.04%)</title><rect x="0.0344%" y="341" width="0.0360%" height="15" fill="rgb(254,191,54)" fg:x="74485647" fg:w="78098507"/><text x="0.2844%" y="351.50"></text></g><g><title>core::clone::Clone::clone (55,228,628 samples, 0.03%)</title><rect x="0.0449%" y="325" width="0.0255%" height="15" fill="rgb(241,83,37)" fg:x="97355526" fg:w="55228628"/><text x="0.2949%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (55,228,628 samples, 0.03%)</title><rect x="0.0449%" y="309" width="0.0255%" height="15" fill="rgb(233,36,39)" fg:x="97355526" fg:w="55228628"/><text x="0.2949%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (55,228,628 samples, 0.03%)</title><rect x="0.0449%" y="293" width="0.0255%" height="15" fill="rgb(226,3,54)" fg:x="97355526" fg:w="55228628"/><text x="0.2949%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (55,228,628 samples, 0.03%)</title><rect x="0.0449%" y="277" width="0.0255%" height="15" fill="rgb(245,192,40)" fg:x="97355526" fg:w="55228628"/><text x="0.2949%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (51,635,178 samples, 0.02%)</title><rect x="3.5044%" y="309" width="0.0238%" height="15" fill="rgb(238,167,29)" fg:x="7594925161" fg:w="51635178"/><text x="3.7544%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (51,635,178 samples, 0.02%)</title><rect x="3.5044%" y="293" width="0.0238%" height="15" fill="rgb(232,182,51)" fg:x="7594925161" fg:w="51635178"/><text x="3.7544%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (51,635,178 samples, 0.02%)</title><rect x="3.5044%" y="277" width="0.0238%" height="15" fill="rgb(231,60,39)" fg:x="7594925161" fg:w="51635178"/><text x="3.7544%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (444,249,519 samples, 0.20%)</title><rect x="3.5283%" y="309" width="0.2050%" height="15" fill="rgb(208,69,12)" fg:x="7646560339" fg:w="444249519"/><text x="3.7783%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (13,042,878,557 samples, 6.02%)</title><rect x="0.0769%" y="325" width="6.0182%" height="15" fill="rgb(235,93,37)" fg:x="166698669" fg:w="13042878557"/><text x="0.3269%" y="335.50">alloc::v..</text></g><g><title>core::ptr::write (5,118,767,368 samples, 2.36%)</title><rect x="3.7332%" y="309" width="2.3619%" height="15" fill="rgb(213,116,39)" fg:x="8090809858" fg:w="5118767368"/><text x="3.9832%" y="319.50">co..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (46,454,003 samples, 0.02%)</title><rect x="6.1034%" y="149" width="0.0214%" height="15" fill="rgb(222,207,29)" fg:x="13227469894" fg:w="46454003"/><text x="6.3534%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (46,454,003 samples, 0.02%)</title><rect x="6.1034%" y="133" width="0.0214%" height="15" fill="rgb(206,96,30)" fg:x="13227469894" fg:w="46454003"/><text x="6.3534%" y="143.50"></text></g><g><title>cfree (41,227,511 samples, 0.02%)</title><rect x="6.1058%" y="117" width="0.0190%" height="15" fill="rgb(218,138,4)" fg:x="13232696386" fg:w="41227511"/><text x="6.3558%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (52,679,624 samples, 0.02%)</title><rect x="6.1034%" y="261" width="0.0243%" height="15" fill="rgb(250,191,14)" fg:x="13227469894" fg:w="52679624"/><text x="6.3534%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52,679,624 samples, 0.02%)</title><rect x="6.1034%" y="245" width="0.0243%" height="15" fill="rgb(239,60,40)" fg:x="13227469894" fg:w="52679624"/><text x="6.3534%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (52,679,624 samples, 0.02%)</title><rect x="6.1034%" y="229" width="0.0243%" height="15" fill="rgb(206,27,48)" fg:x="13227469894" fg:w="52679624"/><text x="6.3534%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52,679,624 samples, 0.02%)</title><rect x="6.1034%" y="213" width="0.0243%" height="15" fill="rgb(225,35,8)" fg:x="13227469894" fg:w="52679624"/><text x="6.3534%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (52,679,624 samples, 0.02%)</title><rect x="6.1034%" y="197" width="0.0243%" height="15" fill="rgb(250,213,24)" fg:x="13227469894" fg:w="52679624"/><text x="6.3534%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52,679,624 samples, 0.02%)</title><rect x="6.1034%" y="181" width="0.0243%" height="15" fill="rgb(247,123,22)" fg:x="13227469894" fg:w="52679624"/><text x="6.3534%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (52,679,624 samples, 0.02%)</title><rect x="6.1034%" y="165" width="0.0243%" height="15" fill="rgb(231,138,38)" fg:x="13227469894" fg:w="52679624"/><text x="6.3534%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58,516,580 samples, 0.03%)</title><rect x="6.1019%" y="293" width="0.0270%" height="15" fill="rgb(231,145,46)" fg:x="13224294666" fg:w="58516580"/><text x="6.3519%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58,516,580 samples, 0.03%)</title><rect x="6.1019%" y="277" width="0.0270%" height="15" fill="rgb(251,118,11)" fg:x="13224294666" fg:w="58516580"/><text x="6.3519%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13,225,988,678 samples, 6.10%)</title><rect x="0.0769%" y="341" width="6.1027%" height="15" fill="rgb(217,147,25)" fg:x="166698669" fg:w="13225988678"/><text x="0.3269%" y="351.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (183,110,121 samples, 0.08%)</title><rect x="6.0951%" y="325" width="0.0845%" height="15" fill="rgb(247,81,37)" fg:x="13209577226" fg:w="183110121"/><text x="6.3451%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (168,392,681 samples, 0.08%)</title><rect x="6.1019%" y="309" width="0.0777%" height="15" fill="rgb(209,12,38)" fg:x="13224294666" fg:w="168392681"/><text x="6.3519%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (100,367,138 samples, 0.05%)</title><rect x="6.1333%" y="293" width="0.0463%" height="15" fill="rgb(227,1,9)" fg:x="13292320209" fg:w="100367138"/><text x="6.3833%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (88,111,354 samples, 0.04%)</title><rect x="6.1390%" y="277" width="0.0407%" height="15" fill="rgb(248,47,43)" fg:x="13304575993" fg:w="88111354"/><text x="6.3890%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (88,111,354 samples, 0.04%)</title><rect x="6.1390%" y="261" width="0.0407%" height="15" fill="rgb(221,10,30)" fg:x="13304575993" fg:w="88111354"/><text x="6.3890%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (88,111,354 samples, 0.04%)</title><rect x="6.1390%" y="245" width="0.0407%" height="15" fill="rgb(210,229,1)" fg:x="13304575993" fg:w="88111354"/><text x="6.3890%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (88,111,354 samples, 0.04%)</title><rect x="6.1390%" y="229" width="0.0407%" height="15" fill="rgb(222,148,37)" fg:x="13304575993" fg:w="88111354"/><text x="6.3890%" y="239.50"></text></g><g><title>core::ptr::copy (84,881,799 samples, 0.04%)</title><rect x="6.1405%" y="213" width="0.0392%" height="15" fill="rgb(234,67,33)" fg:x="13307805548" fg:w="84881799"/><text x="6.3905%" y="223.50"></text></g><g><title>[libc.so.6] (84,881,799 samples, 0.04%)</title><rect x="6.1405%" y="197" width="0.0392%" height="15" fill="rgb(247,98,35)" fg:x="13307805548" fg:w="84881799"/><text x="6.3905%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13,286,290,073 samples, 6.13%)</title><rect x="0.0704%" y="373" width="6.1305%" height="15" fill="rgb(247,138,52)" fg:x="152584154" fg:w="13286290073"/><text x="0.3204%" y="383.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (13,274,851,004 samples, 6.13%)</title><rect x="0.0757%" y="357" width="6.1253%" height="15" fill="rgb(213,79,30)" fg:x="164023223" fg:w="13274851004"/><text x="0.3257%" y="367.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (40,360,987 samples, 0.02%)</title><rect x="6.1823%" y="341" width="0.0186%" height="15" fill="rgb(246,177,23)" fg:x="13398513240" fg:w="40360987"/><text x="6.4323%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40,360,987 samples, 0.02%)</title><rect x="6.1823%" y="325" width="0.0186%" height="15" fill="rgb(230,62,27)" fg:x="13398513240" fg:w="40360987"/><text x="6.4323%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40,360,987 samples, 0.02%)</title><rect x="6.1823%" y="309" width="0.0186%" height="15" fill="rgb(216,154,8)" fg:x="13398513240" fg:w="40360987"/><text x="6.4323%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (40,360,987 samples, 0.02%)</title><rect x="6.1823%" y="293" width="0.0186%" height="15" fill="rgb(244,35,45)" fg:x="13398513240" fg:w="40360987"/><text x="6.4323%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (40,360,987 samples, 0.02%)</title><rect x="6.1823%" y="277" width="0.0186%" height="15" fill="rgb(251,115,12)" fg:x="13398513240" fg:w="40360987"/><text x="6.4323%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32,404,370 samples, 0.01%)</title><rect x="6.1860%" y="261" width="0.0150%" height="15" fill="rgb(240,54,50)" fg:x="13406469857" fg:w="32404370"/><text x="6.4360%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32,404,370 samples, 0.01%)</title><rect x="6.1860%" y="245" width="0.0150%" height="15" fill="rgb(233,84,52)" fg:x="13406469857" fg:w="32404370"/><text x="6.4360%" y="255.50"></text></g><g><title>alloc::alloc::alloc (32,404,370 samples, 0.01%)</title><rect x="6.1860%" y="229" width="0.0150%" height="15" fill="rgb(207,117,47)" fg:x="13406469857" fg:w="32404370"/><text x="6.4360%" y="239.50"></text></g><g><title>malloc (26,301,732 samples, 0.01%)</title><rect x="6.1888%" y="213" width="0.0121%" height="15" fill="rgb(249,43,39)" fg:x="13412572495" fg:w="26301732"/><text x="6.4388%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,592,354,882 samples, 2.12%)</title><rect x="10.5669%" y="293" width="2.1190%" height="15" fill="rgb(209,38,44)" fg:x="22900963289" fg:w="4592354882"/><text x="10.8169%" y="303.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (509,724,612 samples, 0.24%)</title><rect x="12.4507%" y="277" width="0.2352%" height="15" fill="rgb(236,212,23)" fg:x="26983593559" fg:w="509724612"/><text x="12.7007%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,623,815,787 samples, 3.98%)</title><rect x="10.5669%" y="357" width="3.9792%" height="15" fill="rgb(242,79,21)" fg:x="22900963289" fg:w="8623815787"/><text x="10.8169%" y="367.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::find (8,623,815,787 samples, 3.98%)</title><rect x="10.5669%" y="341" width="3.9792%" height="15" fill="rgb(211,96,35)" fg:x="22900963289" fg:w="8623815787"/><text x="10.8169%" y="351.50">core..</text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8,623,815,787 samples, 3.98%)</title><rect x="10.5669%" y="325" width="3.9792%" height="15" fill="rgb(253,215,40)" fg:x="22900963289" fg:w="8623815787"/><text x="10.8169%" y="335.50">&lt;all..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8,623,815,787 samples, 3.98%)</title><rect x="10.5669%" y="309" width="3.9792%" height="15" fill="rgb(211,81,21)" fg:x="22900963289" fg:w="8623815787"/><text x="10.8169%" y="319.50">core..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4,031,460,905 samples, 1.86%)</title><rect x="12.6859%" y="293" width="1.8602%" height="15" fill="rgb(208,190,38)" fg:x="27493318171" fg:w="4031460905"/><text x="12.9359%" y="303.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (4,031,460,905 samples, 1.86%)</title><rect x="12.6859%" y="277" width="1.8602%" height="15" fill="rgb(235,213,38)" fg:x="27493318171" fg:w="4031460905"/><text x="12.9359%" y="287.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4,031,460,905 samples, 1.86%)</title><rect x="12.6859%" y="261" width="1.8602%" height="15" fill="rgb(237,122,38)" fg:x="27493318171" fg:w="4031460905"/><text x="12.9359%" y="271.50">c..</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (4,031,460,905 samples, 1.86%)</title><rect x="12.6859%" y="245" width="1.8602%" height="15" fill="rgb(244,218,35)" fg:x="27493318171" fg:w="4031460905"/><text x="12.9359%" y="255.50">i..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2,678,303,218 samples, 1.24%)</title><rect x="22.9632%" y="277" width="1.2358%" height="15" fill="rgb(240,68,47)" fg:x="49766670544" fg:w="2678303218"/><text x="23.2132%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,411,055,956 samples, 2.04%)</title><rect x="22.3418%" y="309" width="2.0353%" height="15" fill="rgb(210,16,53)" fg:x="48419814653" fg:w="4411055956"/><text x="22.5918%" y="319.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,411,055,956 samples, 2.04%)</title><rect x="22.3418%" y="293" width="2.0353%" height="15" fill="rgb(235,124,12)" fg:x="48419814653" fg:w="4411055956"/><text x="22.5918%" y="303.50">&lt;..</text></g><g><title>core::slice::index::get_offset_len_noubcheck (385,896,847 samples, 0.18%)</title><rect x="24.1991%" y="277" width="0.1781%" height="15" fill="rgb(224,169,11)" fg:x="52444973762" fg:w="385896847"/><text x="24.4491%" y="287.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (21,865,183,643 samples, 10.09%)</title><rect x="50.4870%" y="293" width="10.0890%" height="15" fill="rgb(250,166,2)" fg:x="109417076343" fg:w="21865183643"/><text x="50.7370%" y="303.50">&lt;core::core_sim..</text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (21,865,183,643 samples, 10.09%)</title><rect x="50.4870%" y="277" width="10.0890%" height="15" fill="rgb(242,216,29)" fg:x="109417076343" fg:w="21865183643"/><text x="50.7370%" y="287.50">core::core_simd..</text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (21,865,183,643 samples, 10.09%)</title><rect x="50.4870%" y="261" width="10.0890%" height="15" fill="rgb(230,116,27)" fg:x="109417076343" fg:w="21865183643"/><text x="50.7370%" y="271.50">core::core_simd..</text></g><g><title>core::cmp::Ord::min (846,035,262 samples, 0.39%)</title><rect x="60.5760%" y="293" width="0.3904%" height="15" fill="rgb(228,99,48)" fg:x="131282259986" fg:w="846035262"/><text x="60.8260%" y="303.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::from_slice (17,530,075,567 samples, 8.09%)</title><rect x="60.9664%" y="293" width="8.0887%" height="15" fill="rgb(253,11,6)" fg:x="132128295248" fg:w="17530075567"/><text x="61.2164%" y="303.50">core::core_..</text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::load (17,530,075,567 samples, 8.09%)</title><rect x="60.9664%" y="277" width="8.0887%" height="15" fill="rgb(247,143,39)" fg:x="132128295248" fg:w="17530075567"/><text x="61.2164%" y="287.50">core::core_..</text></g><g><title>core::ptr::copy_nonoverlapping (17,530,075,567 samples, 8.09%)</title><rect x="60.9664%" y="261" width="8.0887%" height="15" fill="rgb(236,97,10)" fg:x="132128295248" fg:w="17530075567"/><text x="61.2164%" y="271.50">core::ptr::..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11,300,656,033 samples, 5.21%)</title><rect x="69.0551%" y="293" width="5.2143%" height="15" fill="rgb(233,208,19)" fg:x="149658370815" fg:w="11300656033"/><text x="69.3051%" y="303.50">core::..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (11,300,656,033 samples, 5.21%)</title><rect x="69.0551%" y="277" width="5.2143%" height="15" fill="rgb(216,164,2)" fg:x="149658370815" fg:w="11300656033"/><text x="69.3051%" y="287.50">&lt;core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,529,981,417 samples, 0.71%)</title><rect x="73.5635%" y="261" width="0.7060%" height="15" fill="rgb(220,129,5)" fg:x="159429045431" fg:w="1529981417"/><text x="73.8135%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (152,880,106,705 samples, 70.54%)</title><rect x="6.2073%" y="373" width="70.5417%" height="15" fill="rgb(242,17,10)" fg:x="13452578236" fg:w="152880106705"/><text x="6.4573%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (134,807,905,865 samples, 62.20%)</title><rect x="14.5461%" y="357" width="62.2028%" height="15" fill="rgb(242,107,0)" fg:x="31524779076" fg:w="134807905865"/><text x="14.7961%" y="367.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (134,807,905,865 samples, 62.20%)</title><rect x="14.5461%" y="341" width="62.2028%" height="15" fill="rgb(251,28,31)" fg:x="31524779076" fg:w="134807905865"/><text x="14.7961%" y="351.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (134,807,905,865 samples, 62.20%)</title><rect x="14.5461%" y="325" width="62.2028%" height="15" fill="rgb(233,223,10)" fg:x="31524779076" fg:w="134807905865"/><text x="14.7961%" y="335.50">img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}}</text></g><g><title>img::simd_utils::number_of_matching_bytes (113,501,814,332 samples, 52.37%)</title><rect x="24.3771%" y="309" width="52.3718%" height="15" fill="rgb(215,21,27)" fg:x="52830870609" fg:w="113501814332"/><text x="24.6271%" y="319.50">img::simd_utils::number_of_matching_bytes</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,373,658,093 samples, 2.48%)</title><rect x="74.2694%" y="293" width="2.4795%" height="15" fill="rgb(232,23,21)" fg:x="160959026848" fg:w="5373658093"/><text x="74.5194%" y="303.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,373,658,093 samples, 2.48%)</title><rect x="74.2694%" y="277" width="2.4795%" height="15" fill="rgb(244,5,23)" fg:x="160959026848" fg:w="5373658093"/><text x="74.5194%" y="287.50">&lt;c..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,895,641,772 samples, 0.87%)</title><rect x="75.8743%" y="261" width="0.8747%" height="15" fill="rgb(226,81,46)" fg:x="164437043169" fg:w="1895641772"/><text x="76.1243%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (33,085,994 samples, 0.02%)</title><rect x="76.7489%" y="373" width="0.0153%" height="15" fill="rgb(247,70,30)" fg:x="166332684941" fg:w="33085994"/><text x="76.9989%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33,085,994 samples, 0.02%)</title><rect x="76.7489%" y="357" width="0.0153%" height="15" fill="rgb(212,68,19)" fg:x="166332684941" fg:w="33085994"/><text x="76.9989%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33,085,994 samples, 0.02%)</title><rect x="76.7489%" y="341" width="0.0153%" height="15" fill="rgb(240,187,13)" fg:x="166332684941" fg:w="33085994"/><text x="76.9989%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (27,209,586 samples, 0.01%)</title><rect x="76.7516%" y="325" width="0.0126%" height="15" fill="rgb(223,113,26)" fg:x="166338561349" fg:w="27209586"/><text x="77.0016%" y="335.50"></text></g><g><title>core::cmp::PartialEq::ne (1,276,634,296 samples, 0.59%)</title><rect x="78.0085%" y="341" width="0.5891%" height="15" fill="rgb(206,192,2)" fg:x="169062359785" fg:w="1276634296"/><text x="78.2585%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,276,634,296 samples, 0.59%)</title><rect x="78.0085%" y="325" width="0.5891%" height="15" fill="rgb(241,108,4)" fg:x="169062359785" fg:w="1276634296"/><text x="78.2585%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7,479,440,286 samples, 3.45%)</title><rect x="78.5975%" y="325" width="3.4512%" height="15" fill="rgb(247,173,49)" fg:x="170338994081" fg:w="7479440286"/><text x="78.8475%" y="335.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (3,190,806,494 samples, 1.47%)</title><rect x="80.5764%" y="309" width="1.4723%" height="15" fill="rgb(224,114,35)" fg:x="174627627873" fg:w="3190806494"/><text x="80.8264%" y="319.50"></text></g><g><title>core::cmp::min_by (3,190,806,494 samples, 1.47%)</title><rect x="80.5764%" y="293" width="1.4723%" height="15" fill="rgb(245,159,27)" fg:x="174627627873" fg:w="3190806494"/><text x="80.8264%" y="303.50"></text></g><g><title>core::cmp::Ordering::is_lt (639,981,054 samples, 0.30%)</title><rect x="81.7534%" y="277" width="0.2953%" height="15" fill="rgb(245,172,44)" fg:x="177178453313" fg:w="639981054"/><text x="82.0034%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,329,944,983 samples, 0.61%)</title><rect x="84.9893%" y="309" width="0.6137%" height="15" fill="rgb(236,23,11)" fg:x="184191427149" fg:w="1329944983"/><text x="85.2393%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (306,755,431 samples, 0.14%)</title><rect x="85.6790%" y="261" width="0.1415%" height="15" fill="rgb(205,117,38)" fg:x="185686285889" fg:w="306755431"/><text x="85.9290%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (306,755,431 samples, 0.14%)</title><rect x="85.6790%" y="245" width="0.1415%" height="15" fill="rgb(237,72,25)" fg:x="185686285889" fg:w="306755431"/><text x="85.9290%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (287,947,440 samples, 0.13%)</title><rect x="85.6877%" y="229" width="0.1329%" height="15" fill="rgb(244,70,9)" fg:x="185705093880" fg:w="287947440"/><text x="85.9377%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (287,947,440 samples, 0.13%)</title><rect x="85.6877%" y="213" width="0.1329%" height="15" fill="rgb(217,125,39)" fg:x="185705093880" fg:w="287947440"/><text x="85.9377%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (287,947,440 samples, 0.13%)</title><rect x="85.6877%" y="197" width="0.1329%" height="15" fill="rgb(235,36,10)" fg:x="185705093880" fg:w="287947440"/><text x="85.9377%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (287,947,440 samples, 0.13%)</title><rect x="85.6877%" y="181" width="0.1329%" height="15" fill="rgb(251,123,47)" fg:x="185705093880" fg:w="287947440"/><text x="85.9377%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,421,539,657 samples, 1.12%)</title><rect x="85.6029%" y="309" width="1.1173%" height="15" fill="rgb(221,13,13)" fg:x="185521372132" fg:w="2421539657"/><text x="85.8529%" y="319.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}}::_{{closure}} (2,421,539,657 samples, 1.12%)</title><rect x="85.6029%" y="293" width="1.1173%" height="15" fill="rgb(238,131,9)" fg:x="185521372132" fg:w="2421539657"/><text x="85.8529%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,256,625,900 samples, 1.04%)</title><rect x="85.6790%" y="277" width="1.0412%" height="15" fill="rgb(211,50,8)" fg:x="185686285889" fg:w="2256625900"/><text x="85.9290%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,949,870,469 samples, 0.90%)</title><rect x="85.8206%" y="261" width="0.8997%" height="15" fill="rgb(245,182,24)" fg:x="185993041320" fg:w="1949870469"/><text x="86.0706%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,949,870,469 samples, 0.90%)</title><rect x="85.8206%" y="245" width="0.8997%" height="15" fill="rgb(242,14,37)" fg:x="185993041320" fg:w="1949870469"/><text x="86.0706%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (32,042,581,793 samples, 14.79%)</title><rect x="78.5975%" y="341" width="14.7850%" height="15" fill="rgb(246,228,12)" fg:x="170338994081" fg:w="32042581793"/><text x="78.8475%" y="351.50">core::iter::adapters::m..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (24,563,141,507 samples, 11.33%)</title><rect x="82.0487%" y="325" width="11.3339%" height="15" fill="rgb(213,55,15)" fg:x="177818434367" fg:w="24563141507"/><text x="82.2987%" y="335.50">img::png::deflate..</text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (14,438,664,085 samples, 6.66%)</title><rect x="86.7203%" y="309" width="6.6623%" height="15" fill="rgb(209,9,3)" fg:x="187942911789" fg:w="14438664085"/><text x="86.9703%" y="319.50">img::png:..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (5,851,435,301 samples, 2.70%)</title><rect x="90.6826%" y="293" width="2.7000%" height="15" fill="rgb(230,59,30)" fg:x="196530140573" fg:w="5851435301"/><text x="90.9326%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u16,u16)&gt;&gt; (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="341" width="0.0217%" height="15" fill="rgb(209,121,21)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="325" width="0.0217%" height="15" fill="rgb(220,109,13)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u16,u16),alloc::alloc::Global&gt;&gt; (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="309" width="0.0217%" height="15" fill="rgb(232,18,1)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="293" width="0.0217%" height="15" fill="rgb(215,41,42)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u16,u16)&gt;&gt; (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="277" width="0.0217%" height="15" fill="rgb(224,123,36)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="261" width="0.0217%" height="15" fill="rgb(240,125,3)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="245" width="0.0217%" height="15" fill="rgb(205,98,50)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="229" width="0.0217%" height="15" fill="rgb(205,185,37)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="213" width="0.0217%" height="15" fill="rgb(238,207,15)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="223.50"></text></g><g><title>cfree (47,065,037 samples, 0.02%)</title><rect x="93.3826%" y="197" width="0.0217%" height="15" fill="rgb(213,199,42)" fg:x="202381575874" fg:w="47065037"/><text x="93.6326%" y="207.50"></text></g><g><title>[libc.so.6] (30,019,615 samples, 0.01%)</title><rect x="93.3904%" y="181" width="0.0139%" height="15" fill="rgb(235,201,11)" fg:x="202398621296" fg:w="30019615"/><text x="93.6404%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (679,261,837 samples, 0.31%)</title><rect x="93.4043%" y="341" width="0.3134%" height="15" fill="rgb(207,46,11)" fg:x="202428640911" fg:w="679261837"/><text x="93.6543%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (37,034,764,159 samples, 17.09%)</title><rect x="76.7739%" y="357" width="17.0885%" height="15" fill="rgb(241,35,35)" fg:x="166386691013" fg:w="37034764159"/><text x="77.0239%" y="367.50">&lt;alloc::vec::into_iter::In..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (313,552,424 samples, 0.14%)</title><rect x="93.7177%" y="341" width="0.1447%" height="15" fill="rgb(243,32,47)" fg:x="203107902748" fg:w="313552424"/><text x="93.9677%" y="351.50"></text></g><g><title>core::ptr::read (313,552,424 samples, 0.14%)</title><rect x="93.7177%" y="325" width="0.1447%" height="15" fill="rgb(247,202,23)" fg:x="203107902748" fg:w="313552424"/><text x="93.9677%" y="335.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (84,333,705 samples, 0.04%)</title><rect x="93.9328%" y="117" width="0.0389%" height="15" fill="rgb(219,102,11)" fg:x="203574124381" fg:w="84333705"/><text x="94.1828%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (84,333,705 samples, 0.04%)</title><rect x="93.9328%" y="101" width="0.0389%" height="15" fill="rgb(243,110,44)" fg:x="203574124381" fg:w="84333705"/><text x="94.1828%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (84,333,705 samples, 0.04%)</title><rect x="93.9328%" y="85" width="0.0389%" height="15" fill="rgb(222,74,54)" fg:x="203574124381" fg:w="84333705"/><text x="94.1828%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (84,333,705 samples, 0.04%)</title><rect x="93.9328%" y="69" width="0.0389%" height="15" fill="rgb(216,99,12)" fg:x="203574124381" fg:w="84333705"/><text x="94.1828%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (84,333,705 samples, 0.04%)</title><rect x="93.9328%" y="53" width="0.0389%" height="15" fill="rgb(226,22,26)" fg:x="203574124381" fg:w="84333705"/><text x="94.1828%" y="63.50"></text></g><g><title>[libc.so.6] (37,402,932,539 samples, 17.26%)</title><rect x="76.7642%" y="373" width="17.2584%" height="15" fill="rgb(217,163,10)" fg:x="166365770935" fg:w="37402932539"/><text x="77.0142%" y="383.50">[libc.so.6]</text></g><g><title>img::png::deflate::lzss::table_to_vec (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="357" width="0.1556%" height="15" fill="rgb(213,25,53)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="341" width="0.1556%" height="15" fill="rgb(252,105,26)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="325" width="0.1556%" height="15" fill="rgb(220,39,43)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="309" width="0.1556%" height="15" fill="rgb(229,68,48)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="293" width="0.1556%" height="15" fill="rgb(252,8,32)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="277" width="0.1556%" height="15" fill="rgb(223,20,43)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="261" width="0.1556%" height="15" fill="rgb(229,81,49)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="245" width="0.1556%" height="15" fill="rgb(236,28,36)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="229" width="0.1556%" height="15" fill="rgb(249,185,26)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="213" width="0.1556%" height="15" fill="rgb(249,174,33)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="197" width="0.1556%" height="15" fill="rgb(233,201,37)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="181" width="0.1556%" height="15" fill="rgb(221,78,26)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="191.50"></text></g><g><title>alloc::alloc::alloc (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="165" width="0.1556%" height="15" fill="rgb(250,127,30)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="149" width="0.1556%" height="15" fill="rgb(230,49,44)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (337,257,878 samples, 0.16%)</title><rect x="93.8670%" y="133" width="0.1556%" height="15" fill="rgb(229,67,23)" fg:x="203431445596" fg:w="337257878"/><text x="94.1170%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (110,245,388 samples, 0.05%)</title><rect x="93.9717%" y="117" width="0.0509%" height="15" fill="rgb(249,83,47)" fg:x="203658458086" fg:w="110245388"/><text x="94.2217%" y="127.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert::_{{closure}} (110,245,388 samples, 0.05%)</title><rect x="93.9717%" y="101" width="0.0509%" height="15" fill="rgb(215,43,3)" fg:x="203658458086" fg:w="110245388"/><text x="94.2217%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (28,337,961 samples, 0.01%)</title><rect x="94.0449%" y="325" width="0.0131%" height="15" fill="rgb(238,154,13)" fg:x="203817096783" fg:w="28337961"/><text x="94.2949%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (111,874,097 samples, 0.05%)</title><rect x="94.0365%" y="357" width="0.0516%" height="15" fill="rgb(219,56,2)" fg:x="203798759417" fg:w="111874097"/><text x="94.2865%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (98,862,340 samples, 0.05%)</title><rect x="94.0425%" y="341" width="0.0456%" height="15" fill="rgb(233,0,4)" fg:x="203811771174" fg:w="98862340"/><text x="94.2925%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (65,198,770 samples, 0.03%)</title><rect x="94.0580%" y="325" width="0.0301%" height="15" fill="rgb(235,30,7)" fg:x="203845434744" fg:w="65198770"/><text x="94.3080%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (65,198,770 samples, 0.03%)</title><rect x="94.0580%" y="309" width="0.0301%" height="15" fill="rgb(250,79,13)" fg:x="203845434744" fg:w="65198770"/><text x="94.3080%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (65,198,770 samples, 0.03%)</title><rect x="94.0580%" y="293" width="0.0301%" height="15" fill="rgb(211,146,34)" fg:x="203845434744" fg:w="65198770"/><text x="94.3080%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (65,198,770 samples, 0.03%)</title><rect x="94.0580%" y="277" width="0.0301%" height="15" fill="rgb(228,22,38)" fg:x="203845434744" fg:w="65198770"/><text x="94.3080%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (65,198,770 samples, 0.03%)</title><rect x="94.0580%" y="261" width="0.0301%" height="15" fill="rgb(235,168,5)" fg:x="203845434744" fg:w="65198770"/><text x="94.3080%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65,198,770 samples, 0.03%)</title><rect x="94.0580%" y="245" width="0.0301%" height="15" fill="rgb(221,155,16)" fg:x="203845434744" fg:w="65198770"/><text x="94.3080%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65,198,770 samples, 0.03%)</title><rect x="94.0580%" y="229" width="0.0301%" height="15" fill="rgb(215,215,53)" fg:x="203845434744" fg:w="65198770"/><text x="94.3080%" y="239.50"></text></g><g><title>alloc::alloc::alloc (65,198,770 samples, 0.03%)</title><rect x="94.0580%" y="213" width="0.0301%" height="15" fill="rgb(223,4,10)" fg:x="203845434744" fg:w="65198770"/><text x="94.3080%" y="223.50"></text></g><g><title>malloc (62,033,720 samples, 0.03%)</title><rect x="94.0595%" y="197" width="0.0286%" height="15" fill="rgb(234,103,6)" fg:x="203848599794" fg:w="62033720"/><text x="94.3095%" y="207.50"></text></g><g><title>[libc.so.6] (27,990,986 samples, 0.01%)</title><rect x="94.0752%" y="181" width="0.0129%" height="15" fill="rgb(227,97,0)" fg:x="203882642528" fg:w="27990986"/><text x="94.3252%" y="191.50"></text></g><g><title>[unknown] (27,222,913 samples, 0.01%)</title><rect x="94.0971%" y="357" width="0.0126%" height="15" fill="rgb(234,150,53)" fg:x="203930068424" fg:w="27222913"/><text x="94.3471%" y="367.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2,024,975,055 samples, 0.93%)</title><rect x="96.2822%" y="325" width="0.9344%" height="15" fill="rgb(228,201,54)" fg:x="208665800294" fg:w="2024975055"/><text x="96.5322%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (2,024,975,055 samples, 0.93%)</title><rect x="96.2822%" y="309" width="0.9344%" height="15" fill="rgb(222,22,37)" fg:x="208665800294" fg:w="2024975055"/><text x="96.5322%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,024,975,055 samples, 0.93%)</title><rect x="96.2822%" y="293" width="0.9344%" height="15" fill="rgb(237,53,32)" fg:x="208665800294" fg:w="2024975055"/><text x="96.5322%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,024,975,055 samples, 0.93%)</title><rect x="96.2822%" y="277" width="0.9344%" height="15" fill="rgb(233,25,53)" fg:x="208665800294" fg:w="2024975055"/><text x="96.5322%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,024,975,055 samples, 0.93%)</title><rect x="96.2822%" y="261" width="0.9344%" height="15" fill="rgb(210,40,34)" fg:x="208665800294" fg:w="2024975055"/><text x="96.5322%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (1,091,775,981 samples, 0.50%)</title><rect x="97.2166%" y="325" width="0.5038%" height="15" fill="rgb(241,220,44)" fg:x="210690775349" fg:w="1091775981"/><text x="97.4666%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert::_{{closure}} (1,091,775,981 samples, 0.50%)</title><rect x="97.2166%" y="309" width="0.5038%" height="15" fill="rgb(235,28,35)" fg:x="210690775349" fg:w="1091775981"/><text x="97.4666%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (1,083,800,976 samples, 0.50%)</title><rect x="97.8852%" y="277" width="0.5001%" height="15" fill="rgb(210,56,17)" fg:x="212139757262" fg:w="1083800976"/><text x="98.1352%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (1,792,818,120 samples, 0.83%)</title><rect x="97.8852%" y="309" width="0.8272%" height="15" fill="rgb(224,130,29)" fg:x="212139757262" fg:w="1792818120"/><text x="98.1352%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (1,792,818,120 samples, 0.83%)</title><rect x="97.8852%" y="293" width="0.8272%" height="15" fill="rgb(235,212,8)" fg:x="212139757262" fg:w="1792818120"/><text x="98.1352%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (709,017,144 samples, 0.33%)</title><rect x="98.3852%" y="277" width="0.3272%" height="15" fill="rgb(223,33,50)" fg:x="213223558238" fg:w="709017144"/><text x="98.6352%" y="287.50"></text></g><g><title>core::ptr::copy (167,242,338 samples, 0.08%)</title><rect x="98.7124%" y="293" width="0.0772%" height="15" fill="rgb(219,149,13)" fg:x="213932575382" fg:w="167242338"/><text x="98.9624%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (10,551,470,226 samples, 4.87%)</title><rect x="94.1205%" y="357" width="4.8686%" height="15" fill="rgb(250,156,29)" fg:x="203980922886" fg:w="10551470226"/><text x="94.3705%" y="367.50">alloc:..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (10,541,002,212 samples, 4.86%)</title><rect x="94.1253%" y="341" width="4.8638%" height="15" fill="rgb(216,193,19)" fg:x="203991390900" fg:w="10541002212"/><text x="94.3753%" y="351.50">alloc:..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::swap (2,749,841,782 samples, 1.27%)</title><rect x="97.7203%" y="325" width="1.2688%" height="15" fill="rgb(216,135,14)" fg:x="211782551330" fg:w="2749841782"/><text x="97.9703%" y="335.50"></text></g><g><title>core::ptr::swap (599,817,730 samples, 0.28%)</title><rect x="98.7124%" y="309" width="0.2768%" height="15" fill="rgb(241,47,5)" fg:x="213932575382" fg:w="599817730"/><text x="98.9624%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (432,575,392 samples, 0.20%)</title><rect x="98.7896%" y="293" width="0.1996%" height="15" fill="rgb(233,42,35)" fg:x="214099817720" fg:w="432575392"/><text x="99.0396%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (50,003,340 samples, 0.02%)</title><rect x="98.9892%" y="357" width="0.0231%" height="15" fill="rgb(231,13,6)" fg:x="214532393112" fg:w="50003340"/><text x="99.2392%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (50,003,340 samples, 0.02%)</title><rect x="98.9892%" y="341" width="0.0231%" height="15" fill="rgb(207,181,40)" fg:x="214532393112" fg:w="50003340"/><text x="99.2392%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (971,009,062 samples, 0.45%)</title><rect x="99.0172%" y="341" width="0.4480%" height="15" fill="rgb(254,173,49)" fg:x="214593228419" fg:w="971009062"/><text x="99.2672%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (971,009,062 samples, 0.45%)</title><rect x="99.0172%" y="325" width="0.4480%" height="15" fill="rgb(221,1,38)" fg:x="214593228419" fg:w="971009062"/><text x="99.2672%" y="335.50"></text></g><g><title>alloc::alloc::realloc (971,009,062 samples, 0.45%)</title><rect x="99.0172%" y="309" width="0.4480%" height="15" fill="rgb(206,124,46)" fg:x="214593228419" fg:w="971009062"/><text x="99.2672%" y="319.50"></text></g><g><title>realloc (962,915,899 samples, 0.44%)</title><rect x="99.0210%" y="293" width="0.4443%" height="15" fill="rgb(249,21,11)" fg:x="214601321582" fg:w="962915899"/><text x="99.2710%" y="303.50"></text></g><g><title>[libc.so.6] (874,017,537 samples, 0.40%)</title><rect x="99.0620%" y="277" width="0.4033%" height="15" fill="rgb(222,201,40)" fg:x="214690219944" fg:w="874017537"/><text x="99.3120%" y="287.50"></text></g><g><title>[libc.so.6] (776,396,481 samples, 0.36%)</title><rect x="99.1070%" y="261" width="0.3582%" height="15" fill="rgb(235,61,29)" fg:x="214787841000" fg:w="776396481"/><text x="99.3570%" y="271.50"></text></g><g><title>[libc.so.6] (70,840,478 samples, 0.03%)</title><rect x="99.4326%" y="245" width="0.0327%" height="15" fill="rgb(219,207,3)" fg:x="215493397003" fg:w="70840478"/><text x="99.6826%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (989,570,438 samples, 0.46%)</title><rect x="99.0122%" y="357" width="0.4566%" height="15" fill="rgb(222,56,46)" fg:x="214582396452" fg:w="989570438"/><text x="99.2622%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (49,329,538 samples, 0.02%)</title><rect x="99.4688%" y="341" width="0.0228%" height="15" fill="rgb(239,76,54)" fg:x="215571966890" fg:w="49329538"/><text x="99.7188%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (49,329,538 samples, 0.02%)</title><rect x="99.4688%" y="325" width="0.0228%" height="15" fill="rgb(231,124,27)" fg:x="215571966890" fg:w="49329538"/><text x="99.7188%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (49,329,538 samples, 0.02%)</title><rect x="99.4688%" y="309" width="0.0228%" height="15" fill="rgb(249,195,6)" fg:x="215571966890" fg:w="49329538"/><text x="99.7188%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (24,976,625 samples, 0.01%)</title><rect x="99.4801%" y="293" width="0.0115%" height="15" fill="rgb(237,174,47)" fg:x="215596319803" fg:w="24976625"/><text x="99.7301%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (75,942,041 samples, 0.04%)</title><rect x="99.4688%" y="357" width="0.0350%" height="15" fill="rgb(206,201,31)" fg:x="215571966890" fg:w="75942041"/><text x="99.7188%" y="367.50"></text></g><g><title>img::png::deflate::encode_block_type_two (30,974,104 samples, 0.01%)</title><rect x="99.5443%" y="357" width="0.0143%" height="15" fill="rgb(231,57,52)" fg:x="215735401240" fg:w="30974104"/><text x="99.7943%" y="367.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (34,476,087 samples, 0.02%)</title><rect x="99.5585%" y="357" width="0.0159%" height="15" fill="rgb(248,177,22)" fg:x="215766375344" fg:w="34476087"/><text x="99.8085%" y="367.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (56,687,287 samples, 0.03%)</title><rect x="99.5759%" y="357" width="0.0262%" height="15" fill="rgb(215,211,37)" fg:x="215804015540" fg:w="56687287"/><text x="99.8259%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (43,311,610 samples, 0.02%)</title><rect x="99.5821%" y="341" width="0.0200%" height="15" fill="rgb(241,128,51)" fg:x="215817391217" fg:w="43311610"/><text x="99.8321%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (43,311,610 samples, 0.02%)</title><rect x="99.5821%" y="325" width="0.0200%" height="15" fill="rgb(227,165,31)" fg:x="215817391217" fg:w="43311610"/><text x="99.8321%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (43,311,610 samples, 0.02%)</title><rect x="99.5821%" y="309" width="0.0200%" height="15" fill="rgb(228,167,24)" fg:x="215817391217" fg:w="43311610"/><text x="99.8321%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (43,311,610 samples, 0.02%)</title><rect x="99.5821%" y="293" width="0.0200%" height="15" fill="rgb(228,143,12)" fg:x="215817391217" fg:w="43311610"/><text x="99.8321%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (43,311,610 samples, 0.02%)</title><rect x="99.5821%" y="277" width="0.0200%" height="15" fill="rgb(249,149,8)" fg:x="215817391217" fg:w="43311610"/><text x="99.8321%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (43,311,610 samples, 0.02%)</title><rect x="99.5821%" y="261" width="0.0200%" height="15" fill="rgb(243,35,44)" fg:x="215817391217" fg:w="43311610"/><text x="99.8321%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (27,212,901 samples, 0.01%)</title><rect x="99.6058%" y="357" width="0.0126%" height="15" fill="rgb(246,89,9)" fg:x="215868774254" fg:w="27212901"/><text x="99.8558%" y="367.50"></text></g><g><title>[unknown] (12,169,180,909 samples, 5.62%)</title><rect x="94.0226%" y="373" width="5.6151%" height="15" fill="rgb(233,213,13)" fg:x="203768703474" fg:w="12169180909"/><text x="94.2726%" y="383.50">[unknow..</text></g><g><title>__rustc::__rdl_alloc (25,950,344 samples, 0.01%)</title><rect x="99.6377%" y="373" width="0.0120%" height="15" fill="rgb(233,141,41)" fg:x="215937884383" fg:w="25950344"/><text x="99.8877%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (23,579,083 samples, 0.01%)</title><rect x="99.6388%" y="357" width="0.0109%" height="15" fill="rgb(239,167,4)" fg:x="215940255644" fg:w="23579083"/><text x="99.8888%" y="367.50"></text></g><g><title>__rustc::__rdl_realloc (35,212,298 samples, 0.02%)</title><rect x="99.6532%" y="373" width="0.0162%" height="15" fill="rgb(209,217,16)" fg:x="215971485012" fg:w="35212298"/><text x="99.9032%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (27,313,851 samples, 0.01%)</title><rect x="99.6568%" y="357" width="0.0126%" height="15" fill="rgb(219,88,35)" fg:x="215979383459" fg:w="27313851"/><text x="99.9068%" y="367.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (90,074,614 samples, 0.04%)</title><rect x="99.7405%" y="341" width="0.0416%" height="15" fill="rgb(220,193,23)" fg:x="216160807616" fg:w="90074614"/><text x="99.9905%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (90,074,614 samples, 0.04%)</title><rect x="99.7405%" y="325" width="0.0416%" height="15" fill="rgb(230,90,52)" fg:x="216160807616" fg:w="90074614"/><text x="99.9905%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (90,074,614 samples, 0.04%)</title><rect x="99.7405%" y="309" width="0.0416%" height="15" fill="rgb(252,106,19)" fg:x="216160807616" fg:w="90074614"/><text x="99.9905%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (90,074,614 samples, 0.04%)</title><rect x="99.7405%" y="293" width="0.0416%" height="15" fill="rgb(206,74,20)" fg:x="216160807616" fg:w="90074614"/><text x="99.9905%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (90,074,614 samples, 0.04%)</title><rect x="99.7405%" y="277" width="0.0416%" height="15" fill="rgb(230,138,44)" fg:x="216160807616" fg:w="90074614"/><text x="99.9905%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (72,891,120 samples, 0.03%)</title><rect x="99.7821%" y="341" width="0.0336%" height="15" fill="rgb(235,182,43)" fg:x="216250882230" fg:w="72891120"/><text x="100.0321%" y="351.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert::_{{closure}} (72,891,120 samples, 0.03%)</title><rect x="99.7821%" y="325" width="0.0336%" height="15" fill="rgb(242,16,51)" fg:x="216250882230" fg:w="72891120"/><text x="100.0321%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (322,888,140 samples, 0.15%)</title><rect x="99.6694%" y="373" width="0.1490%" height="15" fill="rgb(248,9,4)" fg:x="216006697310" fg:w="322888140"/><text x="99.9194%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (322,888,140 samples, 0.15%)</title><rect x="99.6694%" y="357" width="0.1490%" height="15" fill="rgb(210,31,22)" fg:x="216006697310" fg:w="322888140"/><text x="99.9194%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (26,464,392 samples, 0.01%)</title><rect x="99.8199%" y="373" width="0.0122%" height="15" fill="rgb(239,54,39)" fg:x="216332734655" fg:w="26464392"/><text x="100.0699%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (26,464,392 samples, 0.01%)</title><rect x="99.8199%" y="357" width="0.0122%" height="15" fill="rgb(230,99,41)" fg:x="216332734655" fg:w="26464392"/><text x="100.0699%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (76,670,643 samples, 0.04%)</title><rect x="99.8321%" y="373" width="0.0354%" height="15" fill="rgb(253,106,12)" fg:x="216359199047" fg:w="76670643"/><text x="100.0821%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (76,670,643 samples, 0.04%)</title><rect x="99.8321%" y="357" width="0.0354%" height="15" fill="rgb(213,46,41)" fg:x="216359199047" fg:w="76670643"/><text x="100.0821%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (76,670,643 samples, 0.04%)</title><rect x="99.8321%" y="341" width="0.0354%" height="15" fill="rgb(215,133,35)" fg:x="216359199047" fg:w="76670643"/><text x="100.0821%" y="351.50"></text></g><g><title>alloc::alloc::realloc (76,670,643 samples, 0.04%)</title><rect x="99.8321%" y="325" width="0.0354%" height="15" fill="rgb(213,28,5)" fg:x="216359199047" fg:w="76670643"/><text x="100.0821%" y="335.50"></text></g><g><title>realloc (69,130,104 samples, 0.03%)</title><rect x="99.8356%" y="309" width="0.0319%" height="15" fill="rgb(215,77,49)" fg:x="216366739586" fg:w="69130104"/><text x="100.0856%" y="319.50"></text></g><g><title>[libc.so.6] (65,911,149 samples, 0.03%)</title><rect x="99.8370%" y="293" width="0.0304%" height="15" fill="rgb(248,100,22)" fg:x="216369958541" fg:w="65911149"/><text x="100.0870%" y="303.50"></text></g><g><title>[libc.so.6] (50,807,845 samples, 0.02%)</title><rect x="99.8440%" y="277" width="0.0234%" height="15" fill="rgb(208,67,9)" fg:x="216385061845" fg:w="50807845"/><text x="100.0940%" y="287.50"></text></g><g><title>[libc.so.6] (25,863,910 samples, 0.01%)</title><rect x="99.8555%" y="261" width="0.0119%" height="15" fill="rgb(219,133,21)" fg:x="216410005780" fg:w="25863910"/><text x="100.1055%" y="271.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (59,427,269 samples, 0.03%)</title><rect x="99.9145%" y="373" width="0.0274%" height="15" fill="rgb(246,46,29)" fg:x="216537886544" fg:w="59427269"/><text x="100.1645%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (56,288,307 samples, 0.03%)</title><rect x="99.9160%" y="357" width="0.0260%" height="15" fill="rgb(246,185,52)" fg:x="216541025506" fg:w="56288307"/><text x="100.1660%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (25,500,010 samples, 0.01%)</title><rect x="99.9302%" y="341" width="0.0118%" height="15" fill="rgb(252,136,11)" fg:x="216571813803" fg:w="25500010"/><text x="100.1802%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by_key (22,817,015 samples, 0.01%)</title><rect x="99.9562%" y="341" width="0.0105%" height="15" fill="rgb(219,138,53)" fg:x="216628130132" fg:w="22817015"/><text x="100.2062%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (22,817,015 samples, 0.01%)</title><rect x="99.9562%" y="325" width="0.0105%" height="15" fill="rgb(211,51,23)" fg:x="216628130132" fg:w="22817015"/><text x="100.2062%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (22,817,015 samples, 0.01%)</title><rect x="99.9562%" y="309" width="0.0105%" height="15" fill="rgb(247,221,28)" fg:x="216628130132" fg:w="22817015"/><text x="100.2062%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22,817,015 samples, 0.01%)</title><rect x="99.9562%" y="293" width="0.0105%" height="15" fill="rgb(251,222,45)" fg:x="216628130132" fg:w="22817015"/><text x="100.2062%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22,817,015 samples, 0.01%)</title><rect x="99.9562%" y="277" width="0.0105%" height="15" fill="rgb(217,162,53)" fg:x="216628130132" fg:w="22817015"/><text x="100.2062%" y="287.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (54,953,198 samples, 0.03%)</title><rect x="99.9463%" y="373" width="0.0254%" height="15" fill="rgb(229,93,14)" fg:x="216606830950" fg:w="54953198"/><text x="100.1963%" y="383.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (54,953,198 samples, 0.03%)</title><rect x="99.9463%" y="357" width="0.0254%" height="15" fill="rgb(209,67,49)" fg:x="216606830950" fg:w="54953198"/><text x="100.1963%" y="367.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (28,939,227 samples, 0.01%)</title><rect x="99.9717%" y="373" width="0.0134%" height="15" fill="rgb(213,87,29)" fg:x="216661784148" fg:w="28939227"/><text x="100.2217%" y="383.50"></text></g><g><title>all (216,723,115,635 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="216723115635"/><text x="0.2500%" y="415.50"></text></g><g><title>img (216,723,115,635 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="216723115635"/><text x="0.2500%" y="399.50">img</text></g></svg></svg>