<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="24556880962"><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (12,055,463 samples, 0.05%)</title><rect x="0.0000%" y="341" width="0.0491%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12055463"/><text x="0.2500%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12,055,463 samples, 0.05%)</title><rect x="0.0000%" y="325" width="0.0491%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="12055463"/><text x="0.2500%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (12,055,463 samples, 0.05%)</title><rect x="0.0000%" y="309" width="0.0491%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="12055463"/><text x="0.2500%" y="319.50"></text></g><g><title>[unknown] (8,026,635 samples, 0.03%)</title><rect x="0.0164%" y="293" width="0.0327%" height="15" fill="rgb(248,212,6)" fg:x="4028828" fg:w="8026635"/><text x="0.2664%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (8,026,635 samples, 0.03%)</title><rect x="0.0164%" y="277" width="0.0327%" height="15" fill="rgb(208,68,35)" fg:x="4028828" fg:w="8026635"/><text x="0.2664%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8,026,635 samples, 0.03%)</title><rect x="0.0164%" y="261" width="0.0327%" height="15" fill="rgb(232,128,0)" fg:x="4028828" fg:w="8026635"/><text x="0.2664%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8,026,635 samples, 0.03%)</title><rect x="0.0164%" y="245" width="0.0327%" height="15" fill="rgb(207,160,47)" fg:x="4028828" fg:w="8026635"/><text x="0.2664%" y="255.50"></text></g><g><title>alloc::alloc::realloc (8,026,635 samples, 0.03%)</title><rect x="0.0164%" y="229" width="0.0327%" height="15" fill="rgb(228,23,34)" fg:x="4028828" fg:w="8026635"/><text x="0.2664%" y="239.50"></text></g><g><title>realloc (8,026,635 samples, 0.03%)</title><rect x="0.0164%" y="213" width="0.0327%" height="15" fill="rgb(218,30,26)" fg:x="4028828" fg:w="8026635"/><text x="0.2664%" y="223.50"></text></g><g><title>[libc.so.6] (8,026,635 samples, 0.03%)</title><rect x="0.0164%" y="197" width="0.0327%" height="15" fill="rgb(220,122,19)" fg:x="4028828" fg:w="8026635"/><text x="0.2664%" y="207.50"></text></g><g><title>[libc.so.6] (8,026,635 samples, 0.03%)</title><rect x="0.0164%" y="181" width="0.0327%" height="15" fill="rgb(250,228,42)" fg:x="4028828" fg:w="8026635"/><text x="0.2664%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (12,007,658 samples, 0.05%)</title><rect x="0.0491%" y="261" width="0.0489%" height="15" fill="rgb(240,193,28)" fg:x="12055463" fg:w="12007658"/><text x="0.2991%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (12,007,658 samples, 0.05%)</title><rect x="0.0491%" y="245" width="0.0489%" height="15" fill="rgb(216,20,37)" fg:x="12055463" fg:w="12007658"/><text x="0.2991%" y="255.50"></text></g><g><title>core::ptr::write (12,007,658 samples, 0.05%)</title><rect x="0.0491%" y="229" width="0.0489%" height="15" fill="rgb(206,188,39)" fg:x="12055463" fg:w="12007658"/><text x="0.2991%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (123,644,419 samples, 0.50%)</title><rect x="0.0000%" y="389" width="0.5035%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="123644419"/><text x="0.2500%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (123,644,419 samples, 0.50%)</title><rect x="0.0000%" y="373" width="0.5035%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="123644419"/><text x="0.2500%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (123,644,419 samples, 0.50%)</title><rect x="0.0000%" y="357" width="0.5035%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="123644419"/><text x="0.2500%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (111,588,956 samples, 0.45%)</title><rect x="0.0491%" y="341" width="0.4544%" height="15" fill="rgb(210,31,41)" fg:x="12055463" fg:w="111588956"/><text x="0.2991%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (111,588,956 samples, 0.45%)</title><rect x="0.0491%" y="325" width="0.4544%" height="15" fill="rgb(221,200,47)" fg:x="12055463" fg:w="111588956"/><text x="0.2991%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (111,588,956 samples, 0.45%)</title><rect x="0.0491%" y="309" width="0.4544%" height="15" fill="rgb(226,26,5)" fg:x="12055463" fg:w="111588956"/><text x="0.2991%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (111,588,956 samples, 0.45%)</title><rect x="0.0491%" y="293" width="0.4544%" height="15" fill="rgb(249,33,26)" fg:x="12055463" fg:w="111588956"/><text x="0.2991%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (111,588,956 samples, 0.45%)</title><rect x="0.0491%" y="277" width="0.4544%" height="15" fill="rgb(235,183,28)" fg:x="12055463" fg:w="111588956"/><text x="0.2991%" y="287.50"></text></g><g><title>core::ops::function::FnMut::call_mut (99,581,298 samples, 0.41%)</title><rect x="0.0980%" y="261" width="0.4055%" height="15" fill="rgb(221,5,38)" fg:x="24063121" fg:w="99581298"/><text x="0.3480%" y="271.50"></text></g><g><title>core::clone::Clone::clone (99,581,298 samples, 0.41%)</title><rect x="0.0980%" y="245" width="0.4055%" height="15" fill="rgb(247,18,42)" fg:x="24063121" fg:w="99581298"/><text x="0.3480%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (99,581,298 samples, 0.41%)</title><rect x="0.0980%" y="229" width="0.4055%" height="15" fill="rgb(241,131,45)" fg:x="24063121" fg:w="99581298"/><text x="0.3480%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (99,581,298 samples, 0.41%)</title><rect x="0.0980%" y="213" width="0.4055%" height="15" fill="rgb(249,31,29)" fg:x="24063121" fg:w="99581298"/><text x="0.3480%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (99,581,298 samples, 0.41%)</title><rect x="0.0980%" y="197" width="0.4055%" height="15" fill="rgb(225,111,53)" fg:x="24063121" fg:w="99581298"/><text x="0.3480%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (99,581,298 samples, 0.41%)</title><rect x="0.0980%" y="181" width="0.4055%" height="15" fill="rgb(238,160,17)" fg:x="24063121" fg:w="99581298"/><text x="0.3480%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (99,581,298 samples, 0.41%)</title><rect x="0.0980%" y="165" width="0.4055%" height="15" fill="rgb(214,148,48)" fg:x="24063121" fg:w="99581298"/><text x="0.3480%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (99,581,298 samples, 0.41%)</title><rect x="0.0980%" y="149" width="0.4055%" height="15" fill="rgb(232,36,49)" fg:x="24063121" fg:w="99581298"/><text x="0.3480%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (99,581,298 samples, 0.41%)</title><rect x="0.0980%" y="133" width="0.4055%" height="15" fill="rgb(209,103,24)" fg:x="24063121" fg:w="99581298"/><text x="0.3480%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (79,679,181 samples, 0.32%)</title><rect x="0.1790%" y="117" width="0.3245%" height="15" fill="rgb(229,88,8)" fg:x="43965238" fg:w="79679181"/><text x="0.4290%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (79,679,181 samples, 0.32%)</title><rect x="0.1790%" y="101" width="0.3245%" height="15" fill="rgb(213,181,19)" fg:x="43965238" fg:w="79679181"/><text x="0.4290%" y="111.50"></text></g><g><title>alloc::alloc::alloc (79,679,181 samples, 0.32%)</title><rect x="0.1790%" y="85" width="0.3245%" height="15" fill="rgb(254,191,54)" fg:x="43965238" fg:w="79679181"/><text x="0.4290%" y="95.50"></text></g><g><title>malloc (75,655,988 samples, 0.31%)</title><rect x="0.1954%" y="69" width="0.3081%" height="15" fill="rgb(241,83,37)" fg:x="47988431" fg:w="75655988"/><text x="0.4454%" y="79.50"></text></g><g><title>[libc.so.6] (67,649,182 samples, 0.28%)</title><rect x="0.2280%" y="53" width="0.2755%" height="15" fill="rgb(233,36,39)" fg:x="55995237" fg:w="67649182"/><text x="0.4780%" y="63.50"></text></g><g><title>[libc.so.6] (3,889,456 samples, 0.02%)</title><rect x="0.4877%" y="37" width="0.0158%" height="15" fill="rgb(226,3,54)" fg:x="119754963" fg:w="3889456"/><text x="0.7377%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="341" width="0.0654%" height="15" fill="rgb(245,192,40)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="325" width="0.0654%" height="15" fill="rgb(238,167,29)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="309" width="0.0654%" height="15" fill="rgb(232,182,51)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="293" width="0.0654%" height="15" fill="rgb(231,60,39)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="277" width="0.0654%" height="15" fill="rgb(208,69,12)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="261" width="0.0654%" height="15" fill="rgb(235,93,37)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="271.50"></text></g><g><title>alloc::alloc::alloc (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="245" width="0.0654%" height="15" fill="rgb(213,116,39)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="255.50"></text></g><g><title>malloc (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="229" width="0.0654%" height="15" fill="rgb(222,207,29)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="239.50"></text></g><g><title>[libc.so.6] (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="213" width="0.0654%" height="15" fill="rgb(206,96,30)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="223.50"></text></g><g><title>[libc.so.6] (16,071,370 samples, 0.07%)</title><rect x="0.5200%" y="197" width="0.0654%" height="15" fill="rgb(218,138,4)" fg:x="127707749" fg:w="16071370"/><text x="0.7700%" y="207.50"></text></g><g><title>[libc.so.6] (8,036,567 samples, 0.03%)</title><rect x="0.5528%" y="181" width="0.0327%" height="15" fill="rgb(250,191,14)" fg:x="135742552" fg:w="8036567"/><text x="0.8028%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48,102,910 samples, 0.20%)</title><rect x="0.5855%" y="213" width="0.1959%" height="15" fill="rgb(239,60,40)" fg:x="143779119" fg:w="48102910"/><text x="0.8355%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48,102,910 samples, 0.20%)</title><rect x="0.5855%" y="197" width="0.1959%" height="15" fill="rgb(206,27,48)" fg:x="143779119" fg:w="48102910"/><text x="0.8355%" y="207.50"></text></g><g><title>alloc::alloc::alloc (48,102,910 samples, 0.20%)</title><rect x="0.5855%" y="181" width="0.1959%" height="15" fill="rgb(225,35,8)" fg:x="143779119" fg:w="48102910"/><text x="0.8355%" y="191.50"></text></g><g><title>malloc (48,102,910 samples, 0.20%)</title><rect x="0.5855%" y="165" width="0.1959%" height="15" fill="rgb(250,213,24)" fg:x="143779119" fg:w="48102910"/><text x="0.8355%" y="175.50"></text></g><g><title>[libc.so.6] (36,087,829 samples, 0.15%)</title><rect x="0.6344%" y="149" width="0.1470%" height="15" fill="rgb(247,123,22)" fg:x="155794200" fg:w="36087829"/><text x="0.8844%" y="159.50"></text></g><g><title>[libc.so.6] (8,083,878 samples, 0.03%)</title><rect x="0.7485%" y="133" width="0.0329%" height="15" fill="rgb(231,138,38)" fg:x="183798151" fg:w="8083878"/><text x="0.9985%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (52,133,308 samples, 0.21%)</title><rect x="0.5855%" y="277" width="0.2123%" height="15" fill="rgb(231,145,46)" fg:x="143779119" fg:w="52133308"/><text x="0.8355%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (52,133,308 samples, 0.21%)</title><rect x="0.5855%" y="261" width="0.2123%" height="15" fill="rgb(251,118,11)" fg:x="143779119" fg:w="52133308"/><text x="0.8355%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (52,133,308 samples, 0.21%)</title><rect x="0.5855%" y="245" width="0.2123%" height="15" fill="rgb(217,147,25)" fg:x="143779119" fg:w="52133308"/><text x="0.8355%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (52,133,308 samples, 0.21%)</title><rect x="0.5855%" y="229" width="0.2123%" height="15" fill="rgb(247,81,37)" fg:x="143779119" fg:w="52133308"/><text x="0.8355%" y="239.50"></text></g><g><title>alloc::raw_vec::layout_array (4,030,398 samples, 0.02%)</title><rect x="0.7814%" y="213" width="0.0164%" height="15" fill="rgb(209,12,38)" fg:x="191882029" fg:w="4030398"/><text x="1.0314%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::repeat (4,030,398 samples, 0.02%)</title><rect x="0.7814%" y="197" width="0.0164%" height="15" fill="rgb(227,1,9)" fg:x="191882029" fg:w="4030398"/><text x="1.0314%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (76,270,675 samples, 0.31%)</title><rect x="0.5035%" y="389" width="0.3106%" height="15" fill="rgb(248,47,43)" fg:x="123644419" fg:w="76270675"/><text x="0.7535%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (76,270,675 samples, 0.31%)</title><rect x="0.5035%" y="373" width="0.3106%" height="15" fill="rgb(221,10,30)" fg:x="123644419" fg:w="76270675"/><text x="0.7535%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (76,270,675 samples, 0.31%)</title><rect x="0.5035%" y="357" width="0.3106%" height="15" fill="rgb(210,229,1)" fg:x="123644419" fg:w="76270675"/><text x="0.7535%" y="367.50"></text></g><g><title>core::clone::Clone::clone (56,135,975 samples, 0.23%)</title><rect x="0.5855%" y="341" width="0.2286%" height="15" fill="rgb(222,148,37)" fg:x="143779119" fg:w="56135975"/><text x="0.8355%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (56,135,975 samples, 0.23%)</title><rect x="0.5855%" y="325" width="0.2286%" height="15" fill="rgb(234,67,33)" fg:x="143779119" fg:w="56135975"/><text x="0.8355%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (56,135,975 samples, 0.23%)</title><rect x="0.5855%" y="309" width="0.2286%" height="15" fill="rgb(247,98,35)" fg:x="143779119" fg:w="56135975"/><text x="0.8355%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (56,135,975 samples, 0.23%)</title><rect x="0.5855%" y="293" width="0.2286%" height="15" fill="rgb(247,138,52)" fg:x="143779119" fg:w="56135975"/><text x="0.8355%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,002,667 samples, 0.02%)</title><rect x="0.7978%" y="277" width="0.0163%" height="15" fill="rgb(213,79,30)" fg:x="195912427" fg:w="4002667"/><text x="1.0478%" y="287.50"></text></g><g><title>core::ptr::copy_nonoverlapping (4,002,667 samples, 0.02%)</title><rect x="0.7978%" y="261" width="0.0163%" height="15" fill="rgb(246,177,23)" fg:x="195912427" fg:w="4002667"/><text x="1.0478%" y="271.50"></text></g><g><title>[libc.so.6] (4,002,667 samples, 0.02%)</title><rect x="0.7978%" y="245" width="0.0163%" height="15" fill="rgb(230,62,27)" fg:x="195912427" fg:w="4002667"/><text x="1.0478%" y="255.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4,010,203 samples, 0.02%)</title><rect x="0.8468%" y="325" width="0.0163%" height="15" fill="rgb(216,154,8)" fg:x="207944479" fg:w="4010203"/><text x="1.0968%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4,010,203 samples, 0.02%)</title><rect x="0.8468%" y="309" width="0.0163%" height="15" fill="rgb(244,35,45)" fg:x="207944479" fg:w="4010203"/><text x="1.0968%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (8,000,830 samples, 0.03%)</title><rect x="0.8631%" y="325" width="0.0326%" height="15" fill="rgb(251,115,12)" fg:x="211954682" fg:w="8000830"/><text x="1.1131%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (49,990,618 samples, 0.20%)</title><rect x="0.9120%" y="165" width="0.2036%" height="15" fill="rgb(240,54,50)" fg:x="223968384" fg:w="49990618"/><text x="1.1620%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (49,990,618 samples, 0.20%)</title><rect x="0.9120%" y="149" width="0.2036%" height="15" fill="rgb(233,84,52)" fg:x="223968384" fg:w="49990618"/><text x="1.1620%" y="159.50"></text></g><g><title>cfree (46,120,200 samples, 0.19%)</title><rect x="0.9278%" y="133" width="0.1878%" height="15" fill="rgb(207,117,47)" fg:x="227838802" fg:w="46120200"/><text x="1.1778%" y="143.50"></text></g><g><title>[libc.so.6] (6,904,499 samples, 0.03%)</title><rect x="1.0875%" y="117" width="0.0281%" height="15" fill="rgb(249,43,39)" fg:x="267054503" fg:w="6904499"/><text x="1.3375%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (53,976,801 samples, 0.22%)</title><rect x="0.9120%" y="277" width="0.2198%" height="15" fill="rgb(209,38,44)" fg:x="223968384" fg:w="53976801"/><text x="1.1620%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53,976,801 samples, 0.22%)</title><rect x="0.9120%" y="261" width="0.2198%" height="15" fill="rgb(236,212,23)" fg:x="223968384" fg:w="53976801"/><text x="1.1620%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (53,976,801 samples, 0.22%)</title><rect x="0.9120%" y="245" width="0.2198%" height="15" fill="rgb(242,79,21)" fg:x="223968384" fg:w="53976801"/><text x="1.1620%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53,976,801 samples, 0.22%)</title><rect x="0.9120%" y="229" width="0.2198%" height="15" fill="rgb(211,96,35)" fg:x="223968384" fg:w="53976801"/><text x="1.1620%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (53,976,801 samples, 0.22%)</title><rect x="0.9120%" y="213" width="0.2198%" height="15" fill="rgb(253,215,40)" fg:x="223968384" fg:w="53976801"/><text x="1.1620%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53,976,801 samples, 0.22%)</title><rect x="0.9120%" y="197" width="0.2198%" height="15" fill="rgb(211,81,21)" fg:x="223968384" fg:w="53976801"/><text x="1.1620%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (53,976,801 samples, 0.22%)</title><rect x="0.9120%" y="181" width="0.2198%" height="15" fill="rgb(208,190,38)" fg:x="223968384" fg:w="53976801"/><text x="1.1620%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,986,183 samples, 0.02%)</title><rect x="1.1156%" y="165" width="0.0162%" height="15" fill="rgb(235,213,38)" fg:x="273959002" fg:w="3986183"/><text x="1.3656%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,942,953 samples, 0.02%)</title><rect x="1.1318%" y="165" width="0.0161%" height="15" fill="rgb(237,122,38)" fg:x="277945185" fg:w="3942953"/><text x="1.3818%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (3,942,953 samples, 0.02%)</title><rect x="1.1318%" y="149" width="0.0161%" height="15" fill="rgb(244,218,35)" fg:x="277945185" fg:w="3942953"/><text x="1.3818%" y="159.50"></text></g><g><title>cfree (3,942,953 samples, 0.02%)</title><rect x="1.1318%" y="133" width="0.0161%" height="15" fill="rgb(240,68,47)" fg:x="277945185" fg:w="3942953"/><text x="1.3818%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt; (7,969,131 samples, 0.03%)</title><rect x="1.1318%" y="277" width="0.0325%" height="15" fill="rgb(210,16,53)" fg:x="277945185" fg:w="7969131"/><text x="1.3818%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,969,131 samples, 0.03%)</title><rect x="1.1318%" y="261" width="0.0325%" height="15" fill="rgb(235,124,12)" fg:x="277945185" fg:w="7969131"/><text x="1.3818%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u32,alloc::alloc::Global&gt;&gt; (7,969,131 samples, 0.03%)</title><rect x="1.1318%" y="245" width="0.0325%" height="15" fill="rgb(224,169,11)" fg:x="277945185" fg:w="7969131"/><text x="1.3818%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,969,131 samples, 0.03%)</title><rect x="1.1318%" y="229" width="0.0325%" height="15" fill="rgb(250,166,2)" fg:x="277945185" fg:w="7969131"/><text x="1.3818%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (7,969,131 samples, 0.03%)</title><rect x="1.1318%" y="213" width="0.0325%" height="15" fill="rgb(242,216,29)" fg:x="277945185" fg:w="7969131"/><text x="1.3818%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,969,131 samples, 0.03%)</title><rect x="1.1318%" y="197" width="0.0325%" height="15" fill="rgb(230,116,27)" fg:x="277945185" fg:w="7969131"/><text x="1.3818%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,969,131 samples, 0.03%)</title><rect x="1.1318%" y="181" width="0.0325%" height="15" fill="rgb(228,99,48)" fg:x="277945185" fg:w="7969131"/><text x="1.3818%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (4,026,178 samples, 0.02%)</title><rect x="1.1479%" y="165" width="0.0164%" height="15" fill="rgb(253,11,6)" fg:x="281888138" fg:w="4026178"/><text x="1.3979%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70,034,748 samples, 0.29%)</title><rect x="0.8957%" y="309" width="0.2852%" height="15" fill="rgb(247,143,39)" fg:x="219955512" fg:w="70034748"/><text x="1.1457%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70,034,748 samples, 0.29%)</title><rect x="0.8957%" y="293" width="0.2852%" height="15" fill="rgb(236,97,10)" fg:x="219955512" fg:w="70034748"/><text x="1.1457%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (4,075,944 samples, 0.02%)</title><rect x="1.1643%" y="277" width="0.0166%" height="15" fill="rgb(233,208,19)" fg:x="285914316" fg:w="4075944"/><text x="1.4143%" y="287.50"></text></g><g><title>core::ptr::read (4,075,944 samples, 0.02%)</title><rect x="1.1643%" y="261" width="0.0166%" height="15" fill="rgb(216,164,2)" fg:x="285914316" fg:w="4075944"/><text x="1.4143%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,059,080 samples, 0.02%)</title><rect x="1.1809%" y="309" width="0.0165%" height="15" fill="rgb(220,129,5)" fg:x="289990260" fg:w="4059080"/><text x="1.4309%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,059,080 samples, 0.02%)</title><rect x="1.1809%" y="293" width="0.0165%" height="15" fill="rgb(242,17,10)" fg:x="289990260" fg:w="4059080"/><text x="1.4309%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4,059,080 samples, 0.02%)</title><rect x="1.1809%" y="277" width="0.0165%" height="15" fill="rgb(242,107,0)" fg:x="289990260" fg:w="4059080"/><text x="1.4309%" y="287.50"></text></g><g><title>img::png::deflate::prefix_table::get_cl_codes_for_code_lengths::_{{closure}} (4,059,080 samples, 0.02%)</title><rect x="1.1809%" y="261" width="0.0165%" height="15" fill="rgb(251,28,31)" fg:x="289990260" fg:w="4059080"/><text x="1.4309%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4,059,080 samples, 0.02%)</title><rect x="1.1809%" y="245" width="0.0165%" height="15" fill="rgb(233,223,10)" fg:x="289990260" fg:w="4059080"/><text x="1.4309%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4,059,080 samples, 0.02%)</title><rect x="1.1809%" y="229" width="0.0165%" height="15" fill="rgb(215,21,27)" fg:x="289990260" fg:w="4059080"/><text x="1.4309%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4,059,080 samples, 0.02%)</title><rect x="1.1809%" y="213" width="0.0165%" height="15" fill="rgb(232,23,21)" fg:x="289990260" fg:w="4059080"/><text x="1.4309%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (4,059,080 samples, 0.02%)</title><rect x="1.1809%" y="197" width="0.0165%" height="15" fill="rgb(244,5,23)" fg:x="289990260" fg:w="4059080"/><text x="1.4309%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,949,019 samples, 0.02%)</title><rect x="1.2137%" y="277" width="0.0161%" height="15" fill="rgb(226,81,46)" fg:x="298043475" fg:w="3949019"/><text x="1.4637%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,942,230 samples, 0.03%)</title><rect x="1.2137%" y="293" width="0.0323%" height="15" fill="rgb(247,70,30)" fg:x="298043475" fg:w="7942230"/><text x="1.4637%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,993,211 samples, 0.02%)</title><rect x="1.2298%" y="277" width="0.0163%" height="15" fill="rgb(212,68,19)" fg:x="301992494" fg:w="3993211"/><text x="1.4798%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (3,993,211 samples, 0.02%)</title><rect x="1.2298%" y="261" width="0.0163%" height="15" fill="rgb(240,187,13)" fg:x="301992494" fg:w="3993211"/><text x="1.4798%" y="271.50"></text></g><g><title>core::ptr::read (3,993,211 samples, 0.02%)</title><rect x="1.2298%" y="245" width="0.0163%" height="15" fill="rgb(223,113,26)" fg:x="301992494" fg:w="3993211"/><text x="1.4798%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7,146,588 samples, 0.03%)</title><rect x="1.2460%" y="293" width="0.0291%" height="15" fill="rgb(206,192,2)" fg:x="305985705" fg:w="7146588"/><text x="1.4960%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (7,146,588 samples, 0.03%)</title><rect x="1.2460%" y="277" width="0.0291%" height="15" fill="rgb(241,108,4)" fg:x="305985705" fg:w="7146588"/><text x="1.4960%" y="287.50"></text></g><g><title>core::ptr::write (7,146,588 samples, 0.03%)</title><rect x="1.2460%" y="261" width="0.0291%" height="15" fill="rgb(247,173,49)" fg:x="305985705" fg:w="7146588"/><text x="1.4960%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (71,811,232 samples, 0.29%)</title><rect x="1.2751%" y="293" width="0.2924%" height="15" fill="rgb(224,114,35)" fg:x="313132293" fg:w="71811232"/><text x="1.5251%" y="303.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (71,811,232 samples, 0.29%)</title><rect x="1.2751%" y="277" width="0.2924%" height="15" fill="rgb(245,159,27)" fg:x="313132293" fg:w="71811232"/><text x="1.5251%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (71,811,232 samples, 0.29%)</title><rect x="1.2751%" y="261" width="0.2924%" height="15" fill="rgb(245,172,44)" fg:x="313132293" fg:w="71811232"/><text x="1.5251%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (71,811,232 samples, 0.29%)</title><rect x="1.2751%" y="245" width="0.2924%" height="15" fill="rgb(236,23,11)" fg:x="313132293" fg:w="71811232"/><text x="1.5251%" y="255.50"></text></g><g><title>core::ptr::copy (71,811,232 samples, 0.29%)</title><rect x="1.2751%" y="229" width="0.2924%" height="15" fill="rgb(205,117,38)" fg:x="313132293" fg:w="71811232"/><text x="1.5251%" y="239.50"></text></g><g><title>[libc.so.6] (71,811,232 samples, 0.29%)</title><rect x="1.2751%" y="213" width="0.2924%" height="15" fill="rgb(237,72,25)" fg:x="313132293" fg:w="71811232"/><text x="1.5251%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (181,043,467 samples, 0.74%)</title><rect x="0.8468%" y="357" width="0.7372%" height="15" fill="rgb(244,70,9)" fg:x="207944479" fg:w="181043467"/><text x="1.0968%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (181,043,467 samples, 0.74%)</title><rect x="0.8468%" y="341" width="0.7372%" height="15" fill="rgb(217,125,39)" fg:x="207944479" fg:w="181043467"/><text x="1.0968%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (169,032,434 samples, 0.69%)</title><rect x="0.8957%" y="325" width="0.6883%" height="15" fill="rgb(235,36,10)" fg:x="219955512" fg:w="169032434"/><text x="1.1457%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (94,938,606 samples, 0.39%)</title><rect x="1.1974%" y="309" width="0.3866%" height="15" fill="rgb(251,123,47)" fg:x="294049340" fg:w="94938606"/><text x="1.4474%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (4,044,421 samples, 0.02%)</title><rect x="1.5676%" y="293" width="0.0165%" height="15" fill="rgb(221,13,13)" fg:x="384943525" fg:w="4044421"/><text x="1.8176%" y="303.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,044,421 samples, 0.02%)</title><rect x="1.5676%" y="277" width="0.0165%" height="15" fill="rgb(238,131,9)" fg:x="384943525" fg:w="4044421"/><text x="1.8176%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u32&gt;,u32),alloc::alloc::Global&gt;&gt; (4,044,421 samples, 0.02%)</title><rect x="1.5676%" y="261" width="0.0165%" height="15" fill="rgb(211,50,8)" fg:x="384943525" fg:w="4044421"/><text x="1.8176%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,044,421 samples, 0.02%)</title><rect x="1.5676%" y="245" width="0.0165%" height="15" fill="rgb(245,182,24)" fg:x="384943525" fg:w="4044421"/><text x="1.8176%" y="255.50"></text></g><g><title>core::ptr::copy (4,044,421 samples, 0.02%)</title><rect x="1.5676%" y="229" width="0.0165%" height="15" fill="rgb(242,14,37)" fg:x="384943525" fg:w="4044421"/><text x="1.8176%" y="239.50"></text></g><g><title>[libc.so.6] (4,044,421 samples, 0.02%)</title><rect x="1.5676%" y="213" width="0.0165%" height="15" fill="rgb(246,228,12)" fg:x="384943525" fg:w="4044421"/><text x="1.8176%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40,101,585 samples, 0.16%)</title><rect x="1.6025%" y="277" width="0.1633%" height="15" fill="rgb(213,55,15)" fg:x="393522394" fg:w="40101585"/><text x="1.8525%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40,101,585 samples, 0.16%)</title><rect x="1.6025%" y="261" width="0.1633%" height="15" fill="rgb(209,9,3)" fg:x="393522394" fg:w="40101585"/><text x="1.8525%" y="271.50"></text></g><g><title>alloc::alloc::alloc (40,101,585 samples, 0.16%)</title><rect x="1.6025%" y="245" width="0.1633%" height="15" fill="rgb(230,59,30)" fg:x="393522394" fg:w="40101585"/><text x="1.8525%" y="255.50"></text></g><g><title>malloc (40,101,585 samples, 0.16%)</title><rect x="1.6025%" y="229" width="0.1633%" height="15" fill="rgb(209,121,21)" fg:x="393522394" fg:w="40101585"/><text x="1.8525%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (237,663,986 samples, 0.97%)</title><rect x="0.8141%" y="389" width="0.9678%" height="15" fill="rgb(220,109,13)" fg:x="199915094" fg:w="237663986"/><text x="1.0641%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (233,646,961 samples, 0.95%)</title><rect x="0.8304%" y="373" width="0.9515%" height="15" fill="rgb(232,18,1)" fg:x="203932119" fg:w="233646961"/><text x="1.0804%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (48,089,630 samples, 0.20%)</title><rect x="1.5861%" y="357" width="0.1958%" height="15" fill="rgb(215,41,42)" fg:x="389489450" fg:w="48089630"/><text x="1.8361%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (48,089,630 samples, 0.20%)</title><rect x="1.5861%" y="341" width="0.1958%" height="15" fill="rgb(224,123,36)" fg:x="389489450" fg:w="48089630"/><text x="1.8361%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (48,089,630 samples, 0.20%)</title><rect x="1.5861%" y="325" width="0.1958%" height="15" fill="rgb(240,125,3)" fg:x="389489450" fg:w="48089630"/><text x="1.8361%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (48,089,630 samples, 0.20%)</title><rect x="1.5861%" y="309" width="0.1958%" height="15" fill="rgb(205,98,50)" fg:x="389489450" fg:w="48089630"/><text x="1.8361%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (48,089,630 samples, 0.20%)</title><rect x="1.5861%" y="293" width="0.1958%" height="15" fill="rgb(205,185,37)" fg:x="389489450" fg:w="48089630"/><text x="1.8361%" y="303.50"></text></g><g><title>alloc::raw_vec::layout_array (3,955,101 samples, 0.02%)</title><rect x="1.7658%" y="277" width="0.0161%" height="15" fill="rgb(238,207,15)" fg:x="433623979" fg:w="3955101"/><text x="2.0158%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3,955,101 samples, 0.02%)</title><rect x="1.7658%" y="261" width="0.0161%" height="15" fill="rgb(213,199,42)" fg:x="433623979" fg:w="3955101"/><text x="2.0158%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,018,037 samples, 0.02%)</title><rect x="1.7819%" y="389" width="0.0164%" height="15" fill="rgb(235,201,11)" fg:x="437579080" fg:w="4018037"/><text x="2.0319%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4,018,037 samples, 0.02%)</title><rect x="1.7819%" y="373" width="0.0164%" height="15" fill="rgb(207,46,11)" fg:x="437579080" fg:w="4018037"/><text x="2.0319%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths::_{{closure}} (4,018,037 samples, 0.02%)</title><rect x="1.7819%" y="357" width="0.0164%" height="15" fill="rgb(241,35,35)" fg:x="437579080" fg:w="4018037"/><text x="2.0319%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (4,018,037 samples, 0.02%)</title><rect x="1.7819%" y="341" width="0.0164%" height="15" fill="rgb(243,32,47)" fg:x="437579080" fg:w="4018037"/><text x="2.0319%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,018,037 samples, 0.02%)</title><rect x="1.7819%" y="325" width="0.0164%" height="15" fill="rgb(247,202,23)" fg:x="437579080" fg:w="4018037"/><text x="2.0319%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,018,037 samples, 0.02%)</title><rect x="1.7819%" y="309" width="0.0164%" height="15" fill="rgb(219,102,11)" fg:x="437579080" fg:w="4018037"/><text x="2.0319%" y="319.50"></text></g><g><title>alloc::alloc::alloc (4,018,037 samples, 0.02%)</title><rect x="1.7819%" y="293" width="0.0164%" height="15" fill="rgb(243,110,44)" fg:x="437579080" fg:w="4018037"/><text x="2.0319%" y="303.50"></text></g><g><title>malloc (4,018,037 samples, 0.02%)</title><rect x="1.7819%" y="277" width="0.0164%" height="15" fill="rgb(222,74,54)" fg:x="437579080" fg:w="4018037"/><text x="2.0319%" y="287.50"></text></g><g><title>[libc.so.6] (4,018,037 samples, 0.02%)</title><rect x="1.7819%" y="261" width="0.0164%" height="15" fill="rgb(216,99,12)" fg:x="437579080" fg:w="4018037"/><text x="2.0319%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,045,254 samples, 0.02%)</title><rect x="1.8003%" y="389" width="0.0165%" height="15" fill="rgb(226,22,26)" fg:x="442098621" fg:w="4045254"/><text x="2.0503%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,045,254 samples, 0.02%)</title><rect x="1.8003%" y="373" width="0.0165%" height="15" fill="rgb(217,163,10)" fg:x="442098621" fg:w="4045254"/><text x="2.0503%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,045,254 samples, 0.02%)</title><rect x="1.8003%" y="357" width="0.0165%" height="15" fill="rgb(213,25,53)" fg:x="442098621" fg:w="4045254"/><text x="2.0503%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (4,045,254 samples, 0.02%)</title><rect x="1.8003%" y="341" width="0.0165%" height="15" fill="rgb(252,105,26)" fg:x="442098621" fg:w="4045254"/><text x="2.0503%" y="351.50"></text></g><g><title>core::ptr::copy_nonoverlapping (4,045,254 samples, 0.02%)</title><rect x="1.8003%" y="325" width="0.0165%" height="15" fill="rgb(220,39,43)" fg:x="442098621" fg:w="4045254"/><text x="2.0503%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,973,225 samples, 0.02%)</title><rect x="1.8168%" y="389" width="0.0162%" height="15" fill="rgb(229,68,48)" fg:x="446143875" fg:w="3973225"/><text x="2.0668%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,973,225 samples, 0.02%)</title><rect x="1.8168%" y="373" width="0.0162%" height="15" fill="rgb(252,8,32)" fg:x="446143875" fg:w="3973225"/><text x="2.0668%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,973,225 samples, 0.02%)</title><rect x="1.8168%" y="357" width="0.0162%" height="15" fill="rgb(223,20,43)" fg:x="446143875" fg:w="3973225"/><text x="2.0668%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,973,225 samples, 0.02%)</title><rect x="1.8168%" y="341" width="0.0162%" height="15" fill="rgb(229,81,49)" fg:x="446143875" fg:w="3973225"/><text x="2.0668%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,973,225 samples, 0.02%)</title><rect x="1.8168%" y="325" width="0.0162%" height="15" fill="rgb(236,28,36)" fg:x="446143875" fg:w="3973225"/><text x="2.0668%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,973,225 samples, 0.02%)</title><rect x="1.8168%" y="309" width="0.0162%" height="15" fill="rgb(249,185,26)" fg:x="446143875" fg:w="3973225"/><text x="2.0668%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,973,225 samples, 0.02%)</title><rect x="1.8168%" y="293" width="0.0162%" height="15" fill="rgb(249,174,33)" fg:x="446143875" fg:w="3973225"/><text x="2.0668%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,979,760 samples, 0.02%)</title><rect x="1.8330%" y="373" width="0.0162%" height="15" fill="rgb(233,201,37)" fg:x="450117100" fg:w="3979760"/><text x="2.0830%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,979,760 samples, 0.02%)</title><rect x="1.8330%" y="357" width="0.0162%" height="15" fill="rgb(221,78,26)" fg:x="450117100" fg:w="3979760"/><text x="2.0830%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,979,760 samples, 0.02%)</title><rect x="1.8330%" y="341" width="0.0162%" height="15" fill="rgb(250,127,30)" fg:x="450117100" fg:w="3979760"/><text x="2.0830%" y="351.50"></text></g><g><title>core::clone::Clone::clone (3,979,760 samples, 0.02%)</title><rect x="1.8330%" y="325" width="0.0162%" height="15" fill="rgb(230,49,44)" fg:x="450117100" fg:w="3979760"/><text x="2.0830%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,979,760 samples, 0.02%)</title><rect x="1.8330%" y="309" width="0.0162%" height="15" fill="rgb(229,67,23)" fg:x="450117100" fg:w="3979760"/><text x="2.0830%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,979,760 samples, 0.02%)</title><rect x="1.8330%" y="293" width="0.0162%" height="15" fill="rgb(249,83,47)" fg:x="450117100" fg:w="3979760"/><text x="2.0830%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,979,760 samples, 0.02%)</title><rect x="1.8330%" y="277" width="0.0162%" height="15" fill="rgb(215,43,3)" fg:x="450117100" fg:w="3979760"/><text x="2.0830%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,979,760 samples, 0.02%)</title><rect x="1.8330%" y="261" width="0.0162%" height="15" fill="rgb(238,154,13)" fg:x="450117100" fg:w="3979760"/><text x="2.0830%" y="271.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,979,760 samples, 0.02%)</title><rect x="1.8330%" y="245" width="0.0162%" height="15" fill="rgb(219,56,2)" fg:x="450117100" fg:w="3979760"/><text x="2.0830%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,010,920 samples, 0.02%)</title><rect x="1.9150%" y="309" width="0.0163%" height="15" fill="rgb(233,0,4)" fg:x="470265063" fg:w="4010920"/><text x="2.1650%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,010,920 samples, 0.02%)</title><rect x="1.9150%" y="293" width="0.0163%" height="15" fill="rgb(235,30,7)" fg:x="470265063" fg:w="4010920"/><text x="2.1650%" y="303.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (4,010,920 samples, 0.02%)</title><rect x="1.9150%" y="277" width="0.0163%" height="15" fill="rgb(250,79,13)" fg:x="470265063" fg:w="4010920"/><text x="2.1650%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4,010,920 samples, 0.02%)</title><rect x="1.9150%" y="261" width="0.0163%" height="15" fill="rgb(211,146,34)" fg:x="470265063" fg:w="4010920"/><text x="2.1650%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,010,920 samples, 0.02%)</title><rect x="1.9150%" y="245" width="0.0163%" height="15" fill="rgb(228,22,38)" fg:x="470265063" fg:w="4010920"/><text x="2.1650%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (12,127,764 samples, 0.05%)</title><rect x="1.8985%" y="325" width="0.0494%" height="15" fill="rgb(235,168,5)" fg:x="466203676" fg:w="12127764"/><text x="2.1485%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4,055,457 samples, 0.02%)</title><rect x="1.9313%" y="309" width="0.0165%" height="15" fill="rgb(221,155,16)" fg:x="474275983" fg:w="4055457"/><text x="2.1813%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4,055,457 samples, 0.02%)</title><rect x="1.9313%" y="293" width="0.0165%" height="15" fill="rgb(215,215,53)" fg:x="474275983" fg:w="4055457"/><text x="2.1813%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (4,055,457 samples, 0.02%)</title><rect x="1.9313%" y="277" width="0.0165%" height="15" fill="rgb(223,4,10)" fg:x="474275983" fg:w="4055457"/><text x="2.1813%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,994,470 samples, 0.02%)</title><rect x="1.9479%" y="261" width="0.0163%" height="15" fill="rgb(234,103,6)" fg:x="478331440" fg:w="3994470"/><text x="2.1979%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (3,994,470 samples, 0.02%)</title><rect x="1.9479%" y="245" width="0.0163%" height="15" fill="rgb(227,97,0)" fg:x="478331440" fg:w="3994470"/><text x="2.1979%" y="255.50"></text></g><g><title>core::ptr::write (3,994,470 samples, 0.02%)</title><rect x="1.9479%" y="229" width="0.0163%" height="15" fill="rgb(234,150,53)" fg:x="478331440" fg:w="3994470"/><text x="2.1979%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (32,094,513 samples, 0.13%)</title><rect x="1.8985%" y="341" width="0.1307%" height="15" fill="rgb(228,201,54)" fg:x="466203676" fg:w="32094513"/><text x="2.1485%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (19,966,749 samples, 0.08%)</title><rect x="1.9479%" y="325" width="0.0813%" height="15" fill="rgb(222,22,37)" fg:x="478331440" fg:w="19966749"/><text x="2.1979%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (19,966,749 samples, 0.08%)</title><rect x="1.9479%" y="309" width="0.0813%" height="15" fill="rgb(237,53,32)" fg:x="478331440" fg:w="19966749"/><text x="2.1979%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19,966,749 samples, 0.08%)</title><rect x="1.9479%" y="293" width="0.0813%" height="15" fill="rgb(233,25,53)" fg:x="478331440" fg:w="19966749"/><text x="2.1979%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19,966,749 samples, 0.08%)</title><rect x="1.9479%" y="277" width="0.0813%" height="15" fill="rgb(210,40,34)" fg:x="478331440" fg:w="19966749"/><text x="2.1979%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="261" width="0.0650%" height="15" fill="rgb(241,220,44)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="245" width="0.0650%" height="15" fill="rgb(235,28,35)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="229" width="0.0650%" height="15" fill="rgb(210,56,17)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="213" width="0.0650%" height="15" fill="rgb(224,130,29)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="197" width="0.0650%" height="15" fill="rgb(235,212,8)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="181" width="0.0650%" height="15" fill="rgb(223,33,50)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="165" width="0.0650%" height="15" fill="rgb(219,149,13)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="149" width="0.0650%" height="15" fill="rgb(250,156,29)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="133" width="0.0650%" height="15" fill="rgb(216,193,19)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="143.50"></text></g><g><title>cfree (15,972,279 samples, 0.07%)</title><rect x="1.9641%" y="117" width="0.0650%" height="15" fill="rgb(216,135,14)" fg:x="482325910" fg:w="15972279"/><text x="2.2141%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48,206,755 samples, 0.20%)</title><rect x="1.8492%" y="373" width="0.1963%" height="15" fill="rgb(241,47,5)" fg:x="454096860" fg:w="48206755"/><text x="2.0992%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (40,164,345 samples, 0.16%)</title><rect x="1.8819%" y="357" width="0.1636%" height="15" fill="rgb(233,42,35)" fg:x="462139270" fg:w="40164345"/><text x="2.1319%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4,005,426 samples, 0.02%)</title><rect x="2.0292%" y="341" width="0.0163%" height="15" fill="rgb(231,13,6)" fg:x="498298189" fg:w="4005426"/><text x="2.2792%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,992,173 samples, 0.07%)</title><rect x="2.0455%" y="373" width="0.0651%" height="15" fill="rgb(207,181,40)" fg:x="502303615" fg:w="15992173"/><text x="2.2955%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (15,992,173 samples, 0.07%)</title><rect x="2.0455%" y="357" width="0.0651%" height="15" fill="rgb(254,173,49)" fg:x="502303615" fg:w="15992173"/><text x="2.2955%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths::_{{closure}} (15,992,173 samples, 0.07%)</title><rect x="2.0455%" y="341" width="0.0651%" height="15" fill="rgb(221,1,38)" fg:x="502303615" fg:w="15992173"/><text x="2.2955%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (15,992,173 samples, 0.07%)</title><rect x="2.0455%" y="325" width="0.0651%" height="15" fill="rgb(206,124,46)" fg:x="502303615" fg:w="15992173"/><text x="2.2955%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (15,992,173 samples, 0.07%)</title><rect x="2.0455%" y="309" width="0.0651%" height="15" fill="rgb(249,21,11)" fg:x="502303615" fg:w="15992173"/><text x="2.2955%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (15,992,173 samples, 0.07%)</title><rect x="2.0455%" y="293" width="0.0651%" height="15" fill="rgb(222,201,40)" fg:x="502303615" fg:w="15992173"/><text x="2.2955%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,992,173 samples, 0.07%)</title><rect x="2.0455%" y="277" width="0.0651%" height="15" fill="rgb(235,61,29)" fg:x="502303615" fg:w="15992173"/><text x="2.2955%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,992,173 samples, 0.07%)</title><rect x="2.0455%" y="261" width="0.0651%" height="15" fill="rgb(219,207,3)" fg:x="502303615" fg:w="15992173"/><text x="2.2955%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12,004,769 samples, 0.05%)</title><rect x="2.0617%" y="245" width="0.0489%" height="15" fill="rgb(222,56,46)" fg:x="506291019" fg:w="12004769"/><text x="2.3117%" y="255.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (12,004,769 samples, 0.05%)</title><rect x="2.0617%" y="229" width="0.0489%" height="15" fill="rgb(239,76,54)" fg:x="506291019" fg:w="12004769"/><text x="2.3117%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (49,478,651 samples, 0.20%)</title><rect x="2.1106%" y="373" width="0.2015%" height="15" fill="rgb(231,124,27)" fg:x="518295788" fg:w="49478651"/><text x="2.3606%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (39,873,724 samples, 0.16%)</title><rect x="2.1497%" y="357" width="0.1624%" height="15" fill="rgb(249,195,6)" fg:x="527900715" fg:w="39873724"/><text x="2.3997%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (39,873,724 samples, 0.16%)</title><rect x="2.1497%" y="341" width="0.1624%" height="15" fill="rgb(237,174,47)" fg:x="527900715" fg:w="39873724"/><text x="2.3997%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (23,866,811 samples, 0.10%)</title><rect x="2.2149%" y="325" width="0.0972%" height="15" fill="rgb(206,201,31)" fg:x="543907628" fg:w="23866811"/><text x="2.4649%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (12,007,655 samples, 0.05%)</title><rect x="2.2632%" y="309" width="0.0489%" height="15" fill="rgb(231,57,52)" fg:x="555766784" fg:w="12007655"/><text x="2.5132%" y="319.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3,988,392 samples, 0.02%)</title><rect x="2.3121%" y="325" width="0.0162%" height="15" fill="rgb(248,177,22)" fg:x="567774439" fg:w="3988392"/><text x="2.5621%" y="335.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (3,988,392 samples, 0.02%)</title><rect x="2.3121%" y="309" width="0.0162%" height="15" fill="rgb(215,211,37)" fg:x="567774439" fg:w="3988392"/><text x="2.5621%" y="319.50"></text></g><g><title>core::ptr::read (3,988,392 samples, 0.02%)</title><rect x="2.3121%" y="293" width="0.0162%" height="15" fill="rgb(241,128,51)" fg:x="567774439" fg:w="3988392"/><text x="2.5621%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,518,529 samples, 0.01%)</title><rect x="2.3283%" y="325" width="0.0143%" height="15" fill="rgb(227,165,31)" fg:x="571762831" fg:w="3518529"/><text x="2.5783%" y="335.50"></text></g><g><title>[img] (19,237,867 samples, 0.08%)</title><rect x="2.3121%" y="373" width="0.0783%" height="15" fill="rgb(228,167,24)" fg:x="567774439" fg:w="19237867"/><text x="2.5621%" y="383.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (19,237,867 samples, 0.08%)</title><rect x="2.3121%" y="357" width="0.0783%" height="15" fill="rgb(228,143,12)" fg:x="567774439" fg:w="19237867"/><text x="2.5621%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (19,237,867 samples, 0.08%)</title><rect x="2.3121%" y="341" width="0.0783%" height="15" fill="rgb(249,149,8)" fg:x="567774439" fg:w="19237867"/><text x="2.5621%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="325" width="0.0478%" height="15" fill="rgb(243,35,44)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="309" width="0.0478%" height="15" fill="rgb(246,89,9)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="293" width="0.0478%" height="15" fill="rgb(233,213,13)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="277" width="0.0478%" height="15" fill="rgb(233,141,41)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="261" width="0.0478%" height="15" fill="rgb(239,167,4)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="245" width="0.0478%" height="15" fill="rgb(209,217,16)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="229" width="0.0478%" height="15" fill="rgb(219,88,35)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="213" width="0.0478%" height="15" fill="rgb(220,193,23)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="197" width="0.0478%" height="15" fill="rgb(230,90,52)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="181" width="0.0478%" height="15" fill="rgb(252,106,19)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="191.50"></text></g><g><title>cfree (11,730,946 samples, 0.05%)</title><rect x="2.3426%" y="165" width="0.0478%" height="15" fill="rgb(206,74,20)" fg:x="575281360" fg:w="11730946"/><text x="2.5926%" y="175.50"></text></g><g><title>[libc.so.6] (3,949,467 samples, 0.02%)</title><rect x="2.3904%" y="373" width="0.0161%" height="15" fill="rgb(230,138,44)" fg:x="587012306" fg:w="3949467"/><text x="2.6404%" y="383.50"></text></g><g><title>[unknown] (3,985,637 samples, 0.02%)</title><rect x="2.4065%" y="373" width="0.0162%" height="15" fill="rgb(235,182,43)" fg:x="590961773" fg:w="3985637"/><text x="2.6565%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (3,985,637 samples, 0.02%)</title><rect x="2.4065%" y="357" width="0.0162%" height="15" fill="rgb(242,16,51)" fg:x="590961773" fg:w="3985637"/><text x="2.6565%" y="367.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (3,985,637 samples, 0.02%)</title><rect x="2.4065%" y="341" width="0.0162%" height="15" fill="rgb(248,9,4)" fg:x="590961773" fg:w="3985637"/><text x="2.6565%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3,985,637 samples, 0.02%)</title><rect x="2.4065%" y="325" width="0.0162%" height="15" fill="rgb(210,31,22)" fg:x="590961773" fg:w="3985637"/><text x="2.6565%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,985,637 samples, 0.02%)</title><rect x="2.4065%" y="309" width="0.0162%" height="15" fill="rgb(239,54,39)" fg:x="590961773" fg:w="3985637"/><text x="2.6565%" y="319.50"></text></g><g><title>__rustc::__rust_dealloc (4,072,806 samples, 0.02%)</title><rect x="2.4227%" y="373" width="0.0166%" height="15" fill="rgb(230,99,41)" fg:x="594947410" fg:w="4072806"/><text x="2.6727%" y="383.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (3,923,517 samples, 0.02%)</title><rect x="2.4393%" y="373" width="0.0160%" height="15" fill="rgb(253,106,12)" fg:x="599020216" fg:w="3923517"/><text x="2.6893%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (12,044,845 samples, 0.05%)</title><rect x="2.4553%" y="373" width="0.0490%" height="15" fill="rgb(213,46,41)" fg:x="602943733" fg:w="12044845"/><text x="2.7053%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12,044,845 samples, 0.05%)</title><rect x="2.4553%" y="357" width="0.0490%" height="15" fill="rgb(215,133,35)" fg:x="602943733" fg:w="12044845"/><text x="2.7053%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12,044,845 samples, 0.05%)</title><rect x="2.4553%" y="341" width="0.0490%" height="15" fill="rgb(213,28,5)" fg:x="602943733" fg:w="12044845"/><text x="2.7053%" y="351.50"></text></g><g><title>alloc::alloc::realloc (12,044,845 samples, 0.05%)</title><rect x="2.4553%" y="325" width="0.0490%" height="15" fill="rgb(215,77,49)" fg:x="602943733" fg:w="12044845"/><text x="2.7053%" y="335.50"></text></g><g><title>realloc (12,044,845 samples, 0.05%)</title><rect x="2.4553%" y="309" width="0.0490%" height="15" fill="rgb(248,100,22)" fg:x="602943733" fg:w="12044845"/><text x="2.7053%" y="319.50"></text></g><g><title>[libc.so.6] (12,044,845 samples, 0.05%)</title><rect x="2.4553%" y="293" width="0.0490%" height="15" fill="rgb(208,67,9)" fg:x="602943733" fg:w="12044845"/><text x="2.7053%" y="303.50"></text></g><g><title>[libc.so.6] (8,013,334 samples, 0.03%)</title><rect x="2.4717%" y="277" width="0.0326%" height="15" fill="rgb(219,133,21)" fg:x="606975244" fg:w="8013334"/><text x="2.7217%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,014,427 samples, 0.02%)</title><rect x="2.6009%" y="293" width="0.0163%" height="15" fill="rgb(246,46,29)" fg:x="638703674" fg:w="4014427"/><text x="2.8509%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17,192,683 samples, 0.07%)</title><rect x="2.6009%" y="309" width="0.0700%" height="15" fill="rgb(246,185,52)" fg:x="638703674" fg:w="17192683"/><text x="2.8509%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13,178,256 samples, 0.05%)</title><rect x="2.6173%" y="293" width="0.0537%" height="15" fill="rgb(252,136,11)" fg:x="642718101" fg:w="13178256"/><text x="2.8673%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (82,440,262 samples, 0.34%)</title><rect x="2.5368%" y="357" width="0.3357%" height="15" fill="rgb(219,138,53)" fg:x="622962471" fg:w="82440262"/><text x="2.7868%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (82,440,262 samples, 0.34%)</title><rect x="2.5368%" y="341" width="0.3357%" height="15" fill="rgb(211,51,23)" fg:x="622962471" fg:w="82440262"/><text x="2.7868%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (82,440,262 samples, 0.34%)</title><rect x="2.5368%" y="325" width="0.3357%" height="15" fill="rgb(247,221,28)" fg:x="622962471" fg:w="82440262"/><text x="2.7868%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (49,506,376 samples, 0.20%)</title><rect x="2.6709%" y="309" width="0.2016%" height="15" fill="rgb(251,222,45)" fg:x="655896357" fg:w="49506376"/><text x="2.9209%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (27,857,361 samples, 0.11%)</title><rect x="2.7591%" y="293" width="0.1134%" height="15" fill="rgb(217,162,53)" fg:x="677545372" fg:w="27857361"/><text x="3.0091%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (20,113,026 samples, 0.08%)</title><rect x="2.8725%" y="357" width="0.0819%" height="15" fill="rgb(229,93,14)" fg:x="705402733" fg:w="20113026"/><text x="3.1225%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (16,189,435 samples, 0.07%)</title><rect x="2.8885%" y="341" width="0.0659%" height="15" fill="rgb(209,67,49)" fg:x="709326324" fg:w="16189435"/><text x="3.1385%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (16,189,435 samples, 0.07%)</title><rect x="2.8885%" y="325" width="0.0659%" height="15" fill="rgb(213,87,29)" fg:x="709326324" fg:w="16189435"/><text x="3.1385%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (16,189,435 samples, 0.07%)</title><rect x="2.8885%" y="309" width="0.0659%" height="15" fill="rgb(205,151,52)" fg:x="709326324" fg:w="16189435"/><text x="3.1385%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (114,487,619 samples, 0.47%)</title><rect x="2.5043%" y="373" width="0.4662%" height="15" fill="rgb(253,215,39)" fg:x="614988578" fg:w="114487619"/><text x="2.7543%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,960,438 samples, 0.02%)</title><rect x="2.9544%" y="357" width="0.0161%" height="15" fill="rgb(221,220,41)" fg:x="725515759" fg:w="3960438"/><text x="3.2044%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (3,960,438 samples, 0.02%)</title><rect x="2.9544%" y="341" width="0.0161%" height="15" fill="rgb(218,133,21)" fg:x="725515759" fg:w="3960438"/><text x="3.2044%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u16 (3,960,438 samples, 0.02%)</title><rect x="2.9544%" y="325" width="0.0161%" height="15" fill="rgb(221,193,43)" fg:x="725515759" fg:w="3960438"/><text x="3.2044%" y="335.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (3,960,438 samples, 0.02%)</title><rect x="2.9544%" y="309" width="0.0161%" height="15" fill="rgb(240,128,52)" fg:x="725515759" fg:w="3960438"/><text x="3.2044%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (2,553,649 samples, 0.01%)</title><rect x="2.9706%" y="373" width="0.0104%" height="15" fill="rgb(253,114,12)" fg:x="729476197" fg:w="2553649"/><text x="3.2206%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (2,553,649 samples, 0.01%)</title><rect x="2.9706%" y="357" width="0.0104%" height="15" fill="rgb(215,223,47)" fg:x="729476197" fg:w="2553649"/><text x="3.2206%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (3,313,201 samples, 0.01%)</title><rect x="2.9810%" y="357" width="0.0135%" height="15" fill="rgb(248,225,23)" fg:x="732029846" fg:w="3313201"/><text x="3.2310%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,313,201 samples, 0.01%)</title><rect x="2.9810%" y="341" width="0.0135%" height="15" fill="rgb(250,108,0)" fg:x="732029846" fg:w="3313201"/><text x="3.2310%" y="351.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (3,313,201 samples, 0.01%)</title><rect x="2.9810%" y="325" width="0.0135%" height="15" fill="rgb(228,208,7)" fg:x="732029846" fg:w="3313201"/><text x="3.2310%" y="335.50"></text></g><g><title>img::png::deflate::huffman::construct_canonical_tree_from_lengths::_{{closure}} (3,313,201 samples, 0.01%)</title><rect x="2.9810%" y="309" width="0.0135%" height="15" fill="rgb(244,45,10)" fg:x="732029846" fg:w="3313201"/><text x="3.2310%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (11,259,170 samples, 0.05%)</title><rect x="2.9810%" y="373" width="0.0458%" height="15" fill="rgb(207,125,25)" fg:x="732029846" fg:w="11259170"/><text x="3.2310%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (7,945,969 samples, 0.03%)</title><rect x="2.9944%" y="357" width="0.0324%" height="15" fill="rgb(210,195,18)" fg:x="735343047" fg:w="7945969"/><text x="3.2444%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (4,054,517 samples, 0.02%)</title><rect x="3.0268%" y="373" width="0.0165%" height="15" fill="rgb(249,80,12)" fg:x="743289016" fg:w="4054517"/><text x="3.2768%" y="383.50"></text></g><g><title>core::hint::select_unpredictable (4,054,517 samples, 0.02%)</title><rect x="3.0268%" y="357" width="0.0165%" height="15" fill="rgb(221,65,9)" fg:x="743289016" fg:w="4054517"/><text x="3.2768%" y="367.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (11,969,125 samples, 0.05%)</title><rect x="3.0433%" y="357" width="0.0487%" height="15" fill="rgb(235,49,36)" fg:x="747343533" fg:w="11969125"/><text x="3.2933%" y="367.50"></text></g><g><title>core::slice::sort::stable::merge::merge (11,969,125 samples, 0.05%)</title><rect x="3.0433%" y="341" width="0.0487%" height="15" fill="rgb(225,32,20)" fg:x="747343533" fg:w="11969125"/><text x="3.2933%" y="351.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_down (11,969,125 samples, 0.05%)</title><rect x="3.0433%" y="325" width="0.0487%" height="15" fill="rgb(215,141,46)" fg:x="747343533" fg:w="11969125"/><text x="3.2933%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (11,969,125 samples, 0.05%)</title><rect x="3.0433%" y="309" width="0.0487%" height="15" fill="rgb(250,160,47)" fg:x="747343533" fg:w="11969125"/><text x="3.2933%" y="319.50"></text></g><g><title>core::slice::sort::stable::drift::sort (16,011,834 samples, 0.07%)</title><rect x="3.0433%" y="373" width="0.0652%" height="15" fill="rgb(216,222,40)" fg:x="747343533" fg:w="16011834"/><text x="3.2933%" y="383.50"></text></g><g><title>core::slice::sort::stable::drift::merge_tree_depth (4,042,709 samples, 0.02%)</title><rect x="3.0921%" y="357" width="0.0165%" height="15" fill="rgb(234,217,39)" fg:x="759312658" fg:w="4042709"/><text x="3.3421%" y="367.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,899,893 samples, 0.02%)</title><rect x="3.1085%" y="341" width="0.0159%" height="15" fill="rgb(207,178,40)" fg:x="763355367" fg:w="3899893"/><text x="3.3585%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (7,876,168 samples, 0.03%)</title><rect x="3.1085%" y="373" width="0.0321%" height="15" fill="rgb(221,136,13)" fg:x="763355367" fg:w="7876168"/><text x="3.3585%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (7,876,168 samples, 0.03%)</title><rect x="3.1085%" y="357" width="0.0321%" height="15" fill="rgb(249,199,10)" fg:x="763355367" fg:w="7876168"/><text x="3.3585%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (3,976,275 samples, 0.02%)</title><rect x="3.1244%" y="341" width="0.0162%" height="15" fill="rgb(249,222,13)" fg:x="767255260" fg:w="3976275"/><text x="3.3744%" y="351.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,976,275 samples, 0.02%)</title><rect x="3.1244%" y="325" width="0.0162%" height="15" fill="rgb(244,185,38)" fg:x="767255260" fg:w="3976275"/><text x="3.3744%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (4,051,713 samples, 0.02%)</title><rect x="3.1406%" y="325" width="0.0165%" height="15" fill="rgb(236,202,9)" fg:x="771231535" fg:w="4051713"/><text x="3.3906%" y="335.50"></text></g><g><title>hashbrown::control::tag::TagSliceExt::fill_empty (4,000,075 samples, 0.02%)</title><rect x="3.1571%" y="293" width="0.0163%" height="15" fill="rgb(250,229,37)" fg:x="775283248" fg:w="4000075"/><text x="3.4071%" y="303.50"></text></g><g><title>&lt;[hashbrown::control::tag::Tag] as hashbrown::control::tag::TagSliceExt&gt;::fill_tag (4,000,075 samples, 0.02%)</title><rect x="3.1571%" y="277" width="0.0163%" height="15" fill="rgb(206,174,23)" fg:x="775283248" fg:w="4000075"/><text x="3.4071%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (4,000,075 samples, 0.02%)</title><rect x="3.1571%" y="261" width="0.0163%" height="15" fill="rgb(211,33,43)" fg:x="775283248" fg:w="4000075"/><text x="3.4071%" y="271.50"></text></g><g><title>core::ptr::write_bytes (4,000,075 samples, 0.02%)</title><rect x="3.1571%" y="245" width="0.0163%" height="15" fill="rgb(245,58,50)" fg:x="775283248" fg:w="4000075"/><text x="3.4071%" y="255.50"></text></g><g><title>[libc.so.6] (4,000,075 samples, 0.02%)</title><rect x="3.1571%" y="229" width="0.0163%" height="15" fill="rgb(244,68,36)" fg:x="775283248" fg:w="4000075"/><text x="3.4071%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20,088,233 samples, 0.08%)</title><rect x="3.1406%" y="373" width="0.0818%" height="15" fill="rgb(232,229,15)" fg:x="771231535" fg:w="20088233"/><text x="3.3906%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (20,088,233 samples, 0.08%)</title><rect x="3.1406%" y="357" width="0.0818%" height="15" fill="rgb(254,30,23)" fg:x="771231535" fg:w="20088233"/><text x="3.3906%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (20,088,233 samples, 0.08%)</title><rect x="3.1406%" y="341" width="0.0818%" height="15" fill="rgb(235,160,14)" fg:x="771231535" fg:w="20088233"/><text x="3.3906%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (16,036,520 samples, 0.07%)</title><rect x="3.1571%" y="325" width="0.0653%" height="15" fill="rgb(212,155,44)" fg:x="775283248" fg:w="16036520"/><text x="3.4071%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (16,036,520 samples, 0.07%)</title><rect x="3.1571%" y="309" width="0.0653%" height="15" fill="rgb(226,2,50)" fg:x="775283248" fg:w="16036520"/><text x="3.4071%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (12,036,445 samples, 0.05%)</title><rect x="3.1734%" y="293" width="0.0490%" height="15" fill="rgb(234,177,6)" fg:x="779283323" fg:w="12036445"/><text x="3.4234%" y="303.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (12,036,445 samples, 0.05%)</title><rect x="3.1734%" y="277" width="0.0490%" height="15" fill="rgb(217,24,9)" fg:x="779283323" fg:w="12036445"/><text x="3.4234%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,036,445 samples, 0.05%)</title><rect x="3.1734%" y="261" width="0.0490%" height="15" fill="rgb(220,13,46)" fg:x="779283323" fg:w="12036445"/><text x="3.4234%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12,036,445 samples, 0.05%)</title><rect x="3.1734%" y="245" width="0.0490%" height="15" fill="rgb(239,221,27)" fg:x="779283323" fg:w="12036445"/><text x="3.4234%" y="255.50"></text></g><g><title>alloc::alloc::alloc (12,036,445 samples, 0.05%)</title><rect x="3.1734%" y="229" width="0.0490%" height="15" fill="rgb(222,198,25)" fg:x="779283323" fg:w="12036445"/><text x="3.4234%" y="239.50"></text></g><g><title>malloc (12,036,445 samples, 0.05%)</title><rect x="3.1734%" y="213" width="0.0490%" height="15" fill="rgb(211,99,13)" fg:x="779283323" fg:w="12036445"/><text x="3.4234%" y="223.50"></text></g><g><title>[libc.so.6] (12,036,445 samples, 0.05%)</title><rect x="3.1734%" y="197" width="0.0490%" height="15" fill="rgb(232,111,31)" fg:x="779283323" fg:w="12036445"/><text x="3.4234%" y="207.50"></text></g><g><title>[libc.so.6] (8,034,314 samples, 0.03%)</title><rect x="3.1897%" y="181" width="0.0327%" height="15" fill="rgb(245,82,37)" fg:x="783285454" fg:w="8034314"/><text x="3.4397%" y="191.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3,979,324 samples, 0.02%)</title><rect x="3.2550%" y="245" width="0.0162%" height="15" fill="rgb(227,149,46)" fg:x="799322696" fg:w="3979324"/><text x="3.5050%" y="255.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (3,979,324 samples, 0.02%)</title><rect x="3.2550%" y="229" width="0.0162%" height="15" fill="rgb(218,36,50)" fg:x="799322696" fg:w="3979324"/><text x="3.5050%" y="239.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (3,979,324 samples, 0.02%)</title><rect x="3.2550%" y="213" width="0.0162%" height="15" fill="rgb(226,80,48)" fg:x="799322696" fg:w="3979324"/><text x="3.5050%" y="223.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (3,979,324 samples, 0.02%)</title><rect x="3.2550%" y="197" width="0.0162%" height="15" fill="rgb(238,224,15)" fg:x="799322696" fg:w="3979324"/><text x="3.5050%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (4,008,773 samples, 0.02%)</title><rect x="3.2712%" y="245" width="0.0163%" height="15" fill="rgb(241,136,10)" fg:x="803302020" fg:w="4008773"/><text x="3.5212%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4,008,773 samples, 0.02%)</title><rect x="3.2712%" y="229" width="0.0163%" height="15" fill="rgb(208,32,45)" fg:x="803302020" fg:w="4008773"/><text x="3.5212%" y="239.50"></text></g><g><title>core::ptr::copy_nonoverlapping (4,008,773 samples, 0.02%)</title><rect x="3.2712%" y="213" width="0.0163%" height="15" fill="rgb(207,135,9)" fg:x="803302020" fg:w="4008773"/><text x="3.5212%" y="223.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (11,992,125 samples, 0.05%)</title><rect x="3.2550%" y="357" width="0.0488%" height="15" fill="rgb(206,86,44)" fg:x="799322696" fg:w="11992125"/><text x="3.5050%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (11,992,125 samples, 0.05%)</title><rect x="3.2550%" y="341" width="0.0488%" height="15" fill="rgb(245,177,15)" fg:x="799322696" fg:w="11992125"/><text x="3.5050%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (11,992,125 samples, 0.05%)</title><rect x="3.2550%" y="325" width="0.0488%" height="15" fill="rgb(206,64,50)" fg:x="799322696" fg:w="11992125"/><text x="3.5050%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (11,992,125 samples, 0.05%)</title><rect x="3.2550%" y="309" width="0.0488%" height="15" fill="rgb(234,36,40)" fg:x="799322696" fg:w="11992125"/><text x="3.5050%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (11,992,125 samples, 0.05%)</title><rect x="3.2550%" y="293" width="0.0488%" height="15" fill="rgb(213,64,8)" fg:x="799322696" fg:w="11992125"/><text x="3.5050%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11,992,125 samples, 0.05%)</title><rect x="3.2550%" y="277" width="0.0488%" height="15" fill="rgb(210,75,36)" fg:x="799322696" fg:w="11992125"/><text x="3.5050%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11,992,125 samples, 0.05%)</title><rect x="3.2550%" y="261" width="0.0488%" height="15" fill="rgb(229,88,21)" fg:x="799322696" fg:w="11992125"/><text x="3.5050%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4,004,028 samples, 0.02%)</title><rect x="3.2875%" y="245" width="0.0163%" height="15" fill="rgb(252,204,47)" fg:x="807310793" fg:w="4004028"/><text x="3.5375%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (4,004,028 samples, 0.02%)</title><rect x="3.2875%" y="229" width="0.0163%" height="15" fill="rgb(208,77,27)" fg:x="807310793" fg:w="4004028"/><text x="3.5375%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4,004,028 samples, 0.02%)</title><rect x="3.2875%" y="213" width="0.0163%" height="15" fill="rgb(221,76,26)" fg:x="807310793" fg:w="4004028"/><text x="3.5375%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,004,028 samples, 0.02%)</title><rect x="3.2875%" y="197" width="0.0163%" height="15" fill="rgb(225,139,18)" fg:x="807310793" fg:w="4004028"/><text x="3.5375%" y="207.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (24,088,763 samples, 0.10%)</title><rect x="3.3038%" y="341" width="0.0981%" height="15" fill="rgb(230,137,11)" fg:x="811314821" fg:w="24088763"/><text x="3.5538%" y="351.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (24,088,763 samples, 0.10%)</title><rect x="3.3038%" y="325" width="0.0981%" height="15" fill="rgb(212,28,1)" fg:x="811314821" fg:w="24088763"/><text x="3.5538%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (24,088,763 samples, 0.10%)</title><rect x="3.3038%" y="309" width="0.0981%" height="15" fill="rgb(248,164,17)" fg:x="811314821" fg:w="24088763"/><text x="3.5538%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (24,088,763 samples, 0.10%)</title><rect x="3.3038%" y="293" width="0.0981%" height="15" fill="rgb(222,171,42)" fg:x="811314821" fg:w="24088763"/><text x="3.5538%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24,088,763 samples, 0.10%)</title><rect x="3.3038%" y="277" width="0.0981%" height="15" fill="rgb(243,84,45)" fg:x="811314821" fg:w="24088763"/><text x="3.5538%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (24,088,763 samples, 0.10%)</title><rect x="3.3038%" y="261" width="0.0981%" height="15" fill="rgb(252,49,23)" fg:x="811314821" fg:w="24088763"/><text x="3.5538%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24,088,763 samples, 0.10%)</title><rect x="3.3038%" y="245" width="0.0981%" height="15" fill="rgb(215,19,7)" fg:x="811314821" fg:w="24088763"/><text x="3.5538%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (24,088,763 samples, 0.10%)</title><rect x="3.3038%" y="229" width="0.0981%" height="15" fill="rgb(238,81,41)" fg:x="811314821" fg:w="24088763"/><text x="3.5538%" y="239.50"></text></g><g><title>cfree (24,088,763 samples, 0.10%)</title><rect x="3.3038%" y="213" width="0.0981%" height="15" fill="rgb(210,199,37)" fg:x="811314821" fg:w="24088763"/><text x="3.5538%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,982,794 samples, 0.02%)</title><rect x="3.4019%" y="341" width="0.0162%" height="15" fill="rgb(244,192,49)" fg:x="835403584" fg:w="3982794"/><text x="3.6519%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3,982,794 samples, 0.02%)</title><rect x="3.4019%" y="325" width="0.0162%" height="15" fill="rgb(226,211,11)" fg:x="835403584" fg:w="3982794"/><text x="3.6519%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,982,794 samples, 0.02%)</title><rect x="3.4019%" y="309" width="0.0162%" height="15" fill="rgb(236,162,54)" fg:x="835403584" fg:w="3982794"/><text x="3.6519%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,982,794 samples, 0.02%)</title><rect x="3.4019%" y="293" width="0.0162%" height="15" fill="rgb(220,229,9)" fg:x="835403584" fg:w="3982794"/><text x="3.6519%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,982,794 samples, 0.02%)</title><rect x="3.4019%" y="277" width="0.0162%" height="15" fill="rgb(250,87,22)" fg:x="835403584" fg:w="3982794"/><text x="3.6519%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8,023,037 samples, 0.03%)</title><rect x="3.4181%" y="341" width="0.0327%" height="15" fill="rgb(239,43,17)" fg:x="839386378" fg:w="8023037"/><text x="3.6681%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8,023,037 samples, 0.03%)</title><rect x="3.4181%" y="325" width="0.0327%" height="15" fill="rgb(231,177,25)" fg:x="839386378" fg:w="8023037"/><text x="3.6681%" y="335.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (4,034,056 samples, 0.02%)</title><rect x="3.4344%" y="309" width="0.0164%" height="15" fill="rgb(219,179,1)" fg:x="843375359" fg:w="4034056"/><text x="3.6844%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,013,955 samples, 0.02%)</title><rect x="3.4508%" y="213" width="0.0163%" height="15" fill="rgb(238,219,53)" fg:x="847409415" fg:w="4013955"/><text x="3.7008%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (4,013,955 samples, 0.02%)</title><rect x="3.4508%" y="197" width="0.0163%" height="15" fill="rgb(232,167,36)" fg:x="847409415" fg:w="4013955"/><text x="3.7008%" y="207.50"></text></g><g><title>cfree (4,013,955 samples, 0.02%)</title><rect x="3.4508%" y="181" width="0.0163%" height="15" fill="rgb(244,19,51)" fg:x="847409415" fg:w="4013955"/><text x="3.7008%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,032,373 samples, 0.03%)</title><rect x="3.4508%" y="325" width="0.0327%" height="15" fill="rgb(224,6,22)" fg:x="847409415" fg:w="8032373"/><text x="3.7008%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (8,032,373 samples, 0.03%)</title><rect x="3.4508%" y="309" width="0.0327%" height="15" fill="rgb(224,145,5)" fg:x="847409415" fg:w="8032373"/><text x="3.7008%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (8,032,373 samples, 0.03%)</title><rect x="3.4508%" y="293" width="0.0327%" height="15" fill="rgb(234,130,49)" fg:x="847409415" fg:w="8032373"/><text x="3.7008%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (8,032,373 samples, 0.03%)</title><rect x="3.4508%" y="277" width="0.0327%" height="15" fill="rgb(254,6,2)" fg:x="847409415" fg:w="8032373"/><text x="3.7008%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (8,032,373 samples, 0.03%)</title><rect x="3.4508%" y="261" width="0.0327%" height="15" fill="rgb(208,96,46)" fg:x="847409415" fg:w="8032373"/><text x="3.7008%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,032,373 samples, 0.03%)</title><rect x="3.4508%" y="245" width="0.0327%" height="15" fill="rgb(239,3,39)" fg:x="847409415" fg:w="8032373"/><text x="3.7008%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,032,373 samples, 0.03%)</title><rect x="3.4508%" y="229" width="0.0327%" height="15" fill="rgb(233,210,1)" fg:x="847409415" fg:w="8032373"/><text x="3.7008%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (4,018,418 samples, 0.02%)</title><rect x="3.4671%" y="213" width="0.0164%" height="15" fill="rgb(244,137,37)" fg:x="851423370" fg:w="4018418"/><text x="3.7171%" y="223.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (68,114,332 samples, 0.28%)</title><rect x="3.2224%" y="373" width="0.2774%" height="15" fill="rgb(240,136,2)" fg:x="791319768" fg:w="68114332"/><text x="3.4724%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (48,119,279 samples, 0.20%)</title><rect x="3.3038%" y="357" width="0.1960%" height="15" fill="rgb(239,18,37)" fg:x="811314821" fg:w="48119279"/><text x="3.5538%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (12,024,685 samples, 0.05%)</title><rect x="3.4508%" y="341" width="0.0490%" height="15" fill="rgb(218,185,22)" fg:x="847409415" fg:w="12024685"/><text x="3.7008%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (3,992,312 samples, 0.02%)</title><rect x="3.4835%" y="325" width="0.0163%" height="15" fill="rgb(225,218,4)" fg:x="855441788" fg:w="3992312"/><text x="3.7335%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,992,312 samples, 0.02%)</title><rect x="3.4835%" y="309" width="0.0163%" height="15" fill="rgb(230,182,32)" fg:x="855441788" fg:w="3992312"/><text x="3.7335%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,055,518 samples, 0.02%)</title><rect x="3.4998%" y="357" width="0.0165%" height="15" fill="rgb(242,56,43)" fg:x="859434100" fg:w="4055518"/><text x="3.7498%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4,010,622 samples, 0.02%)</title><rect x="3.5163%" y="357" width="0.0163%" height="15" fill="rgb(233,99,24)" fg:x="863489618" fg:w="4010622"/><text x="3.7663%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4,010,622 samples, 0.02%)</title><rect x="3.5163%" y="341" width="0.0163%" height="15" fill="rgb(234,209,42)" fg:x="863489618" fg:w="4010622"/><text x="3.7663%" y="351.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (4,010,622 samples, 0.02%)</title><rect x="3.5163%" y="325" width="0.0163%" height="15" fill="rgb(227,7,12)" fg:x="863489618" fg:w="4010622"/><text x="3.7663%" y="335.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (12,088,415 samples, 0.05%)</title><rect x="3.4998%" y="373" width="0.0492%" height="15" fill="rgb(245,203,43)" fg:x="859434100" fg:w="12088415"/><text x="3.7498%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="357" width="0.0164%" height="15" fill="rgb(238,205,33)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="341" width="0.0164%" height="15" fill="rgb(231,56,7)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u32&gt;,u32)]&gt; (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="325" width="0.0164%" height="15" fill="rgb(244,186,29)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt; (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="309" width="0.0164%" height="15" fill="rgb(234,111,31)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="293" width="0.0164%" height="15" fill="rgb(241,149,10)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="277" width="0.0164%" height="15" fill="rgb(249,206,44)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="261" width="0.0164%" height="15" fill="rgb(251,153,30)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="245" width="0.0164%" height="15" fill="rgb(239,152,38)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="229" width="0.0164%" height="15" fill="rgb(249,139,47)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="213" width="0.0164%" height="15" fill="rgb(244,64,35)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="223.50"></text></g><g><title>cfree (4,022,275 samples, 0.02%)</title><rect x="3.5326%" y="197" width="0.0164%" height="15" fill="rgb(216,46,15)" fg:x="867500240" fg:w="4022275"/><text x="3.7826%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;img::png::deflate::lzss::hash::LzssHashTable&gt; (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="357" width="0.0322%" height="15" fill="rgb(250,74,19)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;&gt;&gt; (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="341" width="0.0322%" height="15" fill="rgb(249,42,33)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;,std::hash::random::RandomState&gt;&gt; (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="325" width="0.0322%" height="15" fill="rgb(242,149,17)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;)&gt;&gt; (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="309" width="0.0322%" height="15" fill="rgb(244,29,21)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="293" width="0.0322%" height="15" fill="rgb(220,130,37)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="277" width="0.0322%" height="15" fill="rgb(211,67,2)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="261" width="0.0322%" height="15" fill="rgb(235,68,52)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="245" width="0.0322%" height="15" fill="rgb(246,142,3)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="229" width="0.0322%" height="15" fill="rgb(241,25,7)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="239.50"></text></g><g><title>cfree (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="213" width="0.0322%" height="15" fill="rgb(242,119,39)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="223.50"></text></g><g><title>[libc.so.6] (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="197" width="0.0322%" height="15" fill="rgb(241,98,45)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="207.50"></text></g><g><title>[libc.so.6] (7,898,663 samples, 0.03%)</title><rect x="3.5490%" y="181" width="0.0322%" height="15" fill="rgb(254,28,30)" fg:x="871522515" fg:w="7898663"/><text x="3.7990%" y="191.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_greedy (15,902,524 samples, 0.06%)</title><rect x="3.5490%" y="373" width="0.0648%" height="15" fill="rgb(241,142,54)" fg:x="871522515" fg:w="15902524"/><text x="3.7990%" y="383.50"></text></g><g><title>img::png::deflate::lzss::find_backreference_with_table (8,003,861 samples, 0.03%)</title><rect x="3.5812%" y="357" width="0.0326%" height="15" fill="rgb(222,85,15)" fg:x="879421178" fg:w="8003861"/><text x="3.8312%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_range (3,985,544 samples, 0.02%)</title><rect x="68.6021%" y="293" width="0.0162%" height="15" fill="rgb(210,85,47)" fg:x="16846536596" fg:w="3985544"/><text x="68.8521%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,985,544 samples, 0.02%)</title><rect x="68.6021%" y="277" width="0.0162%" height="15" fill="rgb(224,206,25)" fg:x="16846536596" fg:w="3985544"/><text x="68.8521%" y="287.50"></text></g><g><title>&lt;&amp;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (7,999,343 samples, 0.03%)</title><rect x="68.6021%" y="341" width="0.0326%" height="15" fill="rgb(243,201,19)" fg:x="16846536596" fg:w="7999343"/><text x="68.8521%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::iter (7,999,343 samples, 0.03%)</title><rect x="68.6021%" y="325" width="0.0326%" height="15" fill="rgb(236,59,4)" fg:x="16846536596" fg:w="7999343"/><text x="68.8521%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_slices (7,999,343 samples, 0.03%)</title><rect x="68.6021%" y="309" width="0.0326%" height="15" fill="rgb(254,179,45)" fg:x="16846536596" fg:w="7999343"/><text x="68.8521%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (4,013,799 samples, 0.02%)</title><rect x="68.6183%" y="293" width="0.0163%" height="15" fill="rgb(226,14,10)" fg:x="16850522140" fg:w="4013799"/><text x="68.8683%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,404,651,136 samples, 9.79%)</title><rect x="68.6347%" y="341" width="9.7922%" height="15" fill="rgb(244,27,41)" fg:x="16854535939" fg:w="2404651136"/><text x="68.8847%" y="351.50">&lt;alloc::collec..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (269,164,022 samples, 1.10%)</title><rect x="77.3308%" y="325" width="1.0961%" height="15" fill="rgb(235,35,32)" fg:x="18990023053" fg:w="269164022"/><text x="77.5808%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (269,164,022 samples, 1.10%)</title><rect x="77.3308%" y="309" width="1.0961%" height="15" fill="rgb(218,68,31)" fg:x="18990023053" fg:w="269164022"/><text x="77.5808%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,899,740,193 samples, 7.74%)</title><rect x="78.4268%" y="341" width="7.7361%" height="15" fill="rgb(207,120,37)" fg:x="19259187075" fg:w="1899740193"/><text x="78.6768%" y="351.50">&lt;alloc::vec..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,899,740,193 samples, 7.74%)</title><rect x="78.4268%" y="325" width="7.7361%" height="15" fill="rgb(227,98,0)" fg:x="19259187075" fg:w="1899740193"/><text x="78.6768%" y="335.50">core::slice..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,899,740,193 samples, 7.74%)</title><rect x="78.4268%" y="309" width="7.7361%" height="15" fill="rgb(207,7,3)" fg:x="19259187075" fg:w="1899740193"/><text x="78.6768%" y="319.50">&lt;usize as c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (386,535,334 samples, 1.57%)</title><rect x="86.1629%" y="341" width="1.5740%" height="15" fill="rgb(206,98,19)" fg:x="21158927268" fg:w="386535334"/><text x="86.4129%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7,831,137 samples, 0.03%)</title><rect x="87.7370%" y="341" width="0.0319%" height="15" fill="rgb(217,5,26)" fg:x="21545462602" fg:w="7831137"/><text x="87.9870%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7,831,137 samples, 0.03%)</title><rect x="87.7370%" y="325" width="0.0319%" height="15" fill="rgb(235,190,38)" fg:x="21545462602" fg:w="7831137"/><text x="87.9870%" y="335.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (7,831,137 samples, 0.03%)</title><rect x="87.7370%" y="309" width="0.0319%" height="15" fill="rgb(247,86,24)" fg:x="21545462602" fg:w="7831137"/><text x="87.9870%" y="319.50"></text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (2,266,618,989 samples, 9.23%)</title><rect x="87.7689%" y="341" width="9.2301%" height="15" fill="rgb(205,101,16)" fg:x="21553293739" fg:w="2266618989"/><text x="88.0189%" y="351.50">img::png::def..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (16,168,969 samples, 0.07%)</title><rect x="96.9989%" y="245" width="0.0658%" height="15" fill="rgb(246,168,33)" fg:x="23819912728" fg:w="16168969"/><text x="97.2489%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (8,123,307 samples, 0.03%)</title><rect x="97.0317%" y="229" width="0.0331%" height="15" fill="rgb(231,114,1)" fg:x="23827958390" fg:w="8123307"/><text x="97.2817%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (8,123,307 samples, 0.03%)</title><rect x="97.0317%" y="213" width="0.0331%" height="15" fill="rgb(207,184,53)" fg:x="23827958390" fg:w="8123307"/><text x="97.2817%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (27,993,946 samples, 0.11%)</title><rect x="96.9989%" y="341" width="0.1140%" height="15" fill="rgb(224,95,51)" fg:x="23819912728" fg:w="27993946"/><text x="97.2489%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (27,993,946 samples, 0.11%)</title><rect x="96.9989%" y="325" width="0.1140%" height="15" fill="rgb(212,188,45)" fg:x="23819912728" fg:w="27993946"/><text x="97.2489%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,993,946 samples, 0.11%)</title><rect x="96.9989%" y="309" width="0.1140%" height="15" fill="rgb(223,154,38)" fg:x="23819912728" fg:w="27993946"/><text x="97.2489%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27,993,946 samples, 0.11%)</title><rect x="96.9989%" y="293" width="0.1140%" height="15" fill="rgb(251,22,52)" fg:x="23819912728" fg:w="27993946"/><text x="97.2489%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27,993,946 samples, 0.11%)</title><rect x="96.9989%" y="277" width="0.1140%" height="15" fill="rgb(229,209,22)" fg:x="23819912728" fg:w="27993946"/><text x="97.2489%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (27,993,946 samples, 0.11%)</title><rect x="96.9989%" y="261" width="0.1140%" height="15" fill="rgb(234,138,34)" fg:x="23819912728" fg:w="27993946"/><text x="97.2489%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,824,977 samples, 0.05%)</title><rect x="97.0648%" y="245" width="0.0482%" height="15" fill="rgb(212,95,11)" fg:x="23836081697" fg:w="11824977"/><text x="97.3148%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (11,824,977 samples, 0.05%)</title><rect x="97.0648%" y="229" width="0.0482%" height="15" fill="rgb(240,179,47)" fg:x="23836081697" fg:w="11824977"/><text x="97.3148%" y="239.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (52,190,262 samples, 0.21%)</title><rect x="97.4722%" y="325" width="0.2125%" height="15" fill="rgb(240,163,11)" fg:x="23936138729" fg:w="52190262"/><text x="97.7222%" y="335.50"></text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (52,190,262 samples, 0.21%)</title><rect x="97.4722%" y="309" width="0.2125%" height="15" fill="rgb(236,37,12)" fg:x="23936138729" fg:w="52190262"/><text x="97.7222%" y="319.50"></text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (52,190,262 samples, 0.21%)</title><rect x="97.4722%" y="293" width="0.2125%" height="15" fill="rgb(232,164,16)" fg:x="23936138729" fg:w="52190262"/><text x="97.7222%" y="303.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::from_slice (28,153,340 samples, 0.11%)</title><rect x="97.6848%" y="325" width="0.1146%" height="15" fill="rgb(244,205,15)" fg:x="23988328991" fg:w="28153340"/><text x="97.9348%" y="335.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::load (28,153,340 samples, 0.11%)</title><rect x="97.6848%" y="309" width="0.1146%" height="15" fill="rgb(223,117,47)" fg:x="23988328991" fg:w="28153340"/><text x="97.9348%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (28,153,340 samples, 0.11%)</title><rect x="97.6848%" y="293" width="0.1146%" height="15" fill="rgb(244,107,35)" fg:x="23988328991" fg:w="28153340"/><text x="97.9348%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,023,821 samples, 0.02%)</title><rect x="97.7994%" y="325" width="0.0164%" height="15" fill="rgb(205,140,8)" fg:x="24016482331" fg:w="4023821"/><text x="98.0494%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,023,821 samples, 0.02%)</title><rect x="97.7994%" y="309" width="0.0164%" height="15" fill="rgb(228,84,46)" fg:x="24016482331" fg:w="4023821"/><text x="98.0494%" y="319.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (23,137,074,546 samples, 94.22%)</title><rect x="3.6138%" y="373" width="94.2183%" height="15" fill="rgb(254,188,9)" fg:x="887425039" fg:w="23137074546"/><text x="3.8638%" y="383.50">img::png::deflate::lzss::encode_lzss_optimized</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (23,137,074,546 samples, 94.22%)</title><rect x="3.6138%" y="357" width="94.2183%" height="15" fill="rgb(206,112,54)" fg:x="887425039" fg:w="23137074546"/><text x="3.8638%" y="367.50">img::png::deflate::lzss::encode_lzss_iteration</text></g><g><title>img::simd_utils::number_of_matching_bytes (176,592,911 samples, 0.72%)</title><rect x="97.1129%" y="341" width="0.7191%" height="15" fill="rgb(216,84,49)" fg:x="23847906674" fg:w="176592911"/><text x="97.3629%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,993,433 samples, 0.02%)</title><rect x="97.8158%" y="325" width="0.0163%" height="15" fill="rgb(214,194,35)" fg:x="24020506152" fg:w="3993433"/><text x="98.0658%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,993,433 samples, 0.02%)</title><rect x="97.8158%" y="309" width="0.0163%" height="15" fill="rgb(249,28,3)" fg:x="24020506152" fg:w="3993433"/><text x="98.0658%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3,993,433 samples, 0.02%)</title><rect x="97.8158%" y="293" width="0.0163%" height="15" fill="rgb(222,56,52)" fg:x="24020506152" fg:w="3993433"/><text x="98.0658%" y="303.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (3,968,729 samples, 0.02%)</title><rect x="97.8320%" y="373" width="0.0162%" height="15" fill="rgb(245,217,50)" fg:x="24024499585" fg:w="3968729"/><text x="98.0820%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3,968,729 samples, 0.02%)</title><rect x="97.8320%" y="357" width="0.0162%" height="15" fill="rgb(213,201,24)" fg:x="24024499585" fg:w="3968729"/><text x="98.0820%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3,968,729 samples, 0.02%)</title><rect x="97.8320%" y="341" width="0.0162%" height="15" fill="rgb(248,116,28)" fg:x="24024499585" fg:w="3968729"/><text x="98.0820%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3,968,729 samples, 0.02%)</title><rect x="97.8320%" y="325" width="0.0162%" height="15" fill="rgb(219,72,43)" fg:x="24024499585" fg:w="3968729"/><text x="98.0820%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,968,729 samples, 0.02%)</title><rect x="97.8320%" y="309" width="0.0162%" height="15" fill="rgb(209,138,14)" fg:x="24024499585" fg:w="3968729"/><text x="98.0820%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,968,729 samples, 0.02%)</title><rect x="97.8320%" y="293" width="0.0162%" height="15" fill="rgb(222,18,33)" fg:x="24024499585" fg:w="3968729"/><text x="98.0820%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,968,729 samples, 0.02%)</title><rect x="97.8320%" y="277" width="0.0162%" height="15" fill="rgb(213,199,7)" fg:x="24024499585" fg:w="3968729"/><text x="98.0820%" y="287.50"></text></g><g><title>core::intrinsics::likely (3,968,729 samples, 0.02%)</title><rect x="97.8320%" y="261" width="0.0162%" height="15" fill="rgb(250,110,10)" fg:x="24024499585" fg:w="3968729"/><text x="98.0820%" y="271.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::convert::From&lt;[T: N]&gt;&gt;::from (11,750,832 samples, 0.05%)</title><rect x="97.8482%" y="357" width="0.0479%" height="15" fill="rgb(248,123,6)" fg:x="24028468314" fg:w="11750832"/><text x="98.0982%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::with_capacity (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="341" width="0.0323%" height="15" fill="rgb(206,91,31)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::with_capacity_in (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="325" width="0.0323%" height="15" fill="rgb(211,154,13)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="309" width="0.0323%" height="15" fill="rgb(225,148,7)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="293" width="0.0323%" height="15" fill="rgb(220,160,43)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="277" width="0.0323%" height="15" fill="rgb(213,52,39)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="261" width="0.0323%" height="15" fill="rgb(243,137,7)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="245" width="0.0323%" height="15" fill="rgb(230,79,13)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="255.50"></text></g><g><title>alloc::alloc::alloc (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="229" width="0.0323%" height="15" fill="rgb(247,105,23)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="239.50"></text></g><g><title>malloc (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="213" width="0.0323%" height="15" fill="rgb(223,179,41)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="223.50"></text></g><g><title>[libc.so.6] (7,942,492 samples, 0.03%)</title><rect x="97.8637%" y="197" width="0.0323%" height="15" fill="rgb(218,9,34)" fg:x="24032276654" fg:w="7942492"/><text x="98.1137%" y="207.50"></text></g><g><title>[libc.so.6] (3,977,239 samples, 0.02%)</title><rect x="97.8799%" y="181" width="0.0162%" height="15" fill="rgb(222,106,8)" fg:x="24036241907" fg:w="3977239"/><text x="98.1299%" y="191.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (15,795,083 samples, 0.06%)</title><rect x="97.8482%" y="373" width="0.0643%" height="15" fill="rgb(211,220,0)" fg:x="24028468314" fg:w="15795083"/><text x="98.0982%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4,044,251 samples, 0.02%)</title><rect x="97.8961%" y="357" width="0.0165%" height="15" fill="rgb(229,52,16)" fg:x="24040219146" fg:w="4044251"/><text x="98.1461%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4,044,251 samples, 0.02%)</title><rect x="97.8961%" y="341" width="0.0165%" height="15" fill="rgb(212,155,18)" fg:x="24040219146" fg:w="4044251"/><text x="98.1461%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4,044,251 samples, 0.02%)</title><rect x="97.8961%" y="325" width="0.0165%" height="15" fill="rgb(242,21,14)" fg:x="24040219146" fg:w="4044251"/><text x="98.1461%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (4,044,251 samples, 0.02%)</title><rect x="97.8961%" y="309" width="0.0165%" height="15" fill="rgb(222,19,48)" fg:x="24040219146" fg:w="4044251"/><text x="98.1461%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4,044,251 samples, 0.02%)</title><rect x="97.8961%" y="293" width="0.0165%" height="15" fill="rgb(232,45,27)" fg:x="24040219146" fg:w="4044251"/><text x="98.1461%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4,044,251 samples, 0.02%)</title><rect x="97.8961%" y="277" width="0.0165%" height="15" fill="rgb(249,103,42)" fg:x="24040219146" fg:w="4044251"/><text x="98.1461%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (4,044,251 samples, 0.02%)</title><rect x="97.8961%" y="261" width="0.0165%" height="15" fill="rgb(246,81,33)" fg:x="24040219146" fg:w="4044251"/><text x="98.1461%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,044,251 samples, 0.02%)</title><rect x="97.8961%" y="245" width="0.0165%" height="15" fill="rgb(252,33,42)" fg:x="24040219146" fg:w="4044251"/><text x="98.1461%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (3,906,010 samples, 0.02%)</title><rect x="97.9125%" y="373" width="0.0159%" height="15" fill="rgb(209,212,41)" fg:x="24044263397" fg:w="3906010"/><text x="98.1625%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (3,906,010 samples, 0.02%)</title><rect x="97.9125%" y="357" width="0.0159%" height="15" fill="rgb(207,154,6)" fg:x="24044263397" fg:w="3906010"/><text x="98.1625%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (3,906,010 samples, 0.02%)</title><rect x="97.9125%" y="341" width="0.0159%" height="15" fill="rgb(223,64,47)" fg:x="24044263397" fg:w="3906010"/><text x="98.1625%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (3,906,010 samples, 0.02%)</title><rect x="97.9125%" y="325" width="0.0159%" height="15" fill="rgb(211,161,38)" fg:x="24044263397" fg:w="3906010"/><text x="98.1625%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,906,010 samples, 0.02%)</title><rect x="97.9125%" y="309" width="0.0159%" height="15" fill="rgb(219,138,40)" fg:x="24044263397" fg:w="3906010"/><text x="98.1625%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,906,010 samples, 0.02%)</title><rect x="97.9125%" y="293" width="0.0159%" height="15" fill="rgb(241,228,46)" fg:x="24044263397" fg:w="3906010"/><text x="98.1625%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,906,010 samples, 0.02%)</title><rect x="97.9125%" y="277" width="0.0159%" height="15" fill="rgb(223,209,38)" fg:x="24044263397" fg:w="3906010"/><text x="98.1625%" y="287.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,906,010 samples, 0.02%)</title><rect x="97.9125%" y="261" width="0.0159%" height="15" fill="rgb(236,164,45)" fg:x="24044263397" fg:w="3906010"/><text x="98.1625%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,906,010 samples, 0.02%)</title><rect x="97.9125%" y="245" width="0.0159%" height="15" fill="rgb(231,15,5)" fg:x="24044263397" fg:w="3906010"/><text x="98.1625%" y="255.50"></text></g><g><title>[unknown] (23,602,101,471 samples, 96.11%)</title><rect x="1.8330%" y="389" width="96.1120%" height="15" fill="rgb(252,35,15)" fg:x="450117100" fg:w="23602101471"/><text x="2.0830%" y="399.50">[unknown]</text></g><g><title>img::png::encode_png (4,049,164 samples, 0.02%)</title><rect x="97.9284%" y="373" width="0.0165%" height="15" fill="rgb(248,181,18)" fg:x="24048169407" fg:w="4049164"/><text x="98.1784%" y="383.50"></text></g><g><title>img::png::deflate::compress_scanlines (4,049,164 samples, 0.02%)</title><rect x="97.9284%" y="357" width="0.0165%" height="15" fill="rgb(233,39,42)" fg:x="24048169407" fg:w="4049164"/><text x="98.1784%" y="367.50"></text></g><g><title>img::png::deflate::zlib::ZlibEncoder::write_bytes (4,049,164 samples, 0.02%)</title><rect x="97.9284%" y="341" width="0.0165%" height="15" fill="rgb(238,110,33)" fg:x="24048169407" fg:w="4049164"/><text x="98.1784%" y="351.50"></text></g><g><title>img::png::adler32::Adler32Calculator::update_adler32 (4,049,164 samples, 0.02%)</title><rect x="97.9284%" y="325" width="0.0165%" height="15" fill="rgb(233,195,10)" fg:x="24048169407" fg:w="4049164"/><text x="98.1784%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (7,991,596 samples, 0.03%)</title><rect x="97.9449%" y="389" width="0.0325%" height="15" fill="rgb(254,105,3)" fg:x="24052218571" fg:w="7991596"/><text x="98.1949%" y="399.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7,991,596 samples, 0.03%)</title><rect x="97.9449%" y="373" width="0.0325%" height="15" fill="rgb(221,225,9)" fg:x="24052218571" fg:w="7991596"/><text x="98.1949%" y="383.50"></text></g><g><title>__rustc::__rust_dealloc (7,959,122 samples, 0.03%)</title><rect x="97.9775%" y="389" width="0.0324%" height="15" fill="rgb(224,227,45)" fg:x="24060210167" fg:w="7959122"/><text x="98.2275%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,041,681 samples, 0.02%)</title><rect x="98.0099%" y="389" width="0.0165%" height="15" fill="rgb(229,198,43)" fg:x="24068169289" fg:w="4041681"/><text x="98.2599%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,041,681 samples, 0.02%)</title><rect x="98.0099%" y="373" width="0.0165%" height="15" fill="rgb(206,209,35)" fg:x="24068169289" fg:w="4041681"/><text x="98.2599%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,041,681 samples, 0.02%)</title><rect x="98.0099%" y="357" width="0.0165%" height="15" fill="rgb(245,195,53)" fg:x="24068169289" fg:w="4041681"/><text x="98.2599%" y="367.50"></text></g><g><title>core::cmp::max (4,041,681 samples, 0.02%)</title><rect x="98.0099%" y="341" width="0.0165%" height="15" fill="rgb(240,92,26)" fg:x="24068169289" fg:w="4041681"/><text x="98.2599%" y="351.50"></text></g><g><title>core::cmp::Ord::max (4,041,681 samples, 0.02%)</title><rect x="98.0099%" y="325" width="0.0165%" height="15" fill="rgb(207,40,23)" fg:x="24068169289" fg:w="4041681"/><text x="98.2599%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,978,450 samples, 0.02%)</title><rect x="98.0427%" y="341" width="0.0162%" height="15" fill="rgb(223,111,35)" fg:x="24076224899" fg:w="3978450"/><text x="98.2927%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (108,337,339 samples, 0.44%)</title><rect x="98.0427%" y="373" width="0.4412%" height="15" fill="rgb(229,147,28)" fg:x="24076224899" fg:w="108337339"/><text x="98.2927%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (108,337,339 samples, 0.44%)</title><rect x="98.0427%" y="357" width="0.4412%" height="15" fill="rgb(211,29,28)" fg:x="24076224899" fg:w="108337339"/><text x="98.2927%" y="367.50"></text></g><g><title>alloc::alloc::realloc (104,358,889 samples, 0.42%)</title><rect x="98.0589%" y="341" width="0.4250%" height="15" fill="rgb(228,72,33)" fg:x="24080203349" fg:w="104358889"/><text x="98.3089%" y="351.50"></text></g><g><title>realloc (104,358,889 samples, 0.42%)</title><rect x="98.0589%" y="325" width="0.4250%" height="15" fill="rgb(205,214,31)" fg:x="24080203349" fg:w="104358889"/><text x="98.3089%" y="335.50"></text></g><g><title>[libc.so.6] (104,358,889 samples, 0.42%)</title><rect x="98.0589%" y="309" width="0.4250%" height="15" fill="rgb(224,111,15)" fg:x="24080203349" fg:w="104358889"/><text x="98.3089%" y="319.50"></text></g><g><title>[libc.so.6] (100,298,627 samples, 0.41%)</title><rect x="98.0754%" y="293" width="0.4084%" height="15" fill="rgb(253,21,26)" fg:x="24084263611" fg:w="100298627"/><text x="98.3254%" y="303.50"></text></g><g><title>[libc.so.6] (56,243,313 samples, 0.23%)</title><rect x="98.2548%" y="277" width="0.2290%" height="15" fill="rgb(245,139,43)" fg:x="24128318925" fg:w="56243313"/><text x="98.5048%" y="287.50"></text></g><g><title>[libc.so.6] (3,995,487 samples, 0.02%)</title><rect x="98.4676%" y="261" width="0.0163%" height="15" fill="rgb(252,170,7)" fg:x="24180566751" fg:w="3995487"/><text x="98.7176%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (116,370,619 samples, 0.47%)</title><rect x="98.0263%" y="389" width="0.4739%" height="15" fill="rgb(231,118,14)" fg:x="24072210970" fg:w="116370619"/><text x="98.2763%" y="399.50"></text></g><g><title>malloc (4,019,351 samples, 0.02%)</title><rect x="98.4839%" y="373" width="0.0164%" height="15" fill="rgb(238,83,0)" fg:x="24184562238" fg:w="4019351"/><text x="98.7339%" y="383.50"></text></g><g><title>cfree (7,931,770 samples, 0.03%)</title><rect x="98.5038%" y="389" width="0.0323%" height="15" fill="rgb(221,39,39)" fg:x="24189454552" fg:w="7931770"/><text x="98.7538%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,992,707 samples, 0.02%)</title><rect x="98.5361%" y="373" width="0.0163%" height="15" fill="rgb(222,119,46)" fg:x="24197386322" fg:w="3992707"/><text x="98.7861%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,992,707 samples, 0.02%)</title><rect x="98.5361%" y="357" width="0.0163%" height="15" fill="rgb(222,165,49)" fg:x="24197386322" fg:w="3992707"/><text x="98.7861%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,992,707 samples, 0.02%)</title><rect x="98.5361%" y="341" width="0.0163%" height="15" fill="rgb(219,113,52)" fg:x="24197386322" fg:w="3992707"/><text x="98.7861%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,992,707 samples, 0.02%)</title><rect x="98.5361%" y="325" width="0.0163%" height="15" fill="rgb(214,7,15)" fg:x="24197386322" fg:w="3992707"/><text x="98.7861%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,992,707 samples, 0.02%)</title><rect x="98.5361%" y="309" width="0.0163%" height="15" fill="rgb(235,32,4)" fg:x="24197386322" fg:w="3992707"/><text x="98.7861%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7,967,538 samples, 0.03%)</title><rect x="98.5361%" y="389" width="0.0324%" height="15" fill="rgb(238,90,54)" fg:x="24197386322" fg:w="7967538"/><text x="98.7861%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,974,831 samples, 0.02%)</title><rect x="98.5523%" y="373" width="0.0162%" height="15" fill="rgb(213,208,19)" fg:x="24201379029" fg:w="3974831"/><text x="98.8023%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (3,974,831 samples, 0.02%)</title><rect x="98.5523%" y="357" width="0.0162%" height="15" fill="rgb(233,156,4)" fg:x="24201379029" fg:w="3974831"/><text x="98.8023%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u16 (3,974,831 samples, 0.02%)</title><rect x="98.5523%" y="341" width="0.0162%" height="15" fill="rgb(207,194,5)" fg:x="24201379029" fg:w="3974831"/><text x="98.8023%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12,084,068 samples, 0.05%)</title><rect x="98.5685%" y="341" width="0.0492%" height="15" fill="rgb(206,111,30)" fg:x="24205353860" fg:w="12084068"/><text x="98.8185%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::_{{closure}} (3,996,763 samples, 0.02%)</title><rect x="98.6015%" y="325" width="0.0163%" height="15" fill="rgb(243,70,54)" fg:x="24213441165" fg:w="3996763"/><text x="98.8515%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (3,996,763 samples, 0.02%)</title><rect x="98.6015%" y="309" width="0.0163%" height="15" fill="rgb(242,28,8)" fg:x="24213441165" fg:w="3996763"/><text x="98.8515%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,923,546 samples, 0.02%)</title><rect x="98.6177%" y="325" width="0.0160%" height="15" fill="rgb(219,106,18)" fg:x="24217437928" fg:w="3923546"/><text x="98.8677%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,923,546 samples, 0.02%)</title><rect x="98.6177%" y="309" width="0.0160%" height="15" fill="rgb(244,222,10)" fg:x="24217437928" fg:w="3923546"/><text x="98.8677%" y="319.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (3,902,627 samples, 0.02%)</title><rect x="98.6498%" y="309" width="0.0159%" height="15" fill="rgb(236,179,52)" fg:x="24225302688" fg:w="3902627"/><text x="98.8998%" y="319.50"></text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (3,902,627 samples, 0.02%)</title><rect x="98.6498%" y="293" width="0.0159%" height="15" fill="rgb(213,23,39)" fg:x="24225302688" fg:w="3902627"/><text x="98.8998%" y="303.50"></text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (3,902,627 samples, 0.02%)</title><rect x="98.6498%" y="277" width="0.0159%" height="15" fill="rgb(238,48,10)" fg:x="24225302688" fg:w="3902627"/><text x="98.8998%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (27,870,947 samples, 0.11%)</title><rect x="98.5685%" y="389" width="0.1135%" height="15" fill="rgb(251,196,23)" fg:x="24205353860" fg:w="27870947"/><text x="98.8185%" y="399.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (27,870,947 samples, 0.11%)</title><rect x="98.5685%" y="373" width="0.1135%" height="15" fill="rgb(250,152,24)" fg:x="24205353860" fg:w="27870947"/><text x="98.8185%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (27,870,947 samples, 0.11%)</title><rect x="98.5685%" y="357" width="0.1135%" height="15" fill="rgb(209,150,17)" fg:x="24205353860" fg:w="27870947"/><text x="98.8185%" y="367.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (15,786,879 samples, 0.06%)</title><rect x="98.6177%" y="341" width="0.0643%" height="15" fill="rgb(234,202,34)" fg:x="24217437928" fg:w="15786879"/><text x="98.8677%" y="351.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (11,863,333 samples, 0.05%)</title><rect x="98.6337%" y="325" width="0.0483%" height="15" fill="rgb(253,148,53)" fg:x="24221361474" fg:w="11863333"/><text x="98.8837%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,019,492 samples, 0.02%)</title><rect x="98.6656%" y="309" width="0.0164%" height="15" fill="rgb(218,129,16)" fg:x="24229205315" fg:w="4019492"/><text x="98.9156%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,019,492 samples, 0.02%)</title><rect x="98.6656%" y="293" width="0.0164%" height="15" fill="rgb(216,85,19)" fg:x="24229205315" fg:w="4019492"/><text x="98.9156%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (3,993,000 samples, 0.02%)</title><rect x="98.6820%" y="389" width="0.0163%" height="15" fill="rgb(235,228,7)" fg:x="24233224807" fg:w="3993000"/><text x="98.9320%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,993,000 samples, 0.02%)</title><rect x="98.6820%" y="373" width="0.0163%" height="15" fill="rgb(245,175,0)" fg:x="24233224807" fg:w="3993000"/><text x="98.9320%" y="383.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (3,993,000 samples, 0.02%)</title><rect x="98.6820%" y="357" width="0.0163%" height="15" fill="rgb(208,168,36)" fg:x="24233224807" fg:w="3993000"/><text x="98.9320%" y="367.50"></text></g><g><title>img::png::deflate::huffman::construct_canonical_tree_from_lengths::_{{closure}} (3,993,000 samples, 0.02%)</title><rect x="98.6820%" y="341" width="0.0163%" height="15" fill="rgb(246,171,24)" fg:x="24233224807" fg:w="3993000"/><text x="98.9320%" y="351.50"></text></g><g><title>core::slice::sort::stable::drift::sort (3,914,104 samples, 0.02%)</title><rect x="98.6983%" y="389" width="0.0159%" height="15" fill="rgb(215,142,24)" fg:x="24237217807" fg:w="3914104"/><text x="98.9483%" y="399.50"></text></g><g><title>core::slice::sort::stable::drift::create_run (3,914,104 samples, 0.02%)</title><rect x="98.6983%" y="373" width="0.0159%" height="15" fill="rgb(250,187,7)" fg:x="24237217807" fg:w="3914104"/><text x="98.9483%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (3,914,104 samples, 0.02%)</title><rect x="98.6983%" y="357" width="0.0159%" height="15" fill="rgb(228,66,33)" fg:x="24237217807" fg:w="3914104"/><text x="98.9483%" y="367.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (3,914,104 samples, 0.02%)</title><rect x="98.6983%" y="341" width="0.0159%" height="15" fill="rgb(234,215,21)" fg:x="24237217807" fg:w="3914104"/><text x="98.9483%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3,914,104 samples, 0.02%)</title><rect x="98.6983%" y="325" width="0.0159%" height="15" fill="rgb(222,191,20)" fg:x="24237217807" fg:w="3914104"/><text x="98.9483%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,914,104 samples, 0.02%)</title><rect x="98.6983%" y="309" width="0.0159%" height="15" fill="rgb(245,79,54)" fg:x="24237217807" fg:w="3914104"/><text x="98.9483%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,914,104 samples, 0.02%)</title><rect x="98.6983%" y="293" width="0.0159%" height="15" fill="rgb(240,10,37)" fg:x="24237217807" fg:w="3914104"/><text x="98.9483%" y="303.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (11,943,367 samples, 0.05%)</title><rect x="98.7142%" y="373" width="0.0486%" height="15" fill="rgb(214,192,32)" fg:x="24241131911" fg:w="11943367"/><text x="98.9642%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (11,943,367 samples, 0.05%)</title><rect x="98.7142%" y="357" width="0.0486%" height="15" fill="rgb(209,36,54)" fg:x="24241131911" fg:w="11943367"/><text x="98.9642%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (11,943,367 samples, 0.05%)</title><rect x="98.7142%" y="341" width="0.0486%" height="15" fill="rgb(220,10,11)" fg:x="24241131911" fg:w="11943367"/><text x="98.9642%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (3,986,350 samples, 0.02%)</title><rect x="98.7466%" y="325" width="0.0162%" height="15" fill="rgb(221,106,17)" fg:x="24249088928" fg:w="3986350"/><text x="98.9966%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,986,350 samples, 0.02%)</title><rect x="98.7466%" y="309" width="0.0162%" height="15" fill="rgb(251,142,44)" fg:x="24249088928" fg:w="3986350"/><text x="98.9966%" y="319.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (23,829,801 samples, 0.10%)</title><rect x="98.7142%" y="389" width="0.0970%" height="15" fill="rgb(238,13,15)" fg:x="24241131911" fg:w="23829801"/><text x="98.9642%" y="399.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (11,886,434 samples, 0.05%)</title><rect x="98.7628%" y="373" width="0.0484%" height="15" fill="rgb(208,107,27)" fg:x="24253075278" fg:w="11886434"/><text x="99.0128%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (7,876,290 samples, 0.03%)</title><rect x="98.7792%" y="357" width="0.0321%" height="15" fill="rgb(205,136,37)" fg:x="24257085422" fg:w="7876290"/><text x="99.0292%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,975,736 samples, 0.02%)</title><rect x="98.7951%" y="341" width="0.0162%" height="15" fill="rgb(250,205,27)" fg:x="24260985976" fg:w="3975736"/><text x="99.0451%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (3,998,717 samples, 0.02%)</title><rect x="98.8113%" y="373" width="0.0163%" height="15" fill="rgb(210,80,43)" fg:x="24264961712" fg:w="3998717"/><text x="99.0613%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3,998,717 samples, 0.02%)</title><rect x="98.8113%" y="357" width="0.0163%" height="15" fill="rgb(247,160,36)" fg:x="24264961712" fg:w="3998717"/><text x="99.0613%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3,998,717 samples, 0.02%)</title><rect x="98.8113%" y="341" width="0.0163%" height="15" fill="rgb(234,13,49)" fg:x="24264961712" fg:w="3998717"/><text x="99.0613%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3,998,717 samples, 0.02%)</title><rect x="98.8113%" y="325" width="0.0163%" height="15" fill="rgb(234,122,0)" fg:x="24264961712" fg:w="3998717"/><text x="99.0613%" y="335.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (3,998,717 samples, 0.02%)</title><rect x="98.8113%" y="309" width="0.0163%" height="15" fill="rgb(207,146,38)" fg:x="24264961712" fg:w="3998717"/><text x="99.0613%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7,998,745 samples, 0.03%)</title><rect x="98.8113%" y="389" width="0.0326%" height="15" fill="rgb(207,177,25)" fg:x="24264961712" fg:w="7998745"/><text x="99.0613%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (4,000,028 samples, 0.02%)</title><rect x="98.8275%" y="373" width="0.0163%" height="15" fill="rgb(211,178,42)" fg:x="24268960429" fg:w="4000028"/><text x="99.0775%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4,000,028 samples, 0.02%)</title><rect x="98.8275%" y="357" width="0.0163%" height="15" fill="rgb(230,69,54)" fg:x="24268960429" fg:w="4000028"/><text x="99.0775%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4,000,028 samples, 0.02%)</title><rect x="98.8275%" y="341" width="0.0163%" height="15" fill="rgb(214,135,41)" fg:x="24268960429" fg:w="4000028"/><text x="99.0775%" y="351.50"></text></g><g><title>core::ptr::write (4,000,028 samples, 0.02%)</title><rect x="98.8275%" y="325" width="0.0163%" height="15" fill="rgb(237,67,25)" fg:x="24268960429" fg:w="4000028"/><text x="99.0775%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (20,112,880 samples, 0.08%)</title><rect x="98.8534%" y="389" width="0.0819%" height="15" fill="rgb(222,189,50)" fg:x="24275309164" fg:w="20112880"/><text x="99.1034%" y="399.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (7,993,904 samples, 0.03%)</title><rect x="98.9027%" y="373" width="0.0326%" height="15" fill="rgb(245,148,34)" fg:x="24287428140" fg:w="7993904"/><text x="99.1527%" y="383.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (7,993,904 samples, 0.03%)</title><rect x="98.9027%" y="357" width="0.0326%" height="15" fill="rgb(222,29,6)" fg:x="24287428140" fg:w="7993904"/><text x="99.1527%" y="367.50"></text></g><g><title>img::png::deflate::encode_block_type_two (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="389" width="0.0164%" height="15" fill="rgb(221,189,43)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,u32&gt;&gt; (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="373" width="0.0164%" height="15" fill="rgb(207,36,27)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,u32,std::hash::random::RandomState&gt;&gt; (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="357" width="0.0164%" height="15" fill="rgb(217,90,24)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,u32)&gt;&gt; (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="341" width="0.0164%" height="15" fill="rgb(224,66,35)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="325" width="0.0164%" height="15" fill="rgb(221,13,50)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="309" width="0.0164%" height="15" fill="rgb(236,68,49)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="293" width="0.0164%" height="15" fill="rgb(229,146,28)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="277" width="0.0164%" height="15" fill="rgb(225,31,38)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="261" width="0.0164%" height="15" fill="rgb(250,208,3)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="271.50"></text></g><g><title>cfree (4,035,523 samples, 0.02%)</title><rect x="98.9353%" y="245" width="0.0164%" height="15" fill="rgb(246,54,23)" fg:x="24295422044" fg:w="4035523"/><text x="99.1853%" y="255.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (3,937,535 samples, 0.02%)</title><rect x="98.9517%" y="373" width="0.0160%" height="15" fill="rgb(243,76,11)" fg:x="24299457567" fg:w="3937535"/><text x="99.2017%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3,937,535 samples, 0.02%)</title><rect x="98.9517%" y="357" width="0.0160%" height="15" fill="rgb(245,21,50)" fg:x="24299457567" fg:w="3937535"/><text x="99.2017%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3,937,535 samples, 0.02%)</title><rect x="98.9517%" y="341" width="0.0160%" height="15" fill="rgb(228,9,43)" fg:x="24299457567" fg:w="3937535"/><text x="99.2017%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3,937,535 samples, 0.02%)</title><rect x="98.9517%" y="325" width="0.0160%" height="15" fill="rgb(208,100,47)" fg:x="24299457567" fg:w="3937535"/><text x="99.2017%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,937,535 samples, 0.02%)</title><rect x="98.9517%" y="309" width="0.0160%" height="15" fill="rgb(232,26,8)" fg:x="24299457567" fg:w="3937535"/><text x="99.2017%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,937,535 samples, 0.02%)</title><rect x="98.9517%" y="293" width="0.0160%" height="15" fill="rgb(216,166,38)" fg:x="24299457567" fg:w="3937535"/><text x="99.2017%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,937,535 samples, 0.02%)</title><rect x="98.9517%" y="277" width="0.0160%" height="15" fill="rgb(251,202,51)" fg:x="24299457567" fg:w="3937535"/><text x="99.2017%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,937,535 samples, 0.02%)</title><rect x="98.9517%" y="261" width="0.0160%" height="15" fill="rgb(254,216,34)" fg:x="24299457567" fg:w="3937535"/><text x="99.2017%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,937,535 samples, 0.02%)</title><rect x="98.9517%" y="245" width="0.0160%" height="15" fill="rgb(251,32,27)" fg:x="24299457567" fg:w="3937535"/><text x="99.2017%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7,908,899 samples, 0.03%)</title><rect x="98.9678%" y="325" width="0.0322%" height="15" fill="rgb(208,127,28)" fg:x="24303395102" fg:w="7908899"/><text x="99.2178%" y="335.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (11,883,227 samples, 0.05%)</title><rect x="98.9678%" y="357" width="0.0484%" height="15" fill="rgb(224,137,22)" fg:x="24303395102" fg:w="11883227"/><text x="99.2178%" y="367.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (11,883,227 samples, 0.05%)</title><rect x="98.9678%" y="341" width="0.0484%" height="15" fill="rgb(254,70,32)" fg:x="24303395102" fg:w="11883227"/><text x="99.2178%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3,974,328 samples, 0.02%)</title><rect x="99.0000%" y="325" width="0.0162%" height="15" fill="rgb(229,75,37)" fg:x="24311304001" fg:w="3974328"/><text x="99.2500%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,017,060 samples, 0.02%)</title><rect x="99.0162%" y="357" width="0.0164%" height="15" fill="rgb(252,64,23)" fg:x="24315278329" fg:w="4017060"/><text x="99.2662%" y="367.50"></text></g><g><title>core::ptr::write (4,017,060 samples, 0.02%)</title><rect x="99.0162%" y="341" width="0.0164%" height="15" fill="rgb(232,162,48)" fg:x="24315278329" fg:w="4017060"/><text x="99.2662%" y="351.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (23,730,797 samples, 0.10%)</title><rect x="98.9517%" y="389" width="0.0966%" height="15" fill="rgb(246,160,12)" fg:x="24299457567" fg:w="23730797"/><text x="99.2017%" y="399.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (19,793,262 samples, 0.08%)</title><rect x="98.9678%" y="373" width="0.0806%" height="15" fill="rgb(247,166,0)" fg:x="24303395102" fg:w="19793262"/><text x="99.2178%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="357" width="0.0159%" height="15" fill="rgb(249,219,21)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="341" width="0.0159%" height="15" fill="rgb(205,209,3)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="325" width="0.0159%" height="15" fill="rgb(243,44,1)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="309" width="0.0159%" height="15" fill="rgb(206,159,16)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="293" width="0.0159%" height="15" fill="rgb(244,77,30)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="277" width="0.0159%" height="15" fill="rgb(218,69,12)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="261" width="0.0159%" height="15" fill="rgb(212,87,7)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="245" width="0.0159%" height="15" fill="rgb(245,114,25)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="229" width="0.0159%" height="15" fill="rgb(210,61,42)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="213" width="0.0159%" height="15" fill="rgb(211,52,33)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="223.50"></text></g><g><title>[libc.so.6] (3,892,975 samples, 0.02%)</title><rect x="99.0325%" y="197" width="0.0159%" height="15" fill="rgb(234,58,33)" fg:x="24319295389" fg:w="3892975"/><text x="99.2825%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="373" width="0.0164%" height="15" fill="rgb(220,115,36)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="357" width="0.0164%" height="15" fill="rgb(243,153,54)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="341" width="0.0164%" height="15" fill="rgb(251,47,18)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter{{reify.shim}} (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="325" width="0.0164%" height="15" fill="rgb(242,102,42)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="309" width="0.0164%" height="15" fill="rgb(234,31,38)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="293" width="0.0164%" height="15" fill="rgb(221,117,51)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="277" width="0.0164%" height="15" fill="rgb(212,20,18)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="261" width="0.0164%" height="15" fill="rgb(245,133,36)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="245" width="0.0164%" height="15" fill="rgb(212,6,19)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="229" width="0.0164%" height="15" fill="rgb(218,1,36)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="213" width="0.0164%" height="15" fill="rgb(246,84,54)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="197" width="0.0164%" height="15" fill="rgb(242,110,6)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="207.50"></text></g><g><title>alloc::alloc::alloc (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="181" width="0.0164%" height="15" fill="rgb(214,47,5)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="191.50"></text></g><g><title>malloc (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="165" width="0.0164%" height="15" fill="rgb(218,159,25)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="175.50"></text></g><g><title>[libc.so.6] (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="149" width="0.0164%" height="15" fill="rgb(215,211,28)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="159.50"></text></g><g><title>[libc.so.6] (4,026,149 samples, 0.02%)</title><rect x="99.0484%" y="133" width="0.0164%" height="15" fill="rgb(238,59,32)" fg:x="24323188364" fg:w="4026149"/><text x="99.2984%" y="143.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (8,048,189 samples, 0.03%)</title><rect x="99.0484%" y="389" width="0.0328%" height="15" fill="rgb(226,82,3)" fg:x="24323188364" fg:w="8048189"/><text x="99.2984%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="373" width="0.0164%" height="15" fill="rgb(240,164,32)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="357" width="0.0164%" height="15" fill="rgb(232,46,7)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="341" width="0.0164%" height="15" fill="rgb(229,129,53)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="325" width="0.0164%" height="15" fill="rgb(234,188,29)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="309" width="0.0164%" height="15" fill="rgb(246,141,4)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="293" width="0.0164%" height="15" fill="rgb(229,23,39)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="277" width="0.0164%" height="15" fill="rgb(206,12,3)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="261" width="0.0164%" height="15" fill="rgb(252,226,20)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="245" width="0.0164%" height="15" fill="rgb(216,123,35)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (4,022,040 samples, 0.02%)</title><rect x="99.0648%" y="229" width="0.0164%" height="15" fill="rgb(212,68,40)" fg:x="24327214513" fg:w="4022040"/><text x="99.3148%" y="239.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (3,975,080 samples, 0.02%)</title><rect x="99.5265%" y="229" width="0.0162%" height="15" fill="rgb(254,125,32)" fg:x="24440601734" fg:w="3975080"/><text x="99.7765%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count::_{{closure}} (3,975,080 samples, 0.02%)</title><rect x="99.5265%" y="213" width="0.0162%" height="15" fill="rgb(253,97,22)" fg:x="24440601734" fg:w="3975080"/><text x="99.7765%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (11,903,161 samples, 0.05%)</title><rect x="99.5265%" y="261" width="0.0485%" height="15" fill="rgb(241,101,14)" fg:x="24440601734" fg:w="11903161"/><text x="99.7765%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (11,903,161 samples, 0.05%)</title><rect x="99.5265%" y="245" width="0.0485%" height="15" fill="rgb(238,103,29)" fg:x="24440601734" fg:w="11903161"/><text x="99.7765%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (7,928,081 samples, 0.03%)</title><rect x="99.5427%" y="229" width="0.0323%" height="15" fill="rgb(233,195,47)" fg:x="24444576814" fg:w="7928081"/><text x="99.7927%" y="239.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (125,781,267 samples, 0.51%)</title><rect x="99.0811%" y="389" width="0.5122%" height="15" fill="rgb(246,218,30)" fg:x="24331236553" fg:w="125781267"/><text x="99.3311%" y="399.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (125,781,267 samples, 0.51%)</title><rect x="99.0811%" y="373" width="0.5122%" height="15" fill="rgb(219,145,47)" fg:x="24331236553" fg:w="125781267"/><text x="99.3311%" y="383.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (24,571,197 samples, 0.10%)</title><rect x="99.4933%" y="357" width="0.1001%" height="15" fill="rgb(243,12,26)" fg:x="24432446623" fg:w="24571197"/><text x="99.7433%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (20,494,825 samples, 0.08%)</title><rect x="99.5099%" y="341" width="0.0835%" height="15" fill="rgb(214,87,16)" fg:x="24436522995" fg:w="20494825"/><text x="99.7599%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20,494,825 samples, 0.08%)</title><rect x="99.5099%" y="325" width="0.0835%" height="15" fill="rgb(208,99,42)" fg:x="24436522995" fg:w="20494825"/><text x="99.7599%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20,494,825 samples, 0.08%)</title><rect x="99.5099%" y="309" width="0.0835%" height="15" fill="rgb(253,99,2)" fg:x="24436522995" fg:w="20494825"/><text x="99.7599%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20,494,825 samples, 0.08%)</title><rect x="99.5099%" y="293" width="0.0835%" height="15" fill="rgb(220,168,23)" fg:x="24436522995" fg:w="20494825"/><text x="99.7599%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20,494,825 samples, 0.08%)</title><rect x="99.5099%" y="277" width="0.0835%" height="15" fill="rgb(242,38,24)" fg:x="24436522995" fg:w="20494825"/><text x="99.7599%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,512,925 samples, 0.02%)</title><rect x="99.5750%" y="261" width="0.0184%" height="15" fill="rgb(225,182,9)" fg:x="24452504895" fg:w="4512925"/><text x="99.8250%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4,011,421 samples, 0.02%)</title><rect x="99.5770%" y="245" width="0.0163%" height="15" fill="rgb(243,178,37)" fg:x="24453006399" fg:w="4011421"/><text x="99.8270%" y="255.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (3,988,138 samples, 0.02%)</title><rect x="99.6742%" y="373" width="0.0162%" height="15" fill="rgb(232,139,19)" fg:x="24476879505" fg:w="3988138"/><text x="99.9242%" y="383.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3,952,503 samples, 0.02%)</title><rect x="99.7232%" y="277" width="0.0161%" height="15" fill="rgb(225,201,24)" fg:x="24488901005" fg:w="3952503"/><text x="99.9732%" y="287.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (3,952,503 samples, 0.02%)</title><rect x="99.7232%" y="261" width="0.0161%" height="15" fill="rgb(221,47,46)" fg:x="24488901005" fg:w="3952503"/><text x="99.9732%" y="271.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (3,952,503 samples, 0.02%)</title><rect x="99.7232%" y="245" width="0.0161%" height="15" fill="rgb(249,23,13)" fg:x="24488901005" fg:w="3952503"/><text x="99.9732%" y="255.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (3,952,503 samples, 0.02%)</title><rect x="99.7232%" y="229" width="0.0161%" height="15" fill="rgb(219,9,5)" fg:x="24488901005" fg:w="3952503"/><text x="99.9732%" y="239.50"></text></g><g><title>core::intrinsics::likely (7,961,414 samples, 0.03%)</title><rect x="99.7393%" y="277" width="0.0324%" height="15" fill="rgb(254,171,16)" fg:x="24492853508" fg:w="7961414"/><text x="99.9893%" y="287.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (47,780,348 samples, 0.19%)</title><rect x="99.5933%" y="389" width="0.1946%" height="15" fill="rgb(230,171,20)" fg:x="24457017820" fg:w="47780348"/><text x="99.8433%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (23,930,525 samples, 0.10%)</title><rect x="99.6905%" y="373" width="0.0974%" height="15" fill="rgb(210,71,41)" fg:x="24480867643" fg:w="23930525"/><text x="99.9405%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (23,930,525 samples, 0.10%)</title><rect x="99.6905%" y="357" width="0.0974%" height="15" fill="rgb(206,173,20)" fg:x="24480867643" fg:w="23930525"/><text x="99.9405%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (23,930,525 samples, 0.10%)</title><rect x="99.6905%" y="341" width="0.0974%" height="15" fill="rgb(233,88,34)" fg:x="24480867643" fg:w="23930525"/><text x="99.9405%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (23,930,525 samples, 0.10%)</title><rect x="99.6905%" y="325" width="0.0974%" height="15" fill="rgb(223,209,46)" fg:x="24480867643" fg:w="23930525"/><text x="99.9405%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (23,930,525 samples, 0.10%)</title><rect x="99.6905%" y="309" width="0.0974%" height="15" fill="rgb(250,43,18)" fg:x="24480867643" fg:w="23930525"/><text x="99.9405%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (23,930,525 samples, 0.10%)</title><rect x="99.6905%" y="293" width="0.0974%" height="15" fill="rgb(208,13,10)" fg:x="24480867643" fg:w="23930525"/><text x="99.9405%" y="303.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,983,246 samples, 0.02%)</title><rect x="99.7717%" y="277" width="0.0162%" height="15" fill="rgb(212,200,36)" fg:x="24500814922" fg:w="3983246"/><text x="100.0217%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,983,246 samples, 0.02%)</title><rect x="99.7717%" y="261" width="0.0162%" height="15" fill="rgb(225,90,30)" fg:x="24500814922" fg:w="3983246"/><text x="100.0217%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_key (3,883,797 samples, 0.02%)</title><rect x="99.7879%" y="373" width="0.0158%" height="15" fill="rgb(236,182,39)" fg:x="24504798168" fg:w="3883797"/><text x="100.0379%" y="383.50"></text></g><g><title>core::intrinsics::likely (4,062,852 samples, 0.02%)</title><rect x="99.8199%" y="277" width="0.0165%" height="15" fill="rgb(212,144,35)" fg:x="24512658414" fg:w="4062852"/><text x="100.0699%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (12,043,054 samples, 0.05%)</title><rect x="99.8365%" y="277" width="0.0490%" height="15" fill="rgb(228,63,44)" fg:x="24516721266" fg:w="12043054"/><text x="100.0865%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12,043,054 samples, 0.05%)</title><rect x="99.8365%" y="261" width="0.0490%" height="15" fill="rgb(228,109,6)" fg:x="24516721266" fg:w="12043054"/><text x="100.0865%" y="271.50"></text></g><g><title>core::ptr::copy_nonoverlapping (12,043,054 samples, 0.05%)</title><rect x="99.8365%" y="245" width="0.0490%" height="15" fill="rgb(238,117,24)" fg:x="24516721266" fg:w="12043054"/><text x="100.0865%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (28,030,019 samples, 0.11%)</title><rect x="99.7879%" y="389" width="0.1141%" height="15" fill="rgb(242,26,26)" fg:x="24504798168" fg:w="28030019"/><text x="100.0379%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (24,146,222 samples, 0.10%)</title><rect x="99.8037%" y="373" width="0.0983%" height="15" fill="rgb(221,92,48)" fg:x="24508681965" fg:w="24146222"/><text x="100.0537%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (24,146,222 samples, 0.10%)</title><rect x="99.8037%" y="357" width="0.0983%" height="15" fill="rgb(209,209,32)" fg:x="24508681965" fg:w="24146222"/><text x="100.0537%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (24,146,222 samples, 0.10%)</title><rect x="99.8037%" y="341" width="0.0983%" height="15" fill="rgb(221,70,22)" fg:x="24508681965" fg:w="24146222"/><text x="100.0537%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (20,169,773 samples, 0.08%)</title><rect x="99.8199%" y="325" width="0.0821%" height="15" fill="rgb(248,145,5)" fg:x="24512658414" fg:w="20169773"/><text x="100.0699%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20,169,773 samples, 0.08%)</title><rect x="99.8199%" y="309" width="0.0821%" height="15" fill="rgb(226,116,26)" fg:x="24512658414" fg:w="20169773"/><text x="100.0699%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (20,169,773 samples, 0.08%)</title><rect x="99.8199%" y="293" width="0.0821%" height="15" fill="rgb(244,5,17)" fg:x="24512658414" fg:w="20169773"/><text x="100.0699%" y="303.50"></text></g><g><title>hashbrown::control::tag::Tag::full (4,063,867 samples, 0.02%)</title><rect x="99.8855%" y="277" width="0.0165%" height="15" fill="rgb(252,159,33)" fg:x="24528764320" fg:w="4063867"/><text x="100.1355%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (12,005,193 samples, 0.05%)</title><rect x="99.9021%" y="373" width="0.0489%" height="15" fill="rgb(206,71,0)" fg:x="24532828187" fg:w="12005193"/><text x="100.1521%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (12,005,193 samples, 0.05%)</title><rect x="99.9021%" y="357" width="0.0489%" height="15" fill="rgb(233,118,54)" fg:x="24532828187" fg:w="12005193"/><text x="100.1521%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (12,005,193 samples, 0.05%)</title><rect x="99.9021%" y="341" width="0.0489%" height="15" fill="rgb(234,83,48)" fg:x="24532828187" fg:w="12005193"/><text x="100.1521%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,005,193 samples, 0.05%)</title><rect x="99.9021%" y="325" width="0.0489%" height="15" fill="rgb(228,3,54)" fg:x="24532828187" fg:w="12005193"/><text x="100.1521%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,005,193 samples, 0.05%)</title><rect x="99.9021%" y="309" width="0.0489%" height="15" fill="rgb(226,155,13)" fg:x="24532828187" fg:w="12005193"/><text x="100.1521%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,005,193 samples, 0.05%)</title><rect x="99.9021%" y="293" width="0.0489%" height="15" fill="rgb(241,28,37)" fg:x="24532828187" fg:w="12005193"/><text x="100.1521%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,005,193 samples, 0.05%)</title><rect x="99.9021%" y="277" width="0.0489%" height="15" fill="rgb(233,93,10)" fg:x="24532828187" fg:w="12005193"/><text x="100.1521%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,005,193 samples, 0.05%)</title><rect x="99.9021%" y="261" width="0.0489%" height="15" fill="rgb(225,113,19)" fg:x="24532828187" fg:w="12005193"/><text x="100.1521%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (4,051,472 samples, 0.02%)</title><rect x="99.9344%" y="245" width="0.0165%" height="15" fill="rgb(241,2,18)" fg:x="24540781908" fg:w="4051472"/><text x="100.1844%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from_unsigned (4,051,472 samples, 0.02%)</title><rect x="99.9344%" y="229" width="0.0165%" height="15" fill="rgb(228,207,21)" fg:x="24540781908" fg:w="4051472"/><text x="100.1844%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from_unsigned (4,051,472 samples, 0.02%)</title><rect x="99.9344%" y="213" width="0.0165%" height="15" fill="rgb(213,211,35)" fg:x="24540781908" fg:w="4051472"/><text x="100.1844%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (16,029,678 samples, 0.07%)</title><rect x="99.9021%" y="389" width="0.0653%" height="15" fill="rgb(209,83,10)" fg:x="24532828187" fg:w="16029678"/><text x="100.1521%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4,024,485 samples, 0.02%)</title><rect x="99.9509%" y="373" width="0.0164%" height="15" fill="rgb(209,164,1)" fg:x="24544833380" fg:w="4024485"/><text x="100.2009%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4,024,485 samples, 0.02%)</title><rect x="99.9509%" y="357" width="0.0164%" height="15" fill="rgb(213,184,43)" fg:x="24544833380" fg:w="4024485"/><text x="100.2009%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4,024,485 samples, 0.02%)</title><rect x="99.9509%" y="341" width="0.0164%" height="15" fill="rgb(231,61,34)" fg:x="24544833380" fg:w="4024485"/><text x="100.2009%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4,024,485 samples, 0.02%)</title><rect x="99.9509%" y="325" width="0.0164%" height="15" fill="rgb(235,75,3)" fg:x="24544833380" fg:w="4024485"/><text x="100.2009%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4,024,485 samples, 0.02%)</title><rect x="99.9509%" y="309" width="0.0164%" height="15" fill="rgb(220,106,47)" fg:x="24544833380" fg:w="4024485"/><text x="100.2009%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4,024,485 samples, 0.02%)</title><rect x="99.9509%" y="293" width="0.0164%" height="15" fill="rgb(210,196,33)" fg:x="24544833380" fg:w="4024485"/><text x="100.2009%" y="303.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,024,485 samples, 0.02%)</title><rect x="99.9509%" y="277" width="0.0164%" height="15" fill="rgb(229,154,42)" fg:x="24544833380" fg:w="4024485"/><text x="100.2009%" y="287.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (4,024,485 samples, 0.02%)</title><rect x="99.9509%" y="261" width="0.0164%" height="15" fill="rgb(228,114,26)" fg:x="24544833380" fg:w="4024485"/><text x="100.2009%" y="271.50"></text></g><g><title>all (24,556,880,962 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(208,144,1)" fg:x="0" fg:w="24556880962"/><text x="0.2500%" y="431.50"></text></g><g><title>img (24,556,880,962 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(239,112,37)" fg:x="0" fg:w="24556880962"/><text x="0.2500%" y="415.50">img</text></g><g><title>img::png::deflate::prefix_table::get_cl_codes_for_code_lengths (8,023,097 samples, 0.03%)</title><rect x="99.9673%" y="389" width="0.0327%" height="15" fill="rgb(210,96,50)" fg:x="24548857865" fg:w="8023097"/><text x="100.2173%" y="399.50"></text></g></svg></svg>