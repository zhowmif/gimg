<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="278738185691"><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44,940,546 samples, 0.02%)</title><rect x="0.0056%" y="101" width="0.0161%" height="15" fill="rgb(227,0,7)" fg:x="15537688" fg:w="44940546"/><text x="0.2556%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44,940,546 samples, 0.02%)</title><rect x="0.0056%" y="85" width="0.0161%" height="15" fill="rgb(217,0,24)" fg:x="15537688" fg:w="44940546"/><text x="0.2556%" y="95.50"></text></g><g><title>alloc::alloc::alloc (44,940,546 samples, 0.02%)</title><rect x="0.0056%" y="69" width="0.0161%" height="15" fill="rgb(221,193,54)" fg:x="15537688" fg:w="44940546"/><text x="0.2556%" y="79.50"></text></g><g><title>malloc (44,940,546 samples, 0.02%)</title><rect x="0.0056%" y="53" width="0.0161%" height="15" fill="rgb(248,212,6)" fg:x="15537688" fg:w="44940546"/><text x="0.2556%" y="63.50"></text></g><g><title>[libc.so.6] (41,667,882 samples, 0.01%)</title><rect x="0.0067%" y="37" width="0.0149%" height="15" fill="rgb(208,68,35)" fg:x="18810352" fg:w="41667882"/><text x="0.2567%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51,487,033 samples, 0.02%)</title><rect x="0.0044%" y="165" width="0.0185%" height="15" fill="rgb(232,128,0)" fg:x="12267484" fg:w="51487033"/><text x="0.2544%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (51,487,033 samples, 0.02%)</title><rect x="0.0044%" y="149" width="0.0185%" height="15" fill="rgb(207,160,47)" fg:x="12267484" fg:w="51487033"/><text x="0.2544%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (51,487,033 samples, 0.02%)</title><rect x="0.0044%" y="133" width="0.0185%" height="15" fill="rgb(228,23,34)" fg:x="12267484" fg:w="51487033"/><text x="0.2544%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (51,487,033 samples, 0.02%)</title><rect x="0.0044%" y="117" width="0.0185%" height="15" fill="rgb(218,30,26)" fg:x="12267484" fg:w="51487033"/><text x="0.2544%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (70,796,508 samples, 0.03%)</title><rect x="0.0015%" y="373" width="0.0254%" height="15" fill="rgb(220,122,19)" fg:x="4041796" fg:w="70796508"/><text x="0.2515%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (70,796,508 samples, 0.03%)</title><rect x="0.0015%" y="357" width="0.0254%" height="15" fill="rgb(250,228,42)" fg:x="4041796" fg:w="70796508"/><text x="0.2515%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (70,796,508 samples, 0.03%)</title><rect x="0.0015%" y="341" width="0.0254%" height="15" fill="rgb(240,193,28)" fg:x="4041796" fg:w="70796508"/><text x="0.2515%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (70,796,508 samples, 0.03%)</title><rect x="0.0015%" y="325" width="0.0254%" height="15" fill="rgb(216,20,37)" fg:x="4041796" fg:w="70796508"/><text x="0.2515%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70,796,508 samples, 0.03%)</title><rect x="0.0015%" y="309" width="0.0254%" height="15" fill="rgb(206,188,39)" fg:x="4041796" fg:w="70796508"/><text x="0.2515%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70,796,508 samples, 0.03%)</title><rect x="0.0015%" y="293" width="0.0254%" height="15" fill="rgb(217,207,13)" fg:x="4041796" fg:w="70796508"/><text x="0.2515%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70,796,508 samples, 0.03%)</title><rect x="0.0015%" y="277" width="0.0254%" height="15" fill="rgb(231,73,38)" fg:x="4041796" fg:w="70796508"/><text x="0.2515%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (70,796,508 samples, 0.03%)</title><rect x="0.0015%" y="261" width="0.0254%" height="15" fill="rgb(225,20,46)" fg:x="4041796" fg:w="70796508"/><text x="0.2515%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (62,570,820 samples, 0.02%)</title><rect x="0.0044%" y="245" width="0.0224%" height="15" fill="rgb(210,31,41)" fg:x="12267484" fg:w="62570820"/><text x="0.2544%" y="255.50"></text></g><g><title>core::clone::Clone::clone (62,570,820 samples, 0.02%)</title><rect x="0.0044%" y="229" width="0.0224%" height="15" fill="rgb(221,200,47)" fg:x="12267484" fg:w="62570820"/><text x="0.2544%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (62,570,820 samples, 0.02%)</title><rect x="0.0044%" y="213" width="0.0224%" height="15" fill="rgb(226,26,5)" fg:x="12267484" fg:w="62570820"/><text x="0.2544%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (62,570,820 samples, 0.02%)</title><rect x="0.0044%" y="197" width="0.0224%" height="15" fill="rgb(249,33,26)" fg:x="12267484" fg:w="62570820"/><text x="0.2544%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (62,570,820 samples, 0.02%)</title><rect x="0.0044%" y="181" width="0.0224%" height="15" fill="rgb(235,183,28)" fg:x="12267484" fg:w="62570820"/><text x="0.2544%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53,862,429 samples, 0.02%)</title><rect x="0.0323%" y="197" width="0.0193%" height="15" fill="rgb(221,5,38)" fg:x="89903600" fg:w="53862429"/><text x="0.2823%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53,862,429 samples, 0.02%)</title><rect x="0.0323%" y="181" width="0.0193%" height="15" fill="rgb(247,18,42)" fg:x="89903600" fg:w="53862429"/><text x="0.2823%" y="191.50"></text></g><g><title>alloc::alloc::alloc (53,862,429 samples, 0.02%)</title><rect x="0.0323%" y="165" width="0.0193%" height="15" fill="rgb(241,131,45)" fg:x="89903600" fg:w="53862429"/><text x="0.2823%" y="175.50"></text></g><g><title>malloc (53,862,429 samples, 0.02%)</title><rect x="0.0323%" y="149" width="0.0193%" height="15" fill="rgb(249,31,29)" fg:x="89903600" fg:w="53862429"/><text x="0.2823%" y="159.50"></text></g><g><title>[libc.so.6] (39,114,130 samples, 0.01%)</title><rect x="0.0375%" y="133" width="0.0140%" height="15" fill="rgb(225,111,53)" fg:x="104651899" fg:w="39114130"/><text x="0.2875%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (61,625,273 samples, 0.02%)</title><rect x="0.0323%" y="261" width="0.0221%" height="15" fill="rgb(238,160,17)" fg:x="89903600" fg:w="61625273"/><text x="0.2823%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (61,625,273 samples, 0.02%)</title><rect x="0.0323%" y="245" width="0.0221%" height="15" fill="rgb(214,148,48)" fg:x="89903600" fg:w="61625273"/><text x="0.2823%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (61,625,273 samples, 0.02%)</title><rect x="0.0323%" y="229" width="0.0221%" height="15" fill="rgb(232,36,49)" fg:x="89903600" fg:w="61625273"/><text x="0.2823%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (61,625,273 samples, 0.02%)</title><rect x="0.0323%" y="213" width="0.0221%" height="15" fill="rgb(209,103,24)" fg:x="89903600" fg:w="61625273"/><text x="0.2823%" y="223.50"></text></g><g><title>core::clone::Clone::clone (68,147,022 samples, 0.02%)</title><rect x="0.0311%" y="325" width="0.0244%" height="15" fill="rgb(229,88,8)" fg:x="86626887" fg:w="68147022"/><text x="0.2811%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (64,870,309 samples, 0.02%)</title><rect x="0.0323%" y="309" width="0.0233%" height="15" fill="rgb(213,181,19)" fg:x="89903600" fg:w="64870309"/><text x="0.2823%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (64,870,309 samples, 0.02%)</title><rect x="0.0323%" y="293" width="0.0233%" height="15" fill="rgb(254,191,54)" fg:x="89903600" fg:w="64870309"/><text x="0.2823%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (64,870,309 samples, 0.02%)</title><rect x="0.0323%" y="277" width="0.0233%" height="15" fill="rgb(241,83,37)" fg:x="89903600" fg:w="64870309"/><text x="0.2823%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (84,035,245 samples, 0.03%)</title><rect x="0.0268%" y="373" width="0.0301%" height="15" fill="rgb(233,36,39)" fg:x="74838304" fg:w="84035245"/><text x="0.2768%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (84,035,245 samples, 0.03%)</title><rect x="0.0268%" y="357" width="0.0301%" height="15" fill="rgb(226,3,54)" fg:x="74838304" fg:w="84035245"/><text x="0.2768%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (84,035,245 samples, 0.03%)</title><rect x="0.0268%" y="341" width="0.0301%" height="15" fill="rgb(245,192,40)" fg:x="74838304" fg:w="84035245"/><text x="0.2768%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,375,364,735 samples, 0.49%)</title><rect x="0.0674%" y="325" width="0.4934%" height="15" fill="rgb(238,167,29)" fg:x="187731508" fg:w="1375364735"/><text x="0.3174%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (36,522,553 samples, 0.01%)</title><rect x="0.5687%" y="149" width="0.0131%" height="15" fill="rgb(232,182,51)" fg:x="1585096018" fg:w="36522553"/><text x="0.8187%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (36,522,553 samples, 0.01%)</title><rect x="0.5687%" y="133" width="0.0131%" height="15" fill="rgb(231,60,39)" fg:x="1585096018" fg:w="36522553"/><text x="0.8187%" y="143.50"></text></g><g><title>cfree (36,522,553 samples, 0.01%)</title><rect x="0.5687%" y="117" width="0.0131%" height="15" fill="rgb(208,69,12)" fg:x="1585096018" fg:w="36522553"/><text x="0.8187%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (39,789,900 samples, 0.01%)</title><rect x="0.5687%" y="261" width="0.0143%" height="15" fill="rgb(235,93,37)" fg:x="1585096018" fg:w="39789900"/><text x="0.8187%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39,789,900 samples, 0.01%)</title><rect x="0.5687%" y="245" width="0.0143%" height="15" fill="rgb(213,116,39)" fg:x="1585096018" fg:w="39789900"/><text x="0.8187%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (39,789,900 samples, 0.01%)</title><rect x="0.5687%" y="229" width="0.0143%" height="15" fill="rgb(222,207,29)" fg:x="1585096018" fg:w="39789900"/><text x="0.8187%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39,789,900 samples, 0.01%)</title><rect x="0.5687%" y="213" width="0.0143%" height="15" fill="rgb(206,96,30)" fg:x="1585096018" fg:w="39789900"/><text x="0.8187%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (39,789,900 samples, 0.01%)</title><rect x="0.5687%" y="197" width="0.0143%" height="15" fill="rgb(218,138,4)" fg:x="1585096018" fg:w="39789900"/><text x="0.8187%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39,789,900 samples, 0.01%)</title><rect x="0.5687%" y="181" width="0.0143%" height="15" fill="rgb(250,191,14)" fg:x="1585096018" fg:w="39789900"/><text x="0.8187%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (39,789,900 samples, 0.01%)</title><rect x="0.5687%" y="165" width="0.0143%" height="15" fill="rgb(239,60,40)" fg:x="1585096018" fg:w="39789900"/><text x="0.8187%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56,771,415 samples, 0.02%)</title><rect x="0.5649%" y="293" width="0.0204%" height="15" fill="rgb(206,27,48)" fg:x="1574655788" fg:w="56771415"/><text x="0.8149%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56,771,415 samples, 0.02%)</title><rect x="0.5649%" y="277" width="0.0204%" height="15" fill="rgb(225,35,8)" fg:x="1574655788" fg:w="56771415"/><text x="0.8149%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,519,399,861 samples, 0.55%)</title><rect x="0.0674%" y="341" width="0.5451%" height="15" fill="rgb(250,213,24)" fg:x="187731508" fg:w="1519399861"/><text x="0.3174%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (144,035,126 samples, 0.05%)</title><rect x="0.5608%" y="325" width="0.0517%" height="15" fill="rgb(247,123,22)" fg:x="1563096243" fg:w="144035126"/><text x="0.8108%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (132,475,581 samples, 0.05%)</title><rect x="0.5649%" y="309" width="0.0475%" height="15" fill="rgb(231,138,38)" fg:x="1574655788" fg:w="132475581"/><text x="0.8149%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (71,678,807 samples, 0.03%)</title><rect x="0.5867%" y="293" width="0.0257%" height="15" fill="rgb(231,145,46)" fg:x="1635452562" fg:w="71678807"/><text x="0.8367%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (61,066,465 samples, 0.02%)</title><rect x="0.5905%" y="277" width="0.0219%" height="15" fill="rgb(251,118,11)" fg:x="1646064904" fg:w="61066465"/><text x="0.8405%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61,066,465 samples, 0.02%)</title><rect x="0.5905%" y="261" width="0.0219%" height="15" fill="rgb(217,147,25)" fg:x="1646064904" fg:w="61066465"/><text x="0.8405%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (61,066,465 samples, 0.02%)</title><rect x="0.5905%" y="245" width="0.0219%" height="15" fill="rgb(247,81,37)" fg:x="1646064904" fg:w="61066465"/><text x="0.8405%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61,066,465 samples, 0.02%)</title><rect x="0.5905%" y="229" width="0.0219%" height="15" fill="rgb(209,12,38)" fg:x="1646064904" fg:w="61066465"/><text x="0.8405%" y="239.50"></text></g><g><title>core::ptr::copy (61,066,465 samples, 0.02%)</title><rect x="0.5905%" y="213" width="0.0219%" height="15" fill="rgb(227,1,9)" fg:x="1646064904" fg:w="61066465"/><text x="0.8405%" y="223.50"></text></g><g><title>[libc.so.6] (61,066,465 samples, 0.02%)</title><rect x="0.5905%" y="197" width="0.0219%" height="15" fill="rgb(248,47,43)" fg:x="1646064904" fg:w="61066465"/><text x="0.8405%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,623,202,004 samples, 0.58%)</title><rect x="0.0570%" y="373" width="0.5823%" height="15" fill="rgb(221,10,30)" fg:x="158873549" fg:w="1623202004"/><text x="0.3070%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,608,077,822 samples, 0.58%)</title><rect x="0.0624%" y="357" width="0.5769%" height="15" fill="rgb(210,229,1)" fg:x="173997731" fg:w="1608077822"/><text x="0.3124%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (66,886,516 samples, 0.02%)</title><rect x="0.6153%" y="341" width="0.0240%" height="15" fill="rgb(222,148,37)" fg:x="1715189037" fg:w="66886516"/><text x="0.8653%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (66,886,516 samples, 0.02%)</title><rect x="0.6153%" y="325" width="0.0240%" height="15" fill="rgb(234,67,33)" fg:x="1715189037" fg:w="66886516"/><text x="0.8653%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (66,886,516 samples, 0.02%)</title><rect x="0.6153%" y="309" width="0.0240%" height="15" fill="rgb(247,98,35)" fg:x="1715189037" fg:w="66886516"/><text x="0.8653%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (66,886,516 samples, 0.02%)</title><rect x="0.6153%" y="293" width="0.0240%" height="15" fill="rgb(247,138,52)" fg:x="1715189037" fg:w="66886516"/><text x="0.8653%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (66,886,516 samples, 0.02%)</title><rect x="0.6153%" y="277" width="0.0240%" height="15" fill="rgb(213,79,30)" fg:x="1715189037" fg:w="66886516"/><text x="0.8653%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (59,474,281 samples, 0.02%)</title><rect x="0.6180%" y="261" width="0.0213%" height="15" fill="rgb(246,177,23)" fg:x="1722601272" fg:w="59474281"/><text x="0.8680%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (59,474,281 samples, 0.02%)</title><rect x="0.6180%" y="245" width="0.0213%" height="15" fill="rgb(230,62,27)" fg:x="1722601272" fg:w="59474281"/><text x="0.8680%" y="255.50"></text></g><g><title>alloc::alloc::alloc (59,474,281 samples, 0.02%)</title><rect x="0.6180%" y="229" width="0.0213%" height="15" fill="rgb(216,154,8)" fg:x="1722601272" fg:w="59474281"/><text x="0.8680%" y="239.50"></text></g><g><title>malloc (59,474,281 samples, 0.02%)</title><rect x="0.6180%" y="213" width="0.0213%" height="15" fill="rgb(244,35,45)" fg:x="1722601272" fg:w="59474281"/><text x="0.8680%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,188,304,218 samples, 1.86%)</title><rect x="7.8598%" y="293" width="1.8614%" height="15" fill="rgb(251,115,12)" fg:x="21908242987" fg:w="5188304218"/><text x="8.1098%" y="303.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,201,040,969 samples, 0.43%)</title><rect x="9.2903%" y="277" width="0.4309%" height="15" fill="rgb(240,54,50)" fg:x="25895506236" fg:w="1201040969"/><text x="9.5403%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,578,131,011 samples, 3.08%)</title><rect x="7.8598%" y="357" width="3.0775%" height="15" fill="rgb(233,84,52)" fg:x="21908242987" fg:w="8578131011"/><text x="8.1098%" y="367.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::find (8,578,131,011 samples, 3.08%)</title><rect x="7.8598%" y="341" width="3.0775%" height="15" fill="rgb(207,117,47)" fg:x="21908242987" fg:w="8578131011"/><text x="8.1098%" y="351.50">cor..</text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8,578,131,011 samples, 3.08%)</title><rect x="7.8598%" y="325" width="3.0775%" height="15" fill="rgb(249,43,39)" fg:x="21908242987" fg:w="8578131011"/><text x="8.1098%" y="335.50">&lt;al..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8,578,131,011 samples, 3.08%)</title><rect x="7.8598%" y="309" width="3.0775%" height="15" fill="rgb(209,38,44)" fg:x="21908242987" fg:w="8578131011"/><text x="8.1098%" y="319.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,389,826,793 samples, 1.22%)</title><rect x="9.7211%" y="293" width="1.2161%" height="15" fill="rgb(236,212,23)" fg:x="27096547205" fg:w="3389826793"/><text x="9.9711%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (3,389,826,793 samples, 1.22%)</title><rect x="9.7211%" y="277" width="1.2161%" height="15" fill="rgb(242,79,21)" fg:x="27096547205" fg:w="3389826793"/><text x="9.9711%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,389,826,793 samples, 1.22%)</title><rect x="9.7211%" y="261" width="1.2161%" height="15" fill="rgb(211,96,35)" fg:x="27096547205" fg:w="3389826793"/><text x="9.9711%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (3,389,826,793 samples, 1.22%)</title><rect x="9.7211%" y="245" width="1.2161%" height="15" fill="rgb(253,215,40)" fg:x="27096547205" fg:w="3389826793"/><text x="9.9711%" y="255.50"></text></g><g><title>core::cmp::Ord::min (1,962,468,500 samples, 0.70%)</title><rect x="15.7119%" y="309" width="0.7041%" height="15" fill="rgb(211,81,21)" fg:x="43795038616" fg:w="1962468500"/><text x="15.9619%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2,465,612,058 samples, 0.88%)</title><rect x="16.5466%" y="277" width="0.8846%" height="15" fill="rgb(208,190,38)" fg:x="46121677499" fg:w="2465612058"/><text x="16.7966%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,431,300,802 samples, 1.23%)</title><rect x="16.4159%" y="309" width="1.2310%" height="15" fill="rgb(235,213,38)" fg:x="45757507116" fg:w="3431300802"/><text x="16.6659%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,431,300,802 samples, 1.23%)</title><rect x="16.4159%" y="293" width="1.2310%" height="15" fill="rgb(237,122,38)" fg:x="45757507116" fg:w="3431300802"/><text x="16.6659%" y="303.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (601,518,361 samples, 0.22%)</title><rect x="17.4312%" y="277" width="0.2158%" height="15" fill="rgb(244,218,35)" fg:x="48587289557" fg:w="601518361"/><text x="17.6812%" y="287.50"></text></g><g><title>core::cmp::min (1,948,831,690 samples, 0.70%)</title><rect x="18.2643%" y="245" width="0.6992%" height="15" fill="rgb(240,68,47)" fg:x="50909606294" fg:w="1948831690"/><text x="18.5143%" y="255.50"></text></g><g><title>core::cmp::Ord::min (1,948,831,690 samples, 0.70%)</title><rect x="18.2643%" y="229" width="0.6992%" height="15" fill="rgb(210,16,53)" fg:x="50909606294" fg:w="1948831690"/><text x="18.5143%" y="239.50"></text></g><g><title>core::iter::adapters::zip::zip (5,290,926,524 samples, 1.90%)</title><rect x="18.2643%" y="277" width="1.8982%" height="15" fill="rgb(235,124,12)" fg:x="50909606294" fg:w="5290926524"/><text x="18.5143%" y="287.50">c..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (5,290,926,524 samples, 1.90%)</title><rect x="18.2643%" y="261" width="1.8982%" height="15" fill="rgb(224,169,11)" fg:x="50909606294" fg:w="5290926524"/><text x="18.5143%" y="271.50">&lt;..</text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (3,342,094,834 samples, 1.20%)</title><rect x="18.9635%" y="245" width="1.1990%" height="15" fill="rgb(250,166,2)" fg:x="52858437984" fg:w="3342094834"/><text x="19.2135%" y="255.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3,342,094,834 samples, 1.20%)</title><rect x="18.9635%" y="229" width="1.1990%" height="15" fill="rgb(242,216,29)" fg:x="52858437984" fg:w="3342094834"/><text x="19.2135%" y="239.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (18,477,736,569 samples, 6.63%)</title><rect x="22.0314%" y="197" width="6.6291%" height="15" fill="rgb(230,116,27)" fg:x="61409787906" fg:w="18477736569"/><text x="22.2814%" y="207.50">core::ops..</text></g><g><title>core::iter::traits::iterator::Iterator::count::_{{closure}} (18,477,736,569 samples, 6.63%)</title><rect x="22.0314%" y="181" width="6.6291%" height="15" fill="rgb(228,99,48)" fg:x="61409787906" fg:w="18477736569"/><text x="22.2814%" y="191.50">core::ite..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (39,935,978,981 samples, 14.33%)</title><rect x="36.7199%" y="149" width="14.3274%" height="15" fill="rgb(253,11,6)" fg:x="102352378511" fg:w="39935978981"/><text x="36.9699%" y="159.50">core::cmp::impls::&lt;imp..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (127,458,326,294 samples, 45.73%)</title><rect x="20.9130%" y="213" width="45.7269%" height="15" fill="rgb(247,143,39)" fg:x="58292395064" fg:w="127458326294"/><text x="21.1630%" y="223.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::it..</text></g><g><title>img::png::deflate::lzss::hash::chunked_number_of_matching_bytes::_{{closure}} (105,863,196,883 samples, 37.98%)</title><rect x="28.6604%" y="197" width="37.9794%" height="15" fill="rgb(236,97,10)" fg:x="79887524475" fg:w="105863196883"/><text x="28.9104%" y="207.50">img::png::deflate::lzss::hash::chunked_number_of_matching_byte..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (105,863,196,883 samples, 37.98%)</title><rect x="28.6604%" y="181" width="37.9794%" height="15" fill="rgb(233,208,19)" fg:x="79887524475" fg:w="105863196883"/><text x="28.9104%" y="191.50">core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (105,863,196,883 samples, 37.98%)</title><rect x="28.6604%" y="165" width="37.9794%" height="15" fill="rgb(216,164,2)" fg:x="79887524475" fg:w="105863196883"/><text x="28.9104%" y="175.50">core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (43,462,363,866 samples, 15.59%)</title><rect x="51.0473%" y="149" width="15.5925%" height="15" fill="rgb(220,129,5)" fg:x="142288357492" fg:w="43462363866"/><text x="51.2973%" y="159.50">core::slice::cmp::&lt;impl ..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (43,462,363,866 samples, 15.59%)</title><rect x="51.0473%" y="133" width="15.5925%" height="15" fill="rgb(242,17,10)" fg:x="142288357492" fg:w="43462363866"/><text x="51.2973%" y="143.50">&lt;[A] as core::slice::cmp..</text></g><g><title>[libc.so.6] (39,516,611,800 samples, 14.18%)</title><rect x="52.4629%" y="117" width="14.1770%" height="15" fill="rgb(242,107,0)" fg:x="146234109558" fg:w="39516611800"/><text x="52.7129%" y="127.50">[libc.so.6]</text></g><g><title>core::iter::traits::iterator::Iterator::count (155,656,798,646 samples, 55.84%)</title><rect x="20.1625%" y="277" width="55.8434%" height="15" fill="rgb(251,28,31)" fg:x="56200532818" fg:w="155656798646"/><text x="20.4125%" y="287.50">core::iter::traits::iterator::Iterator::count</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (155,656,798,646 samples, 55.84%)</title><rect x="20.1625%" y="261" width="55.8434%" height="15" fill="rgb(233,223,10)" fg:x="56200532818" fg:w="155656798646"/><text x="20.4125%" y="271.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (155,656,798,646 samples, 55.84%)</title><rect x="20.1625%" y="245" width="55.8434%" height="15" fill="rgb(215,21,27)" fg:x="56200532818" fg:w="155656798646"/><text x="20.4125%" y="255.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (155,656,798,646 samples, 55.84%)</title><rect x="20.1625%" y="229" width="55.8434%" height="15" fill="rgb(232,23,21)" fg:x="56200532818" fg:w="155656798646"/><text x="20.4125%" y="239.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (26,106,610,106 samples, 9.37%)</title><rect x="66.6399%" y="213" width="9.3660%" height="15" fill="rgb(244,5,23)" fg:x="185750721358" fg:w="26106610106"/><text x="66.8899%" y="223.50">&lt;core::iter::..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (26,106,610,106 samples, 9.37%)</title><rect x="66.6399%" y="197" width="9.3660%" height="15" fill="rgb(226,81,46)" fg:x="185750721358" fg:w="26106610106"/><text x="66.8899%" y="207.50">&lt;core::iter::..</text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (1,325,737,257 samples, 0.48%)</title><rect x="75.5302%" y="181" width="0.4756%" height="15" fill="rgb(247,70,30)" fg:x="210531594207" fg:w="1325737257"/><text x="75.7802%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,325,737,257 samples, 0.48%)</title><rect x="75.5302%" y="165" width="0.4756%" height="15" fill="rgb(212,68,19)" fg:x="210531594207" fg:w="1325737257"/><text x="75.7802%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (213,945,818,715 samples, 76.76%)</title><rect x="0.6432%" y="373" width="76.7551%" height="15" fill="rgb(240,187,13)" fg:x="1792758673" fg:w="213945818715"/><text x="0.8932%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (185,252,203,390 samples, 66.46%)</title><rect x="10.9373%" y="357" width="66.4610%" height="15" fill="rgb(223,113,26)" fg:x="30486373998" fg:w="185252203390"/><text x="11.1873%" y="367.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (185,252,203,390 samples, 66.46%)</title><rect x="10.9373%" y="341" width="66.4610%" height="15" fill="rgb(206,192,2)" fg:x="30486373998" fg:w="185252203390"/><text x="11.1873%" y="351.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (185,252,203,390 samples, 66.46%)</title><rect x="10.9373%" y="325" width="66.4610%" height="15" fill="rgb(241,108,4)" fg:x="30486373998" fg:w="185252203390"/><text x="11.1873%" y="335.50">img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}}</text></g><g><title>img::png::deflate::lzss::hash::number_of_matching_bytes (166,549,769,470 samples, 59.75%)</title><rect x="17.6470%" y="309" width="59.7513%" height="15" fill="rgb(247,173,49)" fg:x="49188807918" fg:w="166549769470"/><text x="17.8970%" y="319.50">img::png::deflate::lzss::hash::number_of_matching_bytes</text></g><g><title>img::png::deflate::lzss::hash::chunked_number_of_matching_bytes (166,549,769,470 samples, 59.75%)</title><rect x="17.6470%" y="293" width="59.7513%" height="15" fill="rgb(224,114,35)" fg:x="49188807918" fg:w="166549769470"/><text x="17.8970%" y="303.50">img::png::deflate::lzss::hash::chunked_number_of_matching_bytes</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,881,245,924 samples, 1.39%)</title><rect x="76.0059%" y="277" width="1.3924%" height="15" fill="rgb(245,159,27)" fg:x="211857331464" fg:w="3881245924"/><text x="76.2559%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,881,245,924 samples, 1.39%)</title><rect x="76.0059%" y="261" width="1.3924%" height="15" fill="rgb(245,172,44)" fg:x="211857331464" fg:w="3881245924"/><text x="76.2559%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,629,390,564 samples, 0.58%)</title><rect x="76.8137%" y="245" width="0.5846%" height="15" fill="rgb(236,23,11)" fg:x="214109186824" fg:w="1629390564"/><text x="77.0637%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,629,390,564 samples, 0.58%)</title><rect x="76.8137%" y="229" width="0.5846%" height="15" fill="rgb(205,117,38)" fg:x="214109186824" fg:w="1629390564"/><text x="77.0637%" y="239.50"></text></g><g><title>[img] (50,875,973 samples, 0.02%)</title><rect x="77.4044%" y="373" width="0.0183%" height="15" fill="rgb(237,72,25)" fg:x="215755516361" fg:w="50875973"/><text x="77.6544%" y="383.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (34,562,866 samples, 0.01%)</title><rect x="77.4102%" y="357" width="0.0124%" height="15" fill="rgb(244,70,9)" fg:x="215771829468" fg:w="34562866"/><text x="77.6602%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (240,440,107 samples, 0.09%)</title><rect x="79.1670%" y="293" width="0.0863%" height="15" fill="rgb(217,125,39)" fg:x="220668603245" fg:w="240440107"/><text x="79.4170%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (13,801,257,756 samples, 4.95%)</title><rect x="77.4492%" y="309" width="4.9513%" height="15" fill="rgb(235,36,10)" fg:x="215880379937" fg:w="13801257756"/><text x="77.6992%" y="319.50">alloc:..</text></g><g><title>core::ptr::write (8,772,594,341 samples, 3.15%)</title><rect x="79.2532%" y="293" width="3.1473%" height="15" fill="rgb(251,123,47)" fg:x="220909043352" fg:w="8772594341"/><text x="79.5032%" y="303.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13,830,586,972 samples, 4.96%)</title><rect x="77.4492%" y="325" width="4.9619%" height="15" fill="rgb(221,13,13)" fg:x="215880379937" fg:w="13830586972"/><text x="77.6992%" y="335.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (29,329,216 samples, 0.01%)</title><rect x="82.4005%" y="309" width="0.0105%" height="15" fill="rgb(238,131,9)" fg:x="229681637693" fg:w="29329216"/><text x="82.6505%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (29,329,216 samples, 0.01%)</title><rect x="82.4005%" y="293" width="0.0105%" height="15" fill="rgb(211,50,8)" fg:x="229681637693" fg:w="29329216"/><text x="82.6505%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13,862,770,180 samples, 4.97%)</title><rect x="77.4388%" y="357" width="4.9734%" height="15" fill="rgb(245,182,24)" fg:x="215851495414" fg:w="13862770180"/><text x="77.6888%" y="367.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (13,858,867,963 samples, 4.97%)</title><rect x="77.4402%" y="341" width="4.9720%" height="15" fill="rgb(242,14,37)" fg:x="215855397631" fg:w="13858867963"/><text x="77.6902%" y="351.50">&lt;alloc..</text></g><g><title>core::cmp::PartialEq::ne (1,741,387,008 samples, 0.62%)</title><rect x="83.3302%" y="341" width="0.6247%" height="15" fill="rgb(246,228,12)" fg:x="232273221292" fg:w="1741387008"/><text x="83.5802%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,741,387,008 samples, 0.62%)</title><rect x="83.3302%" y="325" width="0.6247%" height="15" fill="rgb(213,55,15)" fg:x="232273221292" fg:w="1741387008"/><text x="83.5802%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7,182,529,476 samples, 2.58%)</title><rect x="83.9550%" y="325" width="2.5768%" height="15" fill="rgb(209,9,3)" fg:x="234014608300" fg:w="7182529476"/><text x="84.2050%" y="335.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (2,865,768,996 samples, 1.03%)</title><rect x="85.5037%" y="309" width="1.0281%" height="15" fill="rgb(230,59,30)" fg:x="238331368780" fg:w="2865768996"/><text x="85.7537%" y="319.50"></text></g><g><title>core::cmp::min_by (2,865,768,996 samples, 1.03%)</title><rect x="85.5037%" y="293" width="1.0281%" height="15" fill="rgb(209,121,21)" fg:x="238331368780" fg:w="2865768996"/><text x="85.7537%" y="303.50"></text></g><g><title>core::cmp::Ordering::is_lt (207,005,935 samples, 0.07%)</title><rect x="86.4575%" y="277" width="0.0743%" height="15" fill="rgb(220,109,13)" fg:x="240990131841" fg:w="207005935"/><text x="86.7075%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,688,421,666 samples, 0.61%)</title><rect x="88.5094%" y="309" width="0.6057%" height="15" fill="rgb(232,18,1)" fg:x="246709608288" fg:w="1688421666"/><text x="88.7594%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (200,403,891 samples, 0.07%)</title><rect x="89.1811%" y="261" width="0.0719%" height="15" fill="rgb(215,41,42)" fg:x="248581826833" fg:w="200403891"/><text x="89.4311%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (200,403,891 samples, 0.07%)</title><rect x="89.1811%" y="245" width="0.0719%" height="15" fill="rgb(224,123,36)" fg:x="248581826833" fg:w="200403891"/><text x="89.4311%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (185,492,514 samples, 0.07%)</title><rect x="89.1865%" y="229" width="0.0665%" height="15" fill="rgb(240,125,3)" fg:x="248596738210" fg:w="185492514"/><text x="89.4365%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (185,492,514 samples, 0.07%)</title><rect x="89.1865%" y="213" width="0.0665%" height="15" fill="rgb(205,98,50)" fg:x="248596738210" fg:w="185492514"/><text x="89.4365%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (185,492,514 samples, 0.07%)</title><rect x="89.1865%" y="197" width="0.0665%" height="15" fill="rgb(205,185,37)" fg:x="248596738210" fg:w="185492514"/><text x="89.4365%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (185,492,514 samples, 0.07%)</title><rect x="89.1865%" y="181" width="0.0665%" height="15" fill="rgb(238,207,15)" fg:x="248596738210" fg:w="185492514"/><text x="89.4365%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,368,654,573 samples, 0.85%)</title><rect x="89.1152%" y="309" width="0.8498%" height="15" fill="rgb(213,199,42)" fg:x="248398029954" fg:w="2368654573"/><text x="89.3652%" y="319.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}}::_{{closure}} (2,368,654,573 samples, 0.85%)</title><rect x="89.1152%" y="293" width="0.8498%" height="15" fill="rgb(235,201,11)" fg:x="248398029954" fg:w="2368654573"/><text x="89.3652%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,184,857,694 samples, 0.78%)</title><rect x="89.1811%" y="277" width="0.7838%" height="15" fill="rgb(207,46,11)" fg:x="248581826833" fg:w="2184857694"/><text x="89.4311%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,984,453,803 samples, 0.71%)</title><rect x="89.2530%" y="261" width="0.7119%" height="15" fill="rgb(241,35,35)" fg:x="248782230724" fg:w="1984453803"/><text x="89.5030%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,984,453,803 samples, 0.71%)</title><rect x="89.2530%" y="245" width="0.7119%" height="15" fill="rgb(243,32,47)" fg:x="248782230724" fg:w="1984453803"/><text x="89.5030%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (31,255,377,256 samples, 11.21%)</title><rect x="83.9550%" y="341" width="11.2132%" height="15" fill="rgb(247,202,23)" fg:x="234014608300" fg:w="31255377256"/><text x="84.2050%" y="351.50">core::iter::adapt..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (24,072,847,780 samples, 8.64%)</title><rect x="86.5318%" y="325" width="8.6364%" height="15" fill="rgb(219,102,11)" fg:x="241197137776" fg:w="24072847780"/><text x="86.7818%" y="335.50">img::png::de..</text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (14,503,301,029 samples, 5.20%)</title><rect x="89.9650%" y="309" width="5.2032%" height="15" fill="rgb(243,110,44)" fg:x="250766684527" fg:w="14503301029"/><text x="90.2150%" y="319.50">img::p..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (5,508,007,162 samples, 1.98%)</title><rect x="93.1921%" y="293" width="1.9761%" height="15" fill="rgb(222,74,54)" fg:x="259761978394" fg:w="5508007162"/><text x="93.4421%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u16,u16)&gt;&gt; (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="341" width="0.0131%" height="15" fill="rgb(216,99,12)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="325" width="0.0131%" height="15" fill="rgb(226,22,26)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u16,u16),alloc::alloc::Global&gt;&gt; (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="309" width="0.0131%" height="15" fill="rgb(217,163,10)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="293" width="0.0131%" height="15" fill="rgb(213,25,53)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u16,u16)&gt;&gt; (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="277" width="0.0131%" height="15" fill="rgb(252,105,26)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="261" width="0.0131%" height="15" fill="rgb(220,39,43)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="245" width="0.0131%" height="15" fill="rgb(229,68,48)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="229" width="0.0131%" height="15" fill="rgb(252,8,32)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="213" width="0.0131%" height="15" fill="rgb(223,20,43)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="223.50"></text></g><g><title>cfree (36,519,866 samples, 0.01%)</title><rect x="95.1682%" y="197" width="0.0131%" height="15" fill="rgb(229,81,49)" fg:x="265269985556" fg:w="36519866"/><text x="95.4182%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (294,264,849 samples, 0.11%)</title><rect x="95.1813%" y="341" width="0.1056%" height="15" fill="rgb(236,28,36)" fg:x="265306505422" fg:w="294264849"/><text x="95.4313%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36,084,903,252 samples, 12.95%)</title><rect x="82.4122%" y="357" width="12.9458%" height="15" fill="rgb(249,185,26)" fg:x="229714265594" fg:w="36084903252"/><text x="82.6622%" y="367.50">&lt;alloc::vec::into_i..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (198,398,575 samples, 0.07%)</title><rect x="95.2868%" y="341" width="0.0712%" height="15" fill="rgb(249,174,33)" fg:x="265600770271" fg:w="198398575"/><text x="95.5368%" y="351.50"></text></g><g><title>core::ptr::read (198,398,575 samples, 0.07%)</title><rect x="95.2868%" y="325" width="0.0712%" height="15" fill="rgb(233,201,37)" fg:x="265600770271" fg:w="198398575"/><text x="95.5368%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (31,369,176 samples, 0.01%)</title><rect x="95.3580%" y="357" width="0.0113%" height="15" fill="rgb(221,78,26)" fg:x="265799168846" fg:w="31369176"/><text x="95.6080%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (31,369,176 samples, 0.01%)</title><rect x="95.3580%" y="341" width="0.0113%" height="15" fill="rgb(250,127,30)" fg:x="265799168846" fg:w="31369176"/><text x="95.6080%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (31,369,176 samples, 0.01%)</title><rect x="95.3580%" y="325" width="0.0113%" height="15" fill="rgb(230,49,44)" fg:x="265799168846" fg:w="31369176"/><text x="95.6080%" y="335.50"></text></g><g><title>[img] (41,387,099 samples, 0.01%)</title><rect x="95.3693%" y="357" width="0.0148%" height="15" fill="rgb(229,67,23)" fg:x="265830538022" fg:w="41387099"/><text x="95.6193%" y="367.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (41,387,099 samples, 0.01%)</title><rect x="95.3693%" y="341" width="0.0148%" height="15" fill="rgb(249,83,47)" fg:x="265830538022" fg:w="41387099"/><text x="95.6193%" y="351.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (41,387,099 samples, 0.01%)</title><rect x="95.3693%" y="325" width="0.0148%" height="15" fill="rgb(215,43,3)" fg:x="265830538022" fg:w="41387099"/><text x="95.6193%" y="335.50"></text></g><g><title>[libc.so.6] (588,836,909 samples, 0.21%)</title><rect x="95.3841%" y="357" width="0.2113%" height="15" fill="rgb(238,154,13)" fg:x="265871925121" fg:w="588836909"/><text x="95.6341%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (69,193,632 samples, 0.02%)</title><rect x="95.5967%" y="341" width="0.0248%" height="15" fill="rgb(219,56,2)" fg:x="266464619733" fg:w="69193632"/><text x="95.8467%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (69,193,632 samples, 0.02%)</title><rect x="95.5967%" y="325" width="0.0248%" height="15" fill="rgb(233,0,4)" fg:x="266464619733" fg:w="69193632"/><text x="95.8467%" y="335.50"></text></g><g><title>[unknown] (83,960,686 samples, 0.03%)</title><rect x="95.5954%" y="357" width="0.0301%" height="15" fill="rgb(235,30,7)" fg:x="266460762030" fg:w="83960686"/><text x="95.8454%" y="367.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2,152,871,083 samples, 0.77%)</title><rect x="97.1890%" y="325" width="0.7724%" height="15" fill="rgb(250,79,13)" fg:x="270902896829" fg:w="2152871083"/><text x="97.4390%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (2,152,871,083 samples, 0.77%)</title><rect x="97.1890%" y="309" width="0.7724%" height="15" fill="rgb(211,146,34)" fg:x="270902896829" fg:w="2152871083"/><text x="97.4390%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,152,871,083 samples, 0.77%)</title><rect x="97.1890%" y="293" width="0.7724%" height="15" fill="rgb(228,22,38)" fg:x="270902896829" fg:w="2152871083"/><text x="97.4390%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,152,871,083 samples, 0.77%)</title><rect x="97.1890%" y="277" width="0.7724%" height="15" fill="rgb(235,168,5)" fg:x="270902896829" fg:w="2152871083"/><text x="97.4390%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,152,871,083 samples, 0.77%)</title><rect x="97.1890%" y="261" width="0.7724%" height="15" fill="rgb(221,155,16)" fg:x="270902896829" fg:w="2152871083"/><text x="97.4390%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (1,052,918,207 samples, 0.38%)</title><rect x="97.9614%" y="325" width="0.3777%" height="15" fill="rgb(215,215,53)" fg:x="273055767912" fg:w="1052918207"/><text x="98.2114%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert::_{{closure}} (1,052,918,207 samples, 0.38%)</title><rect x="97.9614%" y="309" width="0.3777%" height="15" fill="rgb(223,4,10)" fg:x="273055767912" fg:w="1052918207"/><text x="98.2114%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (1,084,710,270 samples, 0.39%)</title><rect x="98.4633%" y="277" width="0.3892%" height="15" fill="rgb(234,103,6)" fg:x="274454789414" fg:w="1084710270"/><text x="98.7133%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (1,812,868,190 samples, 0.65%)</title><rect x="98.4633%" y="309" width="0.6504%" height="15" fill="rgb(227,97,0)" fg:x="274454789414" fg:w="1812868190"/><text x="98.7133%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (1,812,868,190 samples, 0.65%)</title><rect x="98.4633%" y="293" width="0.6504%" height="15" fill="rgb(234,150,53)" fg:x="274454789414" fg:w="1812868190"/><text x="98.7133%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (728,157,920 samples, 0.26%)</title><rect x="98.8524%" y="277" width="0.2612%" height="15" fill="rgb(228,201,54)" fg:x="275539499684" fg:w="728157920"/><text x="99.1024%" y="287.50"></text></g><g><title>core::ptr::copy (71,308,848 samples, 0.03%)</title><rect x="99.1137%" y="293" width="0.0256%" height="15" fill="rgb(222,22,37)" fg:x="276267657604" fg:w="71308848"/><text x="99.3637%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (10,171,838,259 samples, 3.65%)</title><rect x="95.6281%" y="357" width="3.6492%" height="15" fill="rgb(237,53,32)" fg:x="266552095178" fg:w="10171838259"/><text x="95.8781%" y="367.50">allo..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (10,167,835,879 samples, 3.65%)</title><rect x="95.6296%" y="341" width="3.6478%" height="15" fill="rgb(233,25,53)" fg:x="266556097558" fg:w="10167835879"/><text x="95.8796%" y="351.50">allo..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::swap (2,615,247,318 samples, 0.94%)</title><rect x="98.3391%" y="325" width="0.9382%" height="15" fill="rgb(210,40,34)" fg:x="274108686119" fg:w="2615247318"/><text x="98.5891%" y="335.50"></text></g><g><title>core::ptr::swap (456,275,833 samples, 0.16%)</title><rect x="99.1137%" y="309" width="0.1637%" height="15" fill="rgb(241,220,44)" fg:x="276267657604" fg:w="456275833"/><text x="99.3637%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (384,966,985 samples, 0.14%)</title><rect x="99.1393%" y="293" width="0.1381%" height="15" fill="rgb(235,28,35)" fg:x="276338966452" fg:w="384966985"/><text x="99.3893%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (76,870,264 samples, 0.03%)</title><rect x="99.2787%" y="357" width="0.0276%" height="15" fill="rgb(210,56,17)" fg:x="276727569730" fg:w="76870264"/><text x="99.5287%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (61,780,181 samples, 0.02%)</title><rect x="99.2841%" y="341" width="0.0222%" height="15" fill="rgb(224,130,29)" fg:x="276742659813" fg:w="61780181"/><text x="99.5341%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (61,780,181 samples, 0.02%)</title><rect x="99.2841%" y="325" width="0.0222%" height="15" fill="rgb(235,212,8)" fg:x="276742659813" fg:w="61780181"/><text x="99.5341%" y="335.50"></text></g><g><title>alloc::alloc::realloc (61,780,181 samples, 0.02%)</title><rect x="99.2841%" y="309" width="0.0222%" height="15" fill="rgb(223,33,50)" fg:x="276742659813" fg:w="61780181"/><text x="99.5341%" y="319.50"></text></g><g><title>realloc (57,791,565 samples, 0.02%)</title><rect x="99.2855%" y="293" width="0.0207%" height="15" fill="rgb(219,149,13)" fg:x="276746648429" fg:w="57791565"/><text x="99.5355%" y="303.50"></text></g><g><title>[libc.so.6] (57,791,565 samples, 0.02%)</title><rect x="99.2855%" y="277" width="0.0207%" height="15" fill="rgb(250,156,29)" fg:x="276746648429" fg:w="57791565"/><text x="99.5355%" y="287.50"></text></g><g><title>[libc.so.6] (50,440,816 samples, 0.02%)</title><rect x="99.2882%" y="261" width="0.0181%" height="15" fill="rgb(216,193,19)" fg:x="276753999178" fg:w="50440816"/><text x="99.5382%" y="271.50"></text></g><g><title>[libc.so.6] (29,455,563 samples, 0.01%)</title><rect x="99.2957%" y="245" width="0.0106%" height="15" fill="rgb(216,135,14)" fg:x="276774984431" fg:w="29455563"/><text x="99.5457%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (59,161,051 samples, 0.02%)</title><rect x="99.3063%" y="341" width="0.0212%" height="15" fill="rgb(241,47,5)" fg:x="276804439994" fg:w="59161051"/><text x="99.5563%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (59,161,051 samples, 0.02%)</title><rect x="99.3063%" y="325" width="0.0212%" height="15" fill="rgb(233,42,35)" fg:x="276804439994" fg:w="59161051"/><text x="99.5563%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (59,161,051 samples, 0.02%)</title><rect x="99.3063%" y="309" width="0.0212%" height="15" fill="rgb(231,13,6)" fg:x="276804439994" fg:w="59161051"/><text x="99.5563%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (32,987,056 samples, 0.01%)</title><rect x="99.3156%" y="293" width="0.0118%" height="15" fill="rgb(207,181,40)" fg:x="276830613989" fg:w="32987056"/><text x="99.5656%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (62,822,357 samples, 0.02%)</title><rect x="99.3063%" y="357" width="0.0225%" height="15" fill="rgb(254,173,49)" fg:x="276804439994" fg:w="62822357"/><text x="99.5563%" y="367.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (48,948,216 samples, 0.02%)</title><rect x="99.3541%" y="357" width="0.0176%" height="15" fill="rgb(221,1,38)" fg:x="276937678909" fg:w="48948216"/><text x="99.6041%" y="367.50"></text></g><g><title>[libc.so.6] (794,297,643 samples, 0.28%)</title><rect x="99.4124%" y="229" width="0.2850%" height="15" fill="rgb(206,124,46)" fg:x="277100195019" fg:w="794297643"/><text x="99.6624%" y="239.50"></text></g><g><title>[libc.so.6] (662,523,446 samples, 0.24%)</title><rect x="99.4596%" y="213" width="0.2377%" height="15" fill="rgb(249,21,11)" fg:x="277231969216" fg:w="662523446"/><text x="99.7096%" y="223.50"></text></g><g><title>[libc.so.6] (43,927,593 samples, 0.02%)</title><rect x="99.6816%" y="197" width="0.0158%" height="15" fill="rgb(222,201,40)" fg:x="277850565069" fg:w="43927593"/><text x="99.9316%" y="207.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (871,510,181 samples, 0.31%)</title><rect x="99.3859%" y="357" width="0.3127%" height="15" fill="rgb(235,61,29)" fg:x="277026523280" fg:w="871510181"/><text x="99.6359%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (867,842,459 samples, 0.31%)</title><rect x="99.3872%" y="341" width="0.3113%" height="15" fill="rgb(219,207,3)" fg:x="277030191002" fg:w="867842459"/><text x="99.6372%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (867,842,459 samples, 0.31%)</title><rect x="99.3872%" y="325" width="0.3113%" height="15" fill="rgb(222,56,46)" fg:x="277030191002" fg:w="867842459"/><text x="99.6372%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (867,842,459 samples, 0.31%)</title><rect x="99.3872%" y="309" width="0.3113%" height="15" fill="rgb(239,76,54)" fg:x="277030191002" fg:w="867842459"/><text x="99.6372%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (864,183,116 samples, 0.31%)</title><rect x="99.3886%" y="293" width="0.3100%" height="15" fill="rgb(231,124,27)" fg:x="277033850345" fg:w="864183116"/><text x="99.6386%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (864,183,116 samples, 0.31%)</title><rect x="99.3886%" y="277" width="0.3100%" height="15" fill="rgb(249,195,6)" fg:x="277033850345" fg:w="864183116"/><text x="99.6386%" y="287.50"></text></g><g><title>alloc::alloc::realloc (860,721,201 samples, 0.31%)</title><rect x="99.3898%" y="261" width="0.3088%" height="15" fill="rgb(237,174,47)" fg:x="277037312260" fg:w="860721201"/><text x="99.6398%" y="271.50"></text></g><g><title>realloc (845,299,761 samples, 0.30%)</title><rect x="99.3953%" y="245" width="0.3033%" height="15" fill="rgb(206,201,31)" fg:x="277052733700" fg:w="845299761"/><text x="99.6453%" y="255.50"></text></g><g><title>[unknown] (62,110,358,507 samples, 22.28%)</title><rect x="77.4277%" y="373" width="22.2827%" height="15" fill="rgb(231,57,52)" fg:x="215820655836" fg:w="62110358507"/><text x="77.6777%" y="383.50">[unknown]</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (106,643,413 samples, 0.04%)</title><rect x="99.7806%" y="341" width="0.0383%" height="15" fill="rgb(248,177,22)" fg:x="278126727033" fg:w="106643413"/><text x="100.0306%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (106,643,413 samples, 0.04%)</title><rect x="99.7806%" y="325" width="0.0383%" height="15" fill="rgb(215,211,37)" fg:x="278126727033" fg:w="106643413"/><text x="100.0306%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (106,643,413 samples, 0.04%)</title><rect x="99.7806%" y="309" width="0.0383%" height="15" fill="rgb(241,128,51)" fg:x="278126727033" fg:w="106643413"/><text x="100.0306%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (106,643,413 samples, 0.04%)</title><rect x="99.7806%" y="293" width="0.0383%" height="15" fill="rgb(227,165,31)" fg:x="278126727033" fg:w="106643413"/><text x="100.0306%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (106,643,413 samples, 0.04%)</title><rect x="99.7806%" y="277" width="0.0383%" height="15" fill="rgb(228,167,24)" fg:x="278126727033" fg:w="106643413"/><text x="100.0306%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (336,337,596 samples, 0.12%)</title><rect x="99.7261%" y="373" width="0.1207%" height="15" fill="rgb(228,143,12)" fg:x="277974799047" fg:w="336337596"/><text x="99.9761%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (328,180,341 samples, 0.12%)</title><rect x="99.7291%" y="357" width="0.1177%" height="15" fill="rgb(249,149,8)" fg:x="277982956302" fg:w="328180341"/><text x="99.9791%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (77,766,197 samples, 0.03%)</title><rect x="99.8189%" y="341" width="0.0279%" height="15" fill="rgb(243,35,44)" fg:x="278233370446" fg:w="77766197"/><text x="100.0689%" y="351.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert::_{{closure}} (77,766,197 samples, 0.03%)</title><rect x="99.8189%" y="325" width="0.0279%" height="15" fill="rgb(246,89,9)" fg:x="278233370446" fg:w="77766197"/><text x="100.0689%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (51,443,040 samples, 0.02%)</title><rect x="99.8564%" y="357" width="0.0185%" height="15" fill="rgb(233,213,13)" fg:x="278337948163" fg:w="51443040"/><text x="100.1064%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (51,443,040 samples, 0.02%)</title><rect x="99.8564%" y="341" width="0.0185%" height="15" fill="rgb(233,141,41)" fg:x="278337948163" fg:w="51443040"/><text x="100.1064%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (51,443,040 samples, 0.02%)</title><rect x="99.8564%" y="325" width="0.0185%" height="15" fill="rgb(239,167,4)" fg:x="278337948163" fg:w="51443040"/><text x="100.1064%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (40,892,798 samples, 0.01%)</title><rect x="99.8602%" y="309" width="0.0147%" height="15" fill="rgb(209,217,16)" fg:x="278348498405" fg:w="40892798"/><text x="100.1102%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (82,100,937 samples, 0.03%)</title><rect x="99.8552%" y="373" width="0.0295%" height="15" fill="rgb(219,88,35)" fg:x="278334680543" fg:w="82100937"/><text x="100.1052%" y="383.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (34,193,171 samples, 0.01%)</title><rect x="99.9011%" y="373" width="0.0123%" height="15" fill="rgb(220,193,23)" fg:x="278462448954" fg:w="34193171"/><text x="100.1511%" y="383.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (51,174,865 samples, 0.02%)</title><rect x="99.9133%" y="373" width="0.0184%" height="15" fill="rgb(230,90,52)" fg:x="278496642125" fg:w="51174865"/><text x="100.1633%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (47,528,109 samples, 0.02%)</title><rect x="99.9147%" y="357" width="0.0171%" height="15" fill="rgb(252,106,19)" fg:x="278500288881" fg:w="47528109"/><text x="100.1647%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by_key (40,808,881 samples, 0.01%)</title><rect x="99.9359%" y="341" width="0.0146%" height="15" fill="rgb(206,74,20)" fg:x="278559630984" fg:w="40808881"/><text x="100.1859%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (40,808,881 samples, 0.01%)</title><rect x="99.9359%" y="325" width="0.0146%" height="15" fill="rgb(230,138,44)" fg:x="278559630984" fg:w="40808881"/><text x="100.1859%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (40,808,881 samples, 0.01%)</title><rect x="99.9359%" y="309" width="0.0146%" height="15" fill="rgb(235,182,43)" fg:x="278559630984" fg:w="40808881"/><text x="100.1859%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40,808,881 samples, 0.01%)</title><rect x="99.9359%" y="293" width="0.0146%" height="15" fill="rgb(242,16,51)" fg:x="278559630984" fg:w="40808881"/><text x="100.1859%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40,808,881 samples, 0.01%)</title><rect x="99.9359%" y="277" width="0.0146%" height="15" fill="rgb(248,9,4)" fg:x="278559630984" fg:w="40808881"/><text x="100.1859%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (33,705,172 samples, 0.01%)</title><rect x="99.9385%" y="261" width="0.0121%" height="15" fill="rgb(210,31,22)" fg:x="278566734693" fg:w="33705172"/><text x="100.1885%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (33,705,172 samples, 0.01%)</title><rect x="99.9385%" y="245" width="0.0121%" height="15" fill="rgb(239,54,39)" fg:x="278566734693" fg:w="33705172"/><text x="100.1885%" y="255.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (33,705,172 samples, 0.01%)</title><rect x="99.9385%" y="229" width="0.0121%" height="15" fill="rgb(230,99,41)" fg:x="278566734693" fg:w="33705172"/><text x="100.1885%" y="239.50"></text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (33,705,172 samples, 0.01%)</title><rect x="99.9385%" y="213" width="0.0121%" height="15" fill="rgb(253,106,12)" fg:x="278566734693" fg:w="33705172"/><text x="100.1885%" y="223.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (86,827,237 samples, 0.03%)</title><rect x="99.9317%" y="373" width="0.0312%" height="15" fill="rgb(213,46,41)" fg:x="278547816990" fg:w="86827237"/><text x="100.1817%" y="383.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (86,827,237 samples, 0.03%)</title><rect x="99.9317%" y="357" width="0.0312%" height="15" fill="rgb(215,133,35)" fg:x="278547816990" fg:w="86827237"/><text x="100.1817%" y="367.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (30,136,112 samples, 0.01%)</title><rect x="99.9629%" y="373" width="0.0108%" height="15" fill="rgb(213,28,5)" fg:x="278634644227" fg:w="30136112"/><text x="100.2129%" y="383.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (33,353,185 samples, 0.01%)</title><rect x="99.9737%" y="373" width="0.0120%" height="15" fill="rgb(215,77,49)" fg:x="278664780339" fg:w="33353185"/><text x="100.2237%" y="383.50"></text></g><g><title>all (278,738,185,691 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="278738185691"/><text x="0.2500%" y="415.50"></text></g><g><title>img (278,738,185,691 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="278738185691"/><text x="0.2500%" y="399.50">img</text></g></svg></svg>