<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="68411863624"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (64,417,572 samples, 0.09%)</title><rect x="0.0119%" y="165" width="0.0942%" height="15" fill="rgb(227,0,7)" fg:x="8119914" fg:w="64417572"/><text x="0.2619%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (64,417,572 samples, 0.09%)</title><rect x="0.0119%" y="149" width="0.0942%" height="15" fill="rgb(217,0,24)" fg:x="8119914" fg:w="64417572"/><text x="0.2619%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (64,417,572 samples, 0.09%)</title><rect x="0.0119%" y="133" width="0.0942%" height="15" fill="rgb(221,193,54)" fg:x="8119914" fg:w="64417572"/><text x="0.2619%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (64,417,572 samples, 0.09%)</title><rect x="0.0119%" y="117" width="0.0942%" height="15" fill="rgb(248,212,6)" fg:x="8119914" fg:w="64417572"/><text x="0.2619%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64,417,572 samples, 0.09%)</title><rect x="0.0119%" y="101" width="0.0942%" height="15" fill="rgb(208,68,35)" fg:x="8119914" fg:w="64417572"/><text x="0.2619%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64,417,572 samples, 0.09%)</title><rect x="0.0119%" y="85" width="0.0942%" height="15" fill="rgb(232,128,0)" fg:x="8119914" fg:w="64417572"/><text x="0.2619%" y="95.50"></text></g><g><title>alloc::alloc::alloc (64,417,572 samples, 0.09%)</title><rect x="0.0119%" y="69" width="0.0942%" height="15" fill="rgb(207,160,47)" fg:x="8119914" fg:w="64417572"/><text x="0.2619%" y="79.50"></text></g><g><title>malloc (64,417,572 samples, 0.09%)</title><rect x="0.0119%" y="53" width="0.0942%" height="15" fill="rgb(228,23,34)" fg:x="8119914" fg:w="64417572"/><text x="0.2619%" y="63.50"></text></g><g><title>[libc.so.6] (60,285,922 samples, 0.09%)</title><rect x="0.0179%" y="37" width="0.0881%" height="15" fill="rgb(218,30,26)" fg:x="12251564" fg:w="60285922"/><text x="0.2679%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (83,617,442 samples, 0.12%)</title><rect x="0.0000%" y="373" width="0.1222%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="83617442"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (83,617,442 samples, 0.12%)</title><rect x="0.0000%" y="357" width="0.1222%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="83617442"/><text x="0.2500%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (83,617,442 samples, 0.12%)</title><rect x="0.0000%" y="341" width="0.1222%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="83617442"/><text x="0.2500%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (79,495,990 samples, 0.12%)</title><rect x="0.0060%" y="325" width="0.1162%" height="15" fill="rgb(216,20,37)" fg:x="4121452" fg:w="79495990"/><text x="0.2560%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (79,495,990 samples, 0.12%)</title><rect x="0.0060%" y="309" width="0.1162%" height="15" fill="rgb(206,188,39)" fg:x="4121452" fg:w="79495990"/><text x="0.2560%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (79,495,990 samples, 0.12%)</title><rect x="0.0060%" y="293" width="0.1162%" height="15" fill="rgb(217,207,13)" fg:x="4121452" fg:w="79495990"/><text x="0.2560%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (79,495,990 samples, 0.12%)</title><rect x="0.0060%" y="277" width="0.1162%" height="15" fill="rgb(231,73,38)" fg:x="4121452" fg:w="79495990"/><text x="0.2560%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (79,495,990 samples, 0.12%)</title><rect x="0.0060%" y="261" width="0.1162%" height="15" fill="rgb(225,20,46)" fg:x="4121452" fg:w="79495990"/><text x="0.2560%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (79,495,990 samples, 0.12%)</title><rect x="0.0060%" y="245" width="0.1162%" height="15" fill="rgb(210,31,41)" fg:x="4121452" fg:w="79495990"/><text x="0.2560%" y="255.50"></text></g><g><title>core::clone::Clone::clone (79,495,990 samples, 0.12%)</title><rect x="0.0060%" y="229" width="0.1162%" height="15" fill="rgb(221,200,47)" fg:x="4121452" fg:w="79495990"/><text x="0.2560%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (75,497,528 samples, 0.11%)</title><rect x="0.0119%" y="213" width="0.1104%" height="15" fill="rgb(226,26,5)" fg:x="8119914" fg:w="75497528"/><text x="0.2619%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (75,497,528 samples, 0.11%)</title><rect x="0.0119%" y="197" width="0.1104%" height="15" fill="rgb(249,33,26)" fg:x="8119914" fg:w="75497528"/><text x="0.2619%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (75,497,528 samples, 0.11%)</title><rect x="0.0119%" y="181" width="0.1104%" height="15" fill="rgb(235,183,28)" fg:x="8119914" fg:w="75497528"/><text x="0.2619%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11,079,956 samples, 0.02%)</title><rect x="0.1060%" y="165" width="0.0162%" height="15" fill="rgb(221,5,38)" fg:x="72537486" fg:w="11079956"/><text x="0.3560%" y="175.50"></text></g><g><title>core::ptr::copy_nonoverlapping (11,079,956 samples, 0.02%)</title><rect x="0.1060%" y="149" width="0.0162%" height="15" fill="rgb(247,18,42)" fg:x="72537486" fg:w="11079956"/><text x="0.3560%" y="159.50"></text></g><g><title>[libc.so.6] (11,079,956 samples, 0.02%)</title><rect x="0.1060%" y="133" width="0.0162%" height="15" fill="rgb(241,131,45)" fg:x="72537486" fg:w="11079956"/><text x="0.3560%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="325" width="0.0181%" height="15" fill="rgb(249,31,29)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="309" width="0.0181%" height="15" fill="rgb(225,111,53)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="293" width="0.0181%" height="15" fill="rgb(238,160,17)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="277" width="0.0181%" height="15" fill="rgb(214,148,48)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="261" width="0.0181%" height="15" fill="rgb(232,36,49)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="245" width="0.0181%" height="15" fill="rgb(209,103,24)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="255.50"></text></g><g><title>alloc::alloc::alloc (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="229" width="0.0181%" height="15" fill="rgb(229,88,8)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="239.50"></text></g><g><title>malloc (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="213" width="0.0181%" height="15" fill="rgb(213,181,19)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="223.50"></text></g><g><title>[libc.so.6] (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="197" width="0.0181%" height="15" fill="rgb(254,191,54)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="207.50"></text></g><g><title>[libc.so.6] (12,366,252 samples, 0.02%)</title><rect x="0.1281%" y="181" width="0.0181%" height="15" fill="rgb(241,83,37)" fg:x="87610059" fg:w="12366252"/><text x="0.3781%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45,129,307 samples, 0.07%)</title><rect x="0.1461%" y="197" width="0.0660%" height="15" fill="rgb(233,36,39)" fg:x="99976311" fg:w="45129307"/><text x="0.3961%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45,129,307 samples, 0.07%)</title><rect x="0.1461%" y="181" width="0.0660%" height="15" fill="rgb(226,3,54)" fg:x="99976311" fg:w="45129307"/><text x="0.3961%" y="191.50"></text></g><g><title>alloc::alloc::alloc (45,129,307 samples, 0.07%)</title><rect x="0.1461%" y="165" width="0.0660%" height="15" fill="rgb(245,192,40)" fg:x="99976311" fg:w="45129307"/><text x="0.3961%" y="175.50"></text></g><g><title>malloc (45,129,307 samples, 0.07%)</title><rect x="0.1461%" y="149" width="0.0660%" height="15" fill="rgb(238,167,29)" fg:x="99976311" fg:w="45129307"/><text x="0.3961%" y="159.50"></text></g><g><title>[libc.so.6] (24,646,483 samples, 0.04%)</title><rect x="0.1761%" y="133" width="0.0360%" height="15" fill="rgb(232,182,51)" fg:x="120459135" fg:w="24646483"/><text x="0.4261%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (65,593,780 samples, 0.10%)</title><rect x="0.1222%" y="373" width="0.0959%" height="15" fill="rgb(231,60,39)" fg:x="83617442" fg:w="65593780"/><text x="0.3722%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (65,593,780 samples, 0.10%)</title><rect x="0.1222%" y="357" width="0.0959%" height="15" fill="rgb(208,69,12)" fg:x="83617442" fg:w="65593780"/><text x="0.3722%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (65,593,780 samples, 0.10%)</title><rect x="0.1222%" y="341" width="0.0959%" height="15" fill="rgb(235,93,37)" fg:x="83617442" fg:w="65593780"/><text x="0.3722%" y="351.50"></text></g><g><title>core::clone::Clone::clone (49,234,911 samples, 0.07%)</title><rect x="0.1461%" y="325" width="0.0720%" height="15" fill="rgb(213,116,39)" fg:x="99976311" fg:w="49234911"/><text x="0.3961%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (49,234,911 samples, 0.07%)</title><rect x="0.1461%" y="309" width="0.0720%" height="15" fill="rgb(222,207,29)" fg:x="99976311" fg:w="49234911"/><text x="0.3961%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49,234,911 samples, 0.07%)</title><rect x="0.1461%" y="293" width="0.0720%" height="15" fill="rgb(206,96,30)" fg:x="99976311" fg:w="49234911"/><text x="0.3961%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (49,234,911 samples, 0.07%)</title><rect x="0.1461%" y="277" width="0.0720%" height="15" fill="rgb(218,138,4)" fg:x="99976311" fg:w="49234911"/><text x="0.3961%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (49,234,911 samples, 0.07%)</title><rect x="0.1461%" y="261" width="0.0720%" height="15" fill="rgb(250,191,14)" fg:x="99976311" fg:w="49234911"/><text x="0.3961%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (49,234,911 samples, 0.07%)</title><rect x="0.1461%" y="245" width="0.0720%" height="15" fill="rgb(239,60,40)" fg:x="99976311" fg:w="49234911"/><text x="0.3961%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (49,234,911 samples, 0.07%)</title><rect x="0.1461%" y="229" width="0.0720%" height="15" fill="rgb(206,27,48)" fg:x="99976311" fg:w="49234911"/><text x="0.3961%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (49,234,911 samples, 0.07%)</title><rect x="0.1461%" y="213" width="0.0720%" height="15" fill="rgb(225,35,8)" fg:x="99976311" fg:w="49234911"/><text x="0.3961%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (242,970,296 samples, 0.36%)</title><rect x="0.2421%" y="325" width="0.3552%" height="15" fill="rgb(250,213,24)" fg:x="165615229" fg:w="242970296"/><text x="0.4921%" y="335.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (8,209,995 samples, 0.01%)</title><rect x="0.5972%" y="309" width="0.0120%" height="15" fill="rgb(247,123,22)" fg:x="408585525" fg:w="8209995"/><text x="0.8472%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (8,209,995 samples, 0.01%)</title><rect x="0.5972%" y="293" width="0.0120%" height="15" fill="rgb(231,138,38)" fg:x="408585525" fg:w="8209995"/><text x="0.8472%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="261" width="0.0593%" height="15" fill="rgb(231,145,46)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="245" width="0.0593%" height="15" fill="rgb(251,118,11)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="229" width="0.0593%" height="15" fill="rgb(217,147,25)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="213" width="0.0593%" height="15" fill="rgb(247,81,37)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="197" width="0.0593%" height="15" fill="rgb(209,12,38)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="181" width="0.0593%" height="15" fill="rgb(227,1,9)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="165" width="0.0593%" height="15" fill="rgb(248,47,43)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="149" width="0.0593%" height="15" fill="rgb(221,10,30)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="133" width="0.0593%" height="15" fill="rgb(210,229,1)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="143.50"></text></g><g><title>cfree (40,584,342 samples, 0.06%)</title><rect x="0.6273%" y="117" width="0.0593%" height="15" fill="rgb(222,148,37)" fg:x="429163039" fg:w="40584342"/><text x="0.8773%" y="127.50"></text></g><g><title>[libc.so.6] (11,901,847 samples, 0.02%)</title><rect x="0.6692%" y="101" width="0.0174%" height="15" fill="rgb(234,67,33)" fg:x="457845534" fg:w="11901847"/><text x="0.9192%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52,912,692 samples, 0.08%)</title><rect x="0.6153%" y="293" width="0.0773%" height="15" fill="rgb(247,98,35)" fg:x="420916159" fg:w="52912692"/><text x="0.8653%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52,912,692 samples, 0.08%)</title><rect x="0.6153%" y="277" width="0.0773%" height="15" fill="rgb(247,138,52)" fg:x="420916159" fg:w="52912692"/><text x="0.8653%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,200,327 samples, 0.01%)</title><rect x="0.6926%" y="277" width="0.0120%" height="15" fill="rgb(213,79,30)" fg:x="473828851" fg:w="8200327"/><text x="0.9426%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8,200,327 samples, 0.01%)</title><rect x="0.6926%" y="261" width="0.0120%" height="15" fill="rgb(246,177,23)" fg:x="473828851" fg:w="8200327"/><text x="0.9426%" y="271.50"></text></g><g><title>img::png::deflate::prefix_table::get_cl_codes_for_code_lengths::_{{closure}} (8,200,327 samples, 0.01%)</title><rect x="0.6926%" y="245" width="0.0120%" height="15" fill="rgb(230,62,27)" fg:x="473828851" fg:w="8200327"/><text x="0.9426%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8,200,327 samples, 0.01%)</title><rect x="0.6926%" y="229" width="0.0120%" height="15" fill="rgb(216,154,8)" fg:x="473828851" fg:w="8200327"/><text x="0.9426%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8,200,327 samples, 0.01%)</title><rect x="0.6926%" y="213" width="0.0120%" height="15" fill="rgb(244,35,45)" fg:x="473828851" fg:w="8200327"/><text x="0.9426%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8,200,327 samples, 0.01%)</title><rect x="0.6926%" y="197" width="0.0120%" height="15" fill="rgb(251,115,12)" fg:x="473828851" fg:w="8200327"/><text x="0.9426%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8,200,327 samples, 0.01%)</title><rect x="0.6926%" y="181" width="0.0120%" height="15" fill="rgb(240,54,50)" fg:x="473828851" fg:w="8200327"/><text x="0.9426%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8,200,327 samples, 0.01%)</title><rect x="0.6926%" y="165" width="0.0120%" height="15" fill="rgb(233,84,52)" fg:x="473828851" fg:w="8200327"/><text x="0.9426%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8,200,327 samples, 0.01%)</title><rect x="0.6926%" y="149" width="0.0120%" height="15" fill="rgb(207,117,47)" fg:x="473828851" fg:w="8200327"/><text x="0.9426%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,701,831 samples, 0.01%)</title><rect x="0.6926%" y="293" width="0.0127%" height="15" fill="rgb(249,43,39)" fg:x="473828851" fg:w="8701831"/><text x="0.9426%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (390,797,231 samples, 0.57%)</title><rect x="0.2421%" y="341" width="0.5712%" height="15" fill="rgb(209,38,44)" fg:x="165615229" fg:w="390797231"/><text x="0.4921%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (147,826,935 samples, 0.22%)</title><rect x="0.5972%" y="325" width="0.2161%" height="15" fill="rgb(236,212,23)" fg:x="408585525" fg:w="147826935"/><text x="0.8472%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (135,496,301 samples, 0.20%)</title><rect x="0.6153%" y="309" width="0.1981%" height="15" fill="rgb(242,79,21)" fg:x="420916159" fg:w="135496301"/><text x="0.8653%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (73,881,778 samples, 0.11%)</title><rect x="0.7053%" y="293" width="0.1080%" height="15" fill="rgb(211,96,35)" fg:x="482530682" fg:w="73881778"/><text x="0.9553%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (69,735,099 samples, 0.10%)</title><rect x="0.7114%" y="277" width="0.1019%" height="15" fill="rgb(253,215,40)" fg:x="486677361" fg:w="69735099"/><text x="0.9614%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69,735,099 samples, 0.10%)</title><rect x="0.7114%" y="261" width="0.1019%" height="15" fill="rgb(211,81,21)" fg:x="486677361" fg:w="69735099"/><text x="0.9614%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (69,735,099 samples, 0.10%)</title><rect x="0.7114%" y="245" width="0.1019%" height="15" fill="rgb(208,190,38)" fg:x="486677361" fg:w="69735099"/><text x="0.9614%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69,735,099 samples, 0.10%)</title><rect x="0.7114%" y="229" width="0.1019%" height="15" fill="rgb(235,213,38)" fg:x="486677361" fg:w="69735099"/><text x="0.9614%" y="239.50"></text></g><g><title>core::ptr::copy (69,735,099 samples, 0.10%)</title><rect x="0.7114%" y="213" width="0.1019%" height="15" fill="rgb(237,122,38)" fg:x="486677361" fg:w="69735099"/><text x="0.9614%" y="223.50"></text></g><g><title>[libc.so.6] (65,591,191 samples, 0.10%)</title><rect x="0.7175%" y="197" width="0.0959%" height="15" fill="rgb(244,218,35)" fg:x="490821269" fg:w="65591191"/><text x="0.9675%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (78,039,803 samples, 0.11%)</title><rect x="0.8194%" y="261" width="0.1141%" height="15" fill="rgb(240,68,47)" fg:x="560552548" fg:w="78039803"/><text x="1.0694%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (78,039,803 samples, 0.11%)</title><rect x="0.8194%" y="245" width="0.1141%" height="15" fill="rgb(210,16,53)" fg:x="560552548" fg:w="78039803"/><text x="1.0694%" y="255.50"></text></g><g><title>alloc::alloc::alloc (78,039,803 samples, 0.11%)</title><rect x="0.8194%" y="229" width="0.1141%" height="15" fill="rgb(235,124,12)" fg:x="560552548" fg:w="78039803"/><text x="1.0694%" y="239.50"></text></g><g><title>malloc (73,932,356 samples, 0.11%)</title><rect x="0.8254%" y="213" width="0.1081%" height="15" fill="rgb(224,169,11)" fg:x="564659995" fg:w="73932356"/><text x="1.0754%" y="223.50"></text></g><g><title>[libc.so.6] (32,886,304 samples, 0.05%)</title><rect x="0.8854%" y="197" width="0.0481%" height="15" fill="rgb(250,166,2)" fg:x="605706047" fg:w="32886304"/><text x="1.1354%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (493,442,788 samples, 0.72%)</title><rect x="0.2181%" y="373" width="0.7213%" height="15" fill="rgb(242,216,29)" fg:x="149211222" fg:w="493442788"/><text x="0.4681%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (485,260,164 samples, 0.71%)</title><rect x="0.2301%" y="357" width="0.7093%" height="15" fill="rgb(230,116,27)" fg:x="157393846" fg:w="485260164"/><text x="0.4801%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (86,241,550 samples, 0.13%)</title><rect x="0.8133%" y="341" width="0.1261%" height="15" fill="rgb(228,99,48)" fg:x="556412460" fg:w="86241550"/><text x="1.0633%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (86,241,550 samples, 0.13%)</title><rect x="0.8133%" y="325" width="0.1261%" height="15" fill="rgb(253,11,6)" fg:x="556412460" fg:w="86241550"/><text x="1.0633%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (86,241,550 samples, 0.13%)</title><rect x="0.8133%" y="309" width="0.1261%" height="15" fill="rgb(247,143,39)" fg:x="556412460" fg:w="86241550"/><text x="1.0633%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (86,241,550 samples, 0.13%)</title><rect x="0.8133%" y="293" width="0.1261%" height="15" fill="rgb(236,97,10)" fg:x="556412460" fg:w="86241550"/><text x="1.0633%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (86,241,550 samples, 0.13%)</title><rect x="0.8133%" y="277" width="0.1261%" height="15" fill="rgb(233,208,19)" fg:x="556412460" fg:w="86241550"/><text x="1.0633%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,079,210,343 samples, 5.96%)</title><rect x="12.3207%" y="293" width="5.9627%" height="15" fill="rgb(216,164,2)" fg:x="8428808191" fg:w="4079210343"/><text x="12.5707%" y="303.50">&lt;core::s..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (419,933,959 samples, 0.61%)</title><rect x="17.6696%" y="277" width="0.6138%" height="15" fill="rgb(220,129,5)" fg:x="12088084575" fg:w="419933959"/><text x="17.9196%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,758,816,431 samples, 12.80%)</title><rect x="11.0997%" y="357" width="12.8031%" height="15" fill="rgb(242,17,10)" fg:x="7593494034" fg:w="8758816431"/><text x="11.3497%" y="367.50">&lt;core::iter::adapte..</text></g><g><title>core::iter::traits::iterator::Iterator::find (8,758,816,431 samples, 12.80%)</title><rect x="11.0997%" y="341" width="12.8031%" height="15" fill="rgb(242,107,0)" fg:x="7593494034" fg:w="8758816431"/><text x="11.3497%" y="351.50">core::iter::traits:..</text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8,758,816,431 samples, 12.80%)</title><rect x="11.0997%" y="325" width="12.8031%" height="15" fill="rgb(251,28,31)" fg:x="7593494034" fg:w="8758816431"/><text x="11.3497%" y="335.50">&lt;alloc::collections..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7,923,502,274 samples, 11.58%)</title><rect x="12.3207%" y="309" width="11.5821%" height="15" fill="rgb(233,223,10)" fg:x="8428808191" fg:w="7923502274"/><text x="12.5707%" y="319.50">core::iter::trait..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,844,291,931 samples, 5.62%)</title><rect x="18.2834%" y="293" width="5.6193%" height="15" fill="rgb(215,21,27)" fg:x="12508018534" fg:w="3844291931"/><text x="18.5334%" y="303.50">core::o..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (3,844,291,931 samples, 5.62%)</title><rect x="18.2834%" y="277" width="5.6193%" height="15" fill="rgb(232,23,21)" fg:x="12508018534" fg:w="3844291931"/><text x="18.5334%" y="287.50">core::i..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,844,291,931 samples, 5.62%)</title><rect x="18.2834%" y="261" width="5.6193%" height="15" fill="rgb(244,5,23)" fg:x="12508018534" fg:w="3844291931"/><text x="18.5334%" y="271.50">core::o..</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (3,844,291,931 samples, 5.62%)</title><rect x="18.2834%" y="245" width="5.6193%" height="15" fill="rgb(226,81,46)" fg:x="12508018534" fg:w="3844291931"/><text x="18.5334%" y="255.50">img::pn..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2,713,837,333 samples, 3.97%)</title><rect x="34.1868%" y="309" width="3.9669%" height="15" fill="rgb(247,70,30)" fg:x="23387831492" fg:w="2713837333"/><text x="34.4368%" y="319.50">core..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (517,798,155 samples, 0.76%)</title><rect x="38.9061%" y="277" width="0.7569%" height="15" fill="rgb(212,68,19)" fg:x="26616381205" fg:w="517798155"/><text x="39.1561%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,163,830,867 samples, 1.70%)</title><rect x="38.1537%" y="309" width="1.7012%" height="15" fill="rgb(240,187,13)" fg:x="26101668825" fg:w="1163830867"/><text x="38.4037%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,163,830,867 samples, 1.70%)</title><rect x="38.1537%" y="293" width="1.7012%" height="15" fill="rgb(223,113,26)" fg:x="26101668825" fg:w="1163830867"/><text x="38.4037%" y="303.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (131,320,332 samples, 0.19%)</title><rect x="39.6630%" y="277" width="0.1920%" height="15" fill="rgb(206,192,2)" fg:x="27134179360" fg:w="131320332"/><text x="39.9130%" y="287.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (98,507,486 samples, 0.14%)</title><rect x="40.2817%" y="293" width="0.1440%" height="15" fill="rgb(241,108,4)" fg:x="27557494068" fg:w="98507486"/><text x="40.5317%" y="303.50"></text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (98,507,486 samples, 0.14%)</title><rect x="40.2817%" y="277" width="0.1440%" height="15" fill="rgb(247,173,49)" fg:x="27557494068" fg:w="98507486"/><text x="40.5317%" y="287.50"></text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (98,507,486 samples, 0.14%)</title><rect x="40.2817%" y="261" width="0.1440%" height="15" fill="rgb(224,114,35)" fg:x="27557494068" fg:w="98507486"/><text x="40.5317%" y="271.50"></text></g><g><title>core::cmp::Ord::min (563,355,686 samples, 0.82%)</title><rect x="40.4257%" y="293" width="0.8235%" height="15" fill="rgb(245,159,27)" fg:x="27656001554" fg:w="563355686"/><text x="40.6757%" y="303.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::from_slice (103,196,318 samples, 0.15%)</title><rect x="41.2492%" y="293" width="0.1508%" height="15" fill="rgb(245,172,44)" fg:x="28219357240" fg:w="103196318"/><text x="41.4992%" y="303.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::load (103,196,318 samples, 0.15%)</title><rect x="41.2492%" y="277" width="0.1508%" height="15" fill="rgb(236,23,11)" fg:x="28219357240" fg:w="103196318"/><text x="41.4992%" y="287.50"></text></g><g><title>core::ptr::copy_nonoverlapping (103,196,318 samples, 0.15%)</title><rect x="41.2492%" y="261" width="0.1508%" height="15" fill="rgb(205,117,38)" fg:x="28219357240" fg:w="103196318"/><text x="41.4992%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (645,888,958 samples, 0.94%)</title><rect x="41.4001%" y="293" width="0.9441%" height="15" fill="rgb(237,72,25)" fg:x="28322553558" fg:w="645888958"/><text x="41.6501%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (645,888,958 samples, 0.94%)</title><rect x="41.4001%" y="277" width="0.9441%" height="15" fill="rgb(244,70,9)" fg:x="28322553558" fg:w="645888958"/><text x="41.6501%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (143,765,866 samples, 0.21%)</title><rect x="42.1340%" y="261" width="0.2101%" height="15" fill="rgb(217,125,39)" fg:x="28824676650" fg:w="143765866"/><text x="42.3840%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28,325,802,886 samples, 41.40%)</title><rect x="0.9455%" y="373" width="41.4048%" height="15" fill="rgb(235,36,10)" fg:x="646801464" fg:w="28325802886"/><text x="1.1955%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator..</text></g><g><title>core::option::Option&lt;T&gt;::map (12,620,293,885 samples, 18.45%)</title><rect x="23.9027%" y="357" width="18.4475%" height="15" fill="rgb(251,123,47)" fg:x="16352310465" fg:w="12620293885"/><text x="24.1527%" y="367.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (12,620,293,885 samples, 18.45%)</title><rect x="23.9027%" y="341" width="18.4475%" height="15" fill="rgb(221,13,13)" fg:x="16352310465" fg:w="12620293885"/><text x="24.1527%" y="351.50">core::ops::function::impls::&lt;..</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (11,834,904,226 samples, 17.30%)</title><rect x="25.0508%" y="325" width="17.2995%" height="15" fill="rgb(238,131,9)" fg:x="17137700124" fg:w="11834904226"/><text x="25.3008%" y="335.50">img::png::deflate::lzss::ha..</text></g><g><title>img::simd_utils::number_of_matching_bytes (1,707,104,658 samples, 2.50%)</title><rect x="39.8549%" y="309" width="2.4953%" height="15" fill="rgb(211,50,8)" fg:x="27265499692" fg:w="1707104658"/><text x="40.1049%" y="319.50">im..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,707,119 samples, 0.01%)</title><rect x="42.3503%" y="373" width="0.0127%" height="15" fill="rgb(245,182,24)" fg:x="28972604350" fg:w="8707119"/><text x="42.6003%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,707,119 samples, 0.01%)</title><rect x="42.3503%" y="357" width="0.0127%" height="15" fill="rgb(242,14,37)" fg:x="28972604350" fg:w="8707119"/><text x="42.6003%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,707,119 samples, 0.01%)</title><rect x="42.3503%" y="341" width="0.0127%" height="15" fill="rgb(246,228,12)" fg:x="28972604350" fg:w="8707119"/><text x="42.6003%" y="351.50"></text></g><g><title>[libc.so.6] (24,609,375 samples, 0.04%)</title><rect x="42.3630%" y="373" width="0.0360%" height="15" fill="rgb(213,55,15)" fg:x="28981311469" fg:w="24609375"/><text x="42.6130%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,349,170 samples, 0.02%)</title><rect x="43.5641%" y="117" width="0.0181%" height="15" fill="rgb(209,9,3)" fg:x="29802982903" fg:w="12349170"/><text x="43.8141%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (12,349,170 samples, 0.02%)</title><rect x="43.5641%" y="101" width="0.0181%" height="15" fill="rgb(230,59,30)" fg:x="29802982903" fg:w="12349170"/><text x="43.8141%" y="111.50"></text></g><g><title>cfree (12,349,170 samples, 0.02%)</title><rect x="43.5641%" y="85" width="0.0181%" height="15" fill="rgb(209,121,21)" fg:x="29802982903" fg:w="12349170"/><text x="43.8141%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="293" width="0.0241%" height="15" fill="rgb(220,109,13)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="277" width="0.0241%" height="15" fill="rgb(232,18,1)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="287.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="261" width="0.0241%" height="15" fill="rgb(215,41,42)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt;&gt; (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="245" width="0.0241%" height="15" fill="rgb(224,123,36)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="229" width="0.0241%" height="15" fill="rgb(240,125,3)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="213" width="0.0241%" height="15" fill="rgb(205,98,50)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="197" width="0.0241%" height="15" fill="rgb(205,185,37)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="181" width="0.0241%" height="15" fill="rgb(238,207,15)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="165" width="0.0241%" height="15" fill="rgb(213,199,42)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="149" width="0.0241%" height="15" fill="rgb(235,201,11)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (16,476,882 samples, 0.02%)</title><rect x="43.5641%" y="133" width="0.0241%" height="15" fill="rgb(207,46,11)" fg:x="29802982903" fg:w="16476882"/><text x="43.8141%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (801,802,537 samples, 1.17%)</title><rect x="42.4222%" y="309" width="1.1720%" height="15" fill="rgb(241,35,35)" fg:x="29021793687" fg:w="801802537"/><text x="42.6722%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="245" width="0.0181%" height="15" fill="rgb(243,32,47)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="229" width="0.0181%" height="15" fill="rgb(247,202,23)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="213" width="0.0181%" height="15" fill="rgb(219,102,11)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="197" width="0.0181%" height="15" fill="rgb(243,110,44)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="181" width="0.0181%" height="15" fill="rgb(222,74,54)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="165" width="0.0181%" height="15" fill="rgb(216,99,12)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="149" width="0.0181%" height="15" fill="rgb(226,22,26)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="133" width="0.0181%" height="15" fill="rgb(217,163,10)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="117" width="0.0181%" height="15" fill="rgb(213,25,53)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="127.50"></text></g><g><title>cfree (12,372,306 samples, 0.02%)</title><rect x="43.5942%" y="101" width="0.0181%" height="15" fill="rgb(252,105,26)" fg:x="29823596224" fg:w="12372306"/><text x="43.8442%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16,463,178 samples, 0.02%)</title><rect x="43.5942%" y="277" width="0.0241%" height="15" fill="rgb(220,39,43)" fg:x="29823596224" fg:w="16463178"/><text x="43.8442%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16,463,178 samples, 0.02%)</title><rect x="43.5942%" y="261" width="0.0241%" height="15" fill="rgb(229,68,48)" fg:x="29823596224" fg:w="16463178"/><text x="43.8442%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (830,558,660 samples, 1.21%)</title><rect x="42.4222%" y="325" width="1.2141%" height="15" fill="rgb(252,8,32)" fg:x="29021793687" fg:w="830558660"/><text x="42.6722%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (28,756,123 samples, 0.04%)</title><rect x="43.5942%" y="309" width="0.0420%" height="15" fill="rgb(223,20,43)" fg:x="29823596224" fg:w="28756123"/><text x="43.8442%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (28,756,123 samples, 0.04%)</title><rect x="43.5942%" y="293" width="0.0420%" height="15" fill="rgb(229,81,49)" fg:x="29823596224" fg:w="28756123"/><text x="43.8442%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,172,544 samples, 0.01%)</title><rect x="43.6243%" y="277" width="0.0119%" height="15" fill="rgb(236,28,36)" fg:x="29844179803" fg:w="8172544"/><text x="43.8743%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (846,589,463 samples, 1.24%)</title><rect x="42.4046%" y="357" width="1.2375%" height="15" fill="rgb(249,185,26)" fg:x="29009809993" fg:w="846589463"/><text x="42.6546%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (842,452,894 samples, 1.23%)</title><rect x="42.4107%" y="341" width="1.2314%" height="15" fill="rgb(249,174,33)" fg:x="29013946562" fg:w="842452894"/><text x="42.6607%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (8,226,681 samples, 0.01%)</title><rect x="43.6541%" y="213" width="0.0120%" height="15" fill="rgb(233,201,37)" fg:x="29864586510" fg:w="8226681"/><text x="43.9041%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20,548,135 samples, 0.03%)</title><rect x="43.6421%" y="357" width="0.0300%" height="15" fill="rgb(221,78,26)" fg:x="29856399456" fg:w="20548135"/><text x="43.8921%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (20,548,135 samples, 0.03%)</title><rect x="43.6421%" y="341" width="0.0300%" height="15" fill="rgb(250,127,30)" fg:x="29856399456" fg:w="20548135"/><text x="43.8921%" y="351.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths::_{{closure}} (16,482,530 samples, 0.02%)</title><rect x="43.6481%" y="325" width="0.0241%" height="15" fill="rgb(230,49,44)" fg:x="29860465061" fg:w="16482530"/><text x="43.8981%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (16,482,530 samples, 0.02%)</title><rect x="43.6481%" y="309" width="0.0241%" height="15" fill="rgb(229,67,23)" fg:x="29860465061" fg:w="16482530"/><text x="43.8981%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (16,482,530 samples, 0.02%)</title><rect x="43.6481%" y="293" width="0.0241%" height="15" fill="rgb(249,83,47)" fg:x="29860465061" fg:w="16482530"/><text x="43.8981%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (16,482,530 samples, 0.02%)</title><rect x="43.6481%" y="277" width="0.0241%" height="15" fill="rgb(215,43,3)" fg:x="29860465061" fg:w="16482530"/><text x="43.8981%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16,482,530 samples, 0.02%)</title><rect x="43.6481%" y="261" width="0.0241%" height="15" fill="rgb(238,154,13)" fg:x="29860465061" fg:w="16482530"/><text x="43.8981%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16,482,530 samples, 0.02%)</title><rect x="43.6481%" y="245" width="0.0241%" height="15" fill="rgb(219,56,2)" fg:x="29860465061" fg:w="16482530"/><text x="43.8981%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12,361,081 samples, 0.02%)</title><rect x="43.6541%" y="229" width="0.0181%" height="15" fill="rgb(233,0,4)" fg:x="29864586510" fg:w="12361081"/><text x="43.9041%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8,217,915 samples, 0.01%)</title><rect x="43.6782%" y="293" width="0.0120%" height="15" fill="rgb(235,30,7)" fg:x="29881082067" fg:w="8217915"/><text x="43.9282%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::_{{closure}} (8,217,915 samples, 0.01%)</title><rect x="43.6782%" y="277" width="0.0120%" height="15" fill="rgb(250,79,13)" fg:x="29881082067" fg:w="8217915"/><text x="43.9282%" y="287.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (8,217,915 samples, 0.01%)</title><rect x="43.6782%" y="261" width="0.0120%" height="15" fill="rgb(211,146,34)" fg:x="29881082067" fg:w="8217915"/><text x="43.9282%" y="271.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (8,074,135 samples, 0.01%)</title><rect x="43.6962%" y="261" width="0.0118%" height="15" fill="rgb(228,22,38)" fg:x="29893352605" fg:w="8074135"/><text x="43.9462%" y="271.50"></text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (8,074,135 samples, 0.01%)</title><rect x="43.6962%" y="245" width="0.0118%" height="15" fill="rgb(235,168,5)" fg:x="29893352605" fg:w="8074135"/><text x="43.9462%" y="255.50"></text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (8,074,135 samples, 0.01%)</title><rect x="43.6962%" y="229" width="0.0118%" height="15" fill="rgb(221,155,16)" fg:x="29893352605" fg:w="8074135"/><text x="43.9462%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (28,527,091 samples, 0.04%)</title><rect x="43.6722%" y="341" width="0.0417%" height="15" fill="rgb(215,215,53)" fg:x="29876947591" fg:w="28527091"/><text x="43.9222%" y="351.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (28,527,091 samples, 0.04%)</title><rect x="43.6722%" y="325" width="0.0417%" height="15" fill="rgb(223,4,10)" fg:x="29876947591" fg:w="28527091"/><text x="43.9222%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (24,392,615 samples, 0.04%)</title><rect x="43.6782%" y="309" width="0.0357%" height="15" fill="rgb(234,103,6)" fg:x="29881082067" fg:w="24392615"/><text x="43.9282%" y="319.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (16,174,700 samples, 0.02%)</title><rect x="43.6902%" y="293" width="0.0236%" height="15" fill="rgb(227,97,0)" fg:x="29889299982" fg:w="16174700"/><text x="43.9402%" y="303.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (16,174,700 samples, 0.02%)</title><rect x="43.6902%" y="277" width="0.0236%" height="15" fill="rgb(234,150,53)" fg:x="29889299982" fg:w="16174700"/><text x="43.9402%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32,632,312 samples, 0.05%)</title><rect x="43.6722%" y="357" width="0.0477%" height="15" fill="rgb(228,201,54)" fg:x="29876947591" fg:w="32632312"/><text x="43.9222%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (16,447,999 samples, 0.02%)</title><rect x="43.7199%" y="357" width="0.0240%" height="15" fill="rgb(222,22,37)" fg:x="29909579903" fg:w="16447999"/><text x="43.9699%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16,447,999 samples, 0.02%)</title><rect x="43.7199%" y="341" width="0.0240%" height="15" fill="rgb(237,53,32)" fg:x="29909579903" fg:w="16447999"/><text x="43.9699%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16,447,999 samples, 0.02%)</title><rect x="43.7199%" y="325" width="0.0240%" height="15" fill="rgb(233,25,53)" fg:x="29909579903" fg:w="16447999"/><text x="43.9699%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (8,244,765 samples, 0.01%)</title><rect x="43.7319%" y="309" width="0.0121%" height="15" fill="rgb(210,40,34)" fg:x="29917783137" fg:w="8244765"/><text x="43.9819%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8,090,193 samples, 0.01%)</title><rect x="43.7559%" y="309" width="0.0118%" height="15" fill="rgb(241,220,44)" fg:x="29934229781" fg:w="8090193"/><text x="44.0059%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="293" width="0.0120%" height="15" fill="rgb(235,28,35)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="277" width="0.0120%" height="15" fill="rgb(210,56,17)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="261" width="0.0120%" height="15" fill="rgb(224,130,29)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="245" width="0.0120%" height="15" fill="rgb(235,212,8)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="229" width="0.0120%" height="15" fill="rgb(223,33,50)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="213" width="0.0120%" height="15" fill="rgb(219,149,13)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="197" width="0.0120%" height="15" fill="rgb(250,156,29)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="181" width="0.0120%" height="15" fill="rgb(216,193,19)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="165" width="0.0120%" height="15" fill="rgb(216,135,14)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="175.50"></text></g><g><title>cfree (8,217,964 samples, 0.01%)</title><rect x="43.7677%" y="149" width="0.0120%" height="15" fill="rgb(241,47,5)" fg:x="29942319974" fg:w="8217964"/><text x="44.0177%" y="159.50"></text></g><g><title>[img] (28,597,284 samples, 0.04%)</title><rect x="43.7439%" y="357" width="0.0418%" height="15" fill="rgb(233,42,35)" fg:x="29926027902" fg:w="28597284"/><text x="43.9939%" y="367.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (28,597,284 samples, 0.04%)</title><rect x="43.7439%" y="341" width="0.0418%" height="15" fill="rgb(231,13,6)" fg:x="29926027902" fg:w="28597284"/><text x="43.9939%" y="351.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (28,597,284 samples, 0.04%)</title><rect x="43.7439%" y="325" width="0.0418%" height="15" fill="rgb(207,181,40)" fg:x="29926027902" fg:w="28597284"/><text x="43.9939%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (12,305,212 samples, 0.02%)</title><rect x="43.7677%" y="309" width="0.0180%" height="15" fill="rgb(254,173,49)" fg:x="29942319974" fg:w="12305212"/><text x="44.0177%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8,157,024 samples, 0.01%)</title><rect x="43.8038%" y="357" width="0.0119%" height="15" fill="rgb(221,1,38)" fg:x="29966970643" fg:w="8157024"/><text x="44.0538%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (8,157,024 samples, 0.01%)</title><rect x="43.8038%" y="341" width="0.0119%" height="15" fill="rgb(206,124,46)" fg:x="29966970643" fg:w="8157024"/><text x="44.0538%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (8,157,024 samples, 0.01%)</title><rect x="43.8038%" y="325" width="0.0119%" height="15" fill="rgb(249,21,11)" fg:x="29966970643" fg:w="8157024"/><text x="44.0538%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (12,368,987 samples, 0.02%)</title><rect x="43.8337%" y="325" width="0.0181%" height="15" fill="rgb(222,201,40)" fg:x="29987477499" fg:w="12368987"/><text x="44.0837%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (8,204,720 samples, 0.01%)</title><rect x="43.8518%" y="325" width="0.0120%" height="15" fill="rgb(235,61,29)" fg:x="29999846486" fg:w="8204720"/><text x="44.1018%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (49,371,837 samples, 0.07%)</title><rect x="43.8157%" y="357" width="0.0722%" height="15" fill="rgb(219,207,3)" fg:x="29975127667" fg:w="49371837"/><text x="44.0657%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (49,371,837 samples, 0.07%)</title><rect x="43.8157%" y="341" width="0.0722%" height="15" fill="rgb(222,56,46)" fg:x="29975127667" fg:w="49371837"/><text x="44.0657%" y="351.50"></text></g><g><title>core::cmp::max (8,259,414 samples, 0.01%)</title><rect x="43.8758%" y="325" width="0.0121%" height="15" fill="rgb(239,76,54)" fg:x="30016240090" fg:w="8259414"/><text x="44.1258%" y="335.50"></text></g><g><title>core::cmp::Ord::max (8,259,414 samples, 0.01%)</title><rect x="43.8758%" y="309" width="0.0121%" height="15" fill="rgb(231,124,27)" fg:x="30016240090" fg:w="8259414"/><text x="44.1258%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (539,379,925 samples, 0.79%)</title><rect x="43.8879%" y="341" width="0.7884%" height="15" fill="rgb(249,195,6)" fg:x="30024499504" fg:w="539379925"/><text x="44.1379%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (539,379,925 samples, 0.79%)</title><rect x="43.8879%" y="325" width="0.7884%" height="15" fill="rgb(237,174,47)" fg:x="30024499504" fg:w="539379925"/><text x="44.1379%" y="335.50"></text></g><g><title>alloc::alloc::realloc (539,379,925 samples, 0.79%)</title><rect x="43.8879%" y="309" width="0.7884%" height="15" fill="rgb(206,201,31)" fg:x="30024499504" fg:w="539379925"/><text x="44.1379%" y="319.50"></text></g><g><title>realloc (535,269,567 samples, 0.78%)</title><rect x="43.8939%" y="293" width="0.7824%" height="15" fill="rgb(231,57,52)" fg:x="30028609862" fg:w="535269567"/><text x="44.1439%" y="303.50"></text></g><g><title>[libc.so.6] (469,462,189 samples, 0.69%)</title><rect x="43.9901%" y="277" width="0.6862%" height="15" fill="rgb(248,177,22)" fg:x="30094417240" fg:w="469462189"/><text x="44.2401%" y="287.50"></text></g><g><title>[libc.so.6] (382,919,852 samples, 0.56%)</title><rect x="44.1166%" y="261" width="0.5597%" height="15" fill="rgb(215,211,37)" fg:x="30180959577" fg:w="382919852"/><text x="44.3666%" y="271.50"></text></g><g><title>[libc.so.6] (45,311,054 samples, 0.07%)</title><rect x="44.6101%" y="245" width="0.0662%" height="15" fill="rgb(241,128,51)" fg:x="30518568375" fg:w="45311054"/><text x="44.8601%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (543,519,028 samples, 0.79%)</title><rect x="43.8879%" y="357" width="0.7945%" height="15" fill="rgb(227,165,31)" fg:x="30024499504" fg:w="543519028"/><text x="44.1379%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (20,669,353 samples, 0.03%)</title><rect x="44.7246%" y="277" width="0.0302%" height="15" fill="rgb(228,167,24)" fg:x="30596899299" fg:w="20669353"/><text x="44.9746%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (33,056,196 samples, 0.05%)</title><rect x="44.7185%" y="293" width="0.0483%" height="15" fill="rgb(228,143,12)" fg:x="30592784566" fg:w="33056196"/><text x="44.9685%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,272,110 samples, 0.01%)</title><rect x="44.7548%" y="277" width="0.0121%" height="15" fill="rgb(249,149,8)" fg:x="30617568652" fg:w="8272110"/><text x="45.0048%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (82,340,769 samples, 0.12%)</title><rect x="44.6945%" y="341" width="0.1204%" height="15" fill="rgb(243,35,44)" fg:x="30576326392" fg:w="82340769"/><text x="44.9445%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (82,340,769 samples, 0.12%)</title><rect x="44.6945%" y="325" width="0.1204%" height="15" fill="rgb(246,89,9)" fg:x="30576326392" fg:w="82340769"/><text x="44.9445%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (82,340,769 samples, 0.12%)</title><rect x="44.6945%" y="309" width="0.1204%" height="15" fill="rgb(233,213,13)" fg:x="30576326392" fg:w="82340769"/><text x="44.9445%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (32,826,399 samples, 0.05%)</title><rect x="44.7669%" y="293" width="0.0480%" height="15" fill="rgb(233,141,41)" fg:x="30625840762" fg:w="32826399"/><text x="45.0169%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12,303,450 samples, 0.02%)</title><rect x="44.7969%" y="277" width="0.0180%" height="15" fill="rgb(239,167,4)" fg:x="30646363711" fg:w="12303450"/><text x="45.0469%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (90,605,603 samples, 0.13%)</title><rect x="44.6884%" y="357" width="0.1324%" height="15" fill="rgb(209,217,16)" fg:x="30572177125" fg:w="90605603"/><text x="44.9384%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (12,273,946 samples, 0.02%)</title><rect x="44.8269%" y="357" width="0.0179%" height="15" fill="rgb(219,88,35)" fg:x="30666919524" fg:w="12273946"/><text x="45.0769%" y="367.50"></text></g><g><title>core::slice::sort::stable::drift::sort (12,375,283 samples, 0.02%)</title><rect x="44.8448%" y="357" width="0.0181%" height="15" fill="rgb(220,193,23)" fg:x="30679193470" fg:w="12375283"/><text x="45.0948%" y="367.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (12,375,283 samples, 0.02%)</title><rect x="44.8448%" y="341" width="0.0181%" height="15" fill="rgb(230,90,52)" fg:x="30679193470" fg:w="12375283"/><text x="45.0948%" y="351.50"></text></g><g><title>core::slice::sort::stable::merge::merge (12,375,283 samples, 0.02%)</title><rect x="44.8448%" y="325" width="0.0181%" height="15" fill="rgb(252,106,19)" fg:x="30679193470" fg:w="12375283"/><text x="45.0948%" y="335.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_up (8,252,530 samples, 0.01%)</title><rect x="44.8509%" y="309" width="0.0121%" height="15" fill="rgb(206,74,20)" fg:x="30683316223" fg:w="8252530"/><text x="45.1009%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (8,252,530 samples, 0.01%)</title><rect x="44.8509%" y="293" width="0.0121%" height="15" fill="rgb(230,138,44)" fg:x="30683316223" fg:w="8252530"/><text x="45.1009%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (11,336,374 samples, 0.02%)</title><rect x="44.8629%" y="309" width="0.0166%" height="15" fill="rgb(235,182,43)" fg:x="30691568753" fg:w="11336374"/><text x="45.1129%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (7,368,495 samples, 0.01%)</title><rect x="44.8687%" y="293" width="0.0108%" height="15" fill="rgb(242,16,51)" fg:x="30695536632" fg:w="7368495"/><text x="45.1187%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (15,435,545 samples, 0.02%)</title><rect x="44.8629%" y="325" width="0.0226%" height="15" fill="rgb(248,9,4)" fg:x="30691568753" fg:w="15435545"/><text x="45.1129%" y="335.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (19,447,416 samples, 0.03%)</title><rect x="44.8629%" y="341" width="0.0284%" height="15" fill="rgb(210,31,22)" fg:x="30691568753" fg:w="19447416"/><text x="45.1129%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (35,906,005 samples, 0.05%)</title><rect x="44.8629%" y="357" width="0.0525%" height="15" fill="rgb(239,54,39)" fg:x="30691568753" fg:w="35906005"/><text x="45.1129%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (16,458,589 samples, 0.02%)</title><rect x="44.8914%" y="341" width="0.0241%" height="15" fill="rgb(230,99,41)" fg:x="30711016169" fg:w="16458589"/><text x="45.1414%" y="351.50"></text></g><g><title>core::ptr::copy_nonoverlapping (12,363,988 samples, 0.02%)</title><rect x="44.8973%" y="325" width="0.0181%" height="15" fill="rgb(253,106,12)" fg:x="30715110770" fg:w="12363988"/><text x="45.1473%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12,328,894 samples, 0.02%)</title><rect x="44.9154%" y="357" width="0.0180%" height="15" fill="rgb(213,46,41)" fg:x="30727474758" fg:w="12328894"/><text x="45.1654%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (8,267,779 samples, 0.01%)</title><rect x="44.9334%" y="309" width="0.0121%" height="15" fill="rgb(215,133,35)" fg:x="30739803652" fg:w="8267779"/><text x="45.1834%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (8,267,779 samples, 0.01%)</title><rect x="44.9334%" y="293" width="0.0121%" height="15" fill="rgb(213,28,5)" fg:x="30739803652" fg:w="8267779"/><text x="45.1834%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12,378,518 samples, 0.02%)</title><rect x="44.9334%" y="357" width="0.0181%" height="15" fill="rgb(215,77,49)" fg:x="30739803652" fg:w="12378518"/><text x="45.1834%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (12,378,518 samples, 0.02%)</title><rect x="44.9334%" y="341" width="0.0181%" height="15" fill="rgb(248,100,22)" fg:x="30739803652" fg:w="12378518"/><text x="45.1834%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (12,378,518 samples, 0.02%)</title><rect x="44.9334%" y="325" width="0.0181%" height="15" fill="rgb(208,67,9)" fg:x="30739803652" fg:w="12378518"/><text x="45.1834%" y="335.50"></text></g><g><title>img::png::deflate::DeflateEncoder::finish (8,258,962 samples, 0.01%)</title><rect x="44.9550%" y="357" width="0.0121%" height="15" fill="rgb(219,133,21)" fg:x="30754530385" fg:w="8258962"/><text x="45.2050%" y="367.50"></text></g><g><title>cfree (8,258,962 samples, 0.01%)</title><rect x="44.9550%" y="341" width="0.0121%" height="15" fill="rgb(246,46,29)" fg:x="30754530385" fg:w="8258962"/><text x="45.2050%" y="351.50"></text></g><g><title>[libc.so.6] (8,258,962 samples, 0.01%)</title><rect x="44.9550%" y="325" width="0.0121%" height="15" fill="rgb(246,185,52)" fg:x="30754530385" fg:w="8258962"/><text x="45.2050%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,258,962 samples, 0.01%)</title><rect x="44.9550%" y="309" width="0.0121%" height="15" fill="rgb(252,136,11)" fg:x="30754530385" fg:w="8258962"/><text x="45.2050%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,258,962 samples, 0.01%)</title><rect x="44.9550%" y="293" width="0.0121%" height="15" fill="rgb(219,138,53)" fg:x="30754530385" fg:w="8258962"/><text x="45.2050%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,258,962 samples, 0.01%)</title><rect x="44.9550%" y="277" width="0.0121%" height="15" fill="rgb(211,51,23)" fg:x="30754530385" fg:w="8258962"/><text x="45.2050%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (8,258,962 samples, 0.01%)</title><rect x="44.9550%" y="261" width="0.0121%" height="15" fill="rgb(247,221,28)" fg:x="30754530385" fg:w="8258962"/><text x="45.2050%" y="271.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (20,451,348 samples, 0.03%)</title><rect x="44.9790%" y="341" width="0.0299%" height="15" fill="rgb(251,222,45)" fg:x="30771000052" fg:w="20451348"/><text x="45.2290%" y="351.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (8,251,758 samples, 0.01%)</title><rect x="44.9969%" y="325" width="0.0121%" height="15" fill="rgb(217,162,53)" fg:x="30783199642" fg:w="8251758"/><text x="45.2469%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (8,251,758 samples, 0.01%)</title><rect x="44.9969%" y="309" width="0.0121%" height="15" fill="rgb(229,93,14)" fg:x="30783199642" fg:w="8251758"/><text x="45.2469%" y="319.50"></text></g><g><title>img::png::deflate::encode_block_type_two (32,755,159 samples, 0.05%)</title><rect x="44.9730%" y="357" width="0.0479%" height="15" fill="rgb(209,67,49)" fg:x="30766897779" fg:w="32755159"/><text x="45.2230%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (8,246,570 samples, 0.01%)</title><rect x="45.0270%" y="341" width="0.0121%" height="15" fill="rgb(213,87,29)" fg:x="30803777073" fg:w="8246570"/><text x="45.2770%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (8,252,845 samples, 0.01%)</title><rect x="45.0390%" y="325" width="0.0121%" height="15" fill="rgb(205,151,52)" fg:x="30812023643" fg:w="8252845"/><text x="45.2890%" y="335.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (8,252,845 samples, 0.01%)</title><rect x="45.0390%" y="309" width="0.0121%" height="15" fill="rgb(253,215,39)" fg:x="30812023643" fg:w="8252845"/><text x="45.2890%" y="319.50"></text></g><g><title>core::ptr::read (8,252,845 samples, 0.01%)</title><rect x="45.0390%" y="293" width="0.0121%" height="15" fill="rgb(221,220,41)" fg:x="30812023643" fg:w="8252845"/><text x="45.2890%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8,220,361 samples, 0.01%)</title><rect x="45.0511%" y="325" width="0.0120%" height="15" fill="rgb(218,133,21)" fg:x="30820276488" fg:w="8220361"/><text x="45.3011%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8,220,361 samples, 0.01%)</title><rect x="45.0511%" y="309" width="0.0120%" height="15" fill="rgb(221,193,43)" fg:x="30820276488" fg:w="8220361"/><text x="45.3011%" y="319.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (8,220,361 samples, 0.01%)</title><rect x="45.0511%" y="293" width="0.0120%" height="15" fill="rgb(240,128,52)" fg:x="30820276488" fg:w="8220361"/><text x="45.3011%" y="303.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (37,109,213 samples, 0.05%)</title><rect x="45.0209%" y="357" width="0.0542%" height="15" fill="rgb(253,114,12)" fg:x="30799652938" fg:w="37109213"/><text x="45.2709%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (24,738,508 samples, 0.04%)</title><rect x="45.0390%" y="341" width="0.0362%" height="15" fill="rgb(215,223,47)" fg:x="30812023643" fg:w="24738508"/><text x="45.2890%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="325" width="0.0121%" height="15" fill="rgb(248,225,23)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="309" width="0.0121%" height="15" fill="rgb(250,108,0)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="293" width="0.0121%" height="15" fill="rgb(228,208,7)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="277" width="0.0121%" height="15" fill="rgb(244,45,10)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="261" width="0.0121%" height="15" fill="rgb(207,125,25)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="245" width="0.0121%" height="15" fill="rgb(210,195,18)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="229" width="0.0121%" height="15" fill="rgb(249,80,12)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="213" width="0.0121%" height="15" fill="rgb(221,65,9)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="197" width="0.0121%" height="15" fill="rgb(235,49,36)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (8,265,302 samples, 0.01%)</title><rect x="45.0631%" y="181" width="0.0121%" height="15" fill="rgb(225,32,20)" fg:x="30828496849" fg:w="8265302"/><text x="45.3131%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (531,394,969 samples, 0.78%)</title><rect x="58.6226%" y="309" width="0.7768%" height="15" fill="rgb(215,141,46)" fg:x="40104842182" fg:w="531394969"/><text x="58.8726%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,647,038,400 samples, 2.41%)</title><rect x="57.8338%" y="325" width="2.4075%" height="15" fill="rgb(250,160,47)" fg:x="39565180361" fg:w="1647038400"/><text x="58.0838%" y="335.50">&lt;a..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (575,981,610 samples, 0.84%)</title><rect x="59.3994%" y="309" width="0.8419%" height="15" fill="rgb(216,222,40)" fg:x="40636237151" fg:w="575981610"/><text x="59.6494%" y="319.50"></text></g><g><title>core::ptr::read (575,981,610 samples, 0.84%)</title><rect x="59.3994%" y="293" width="0.8419%" height="15" fill="rgb(234,217,39)" fg:x="40636237151" fg:w="575981610"/><text x="59.6494%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,090,329,940 samples, 1.59%)</title><rect x="60.2413%" y="325" width="1.5938%" height="15" fill="rgb(207,178,40)" fg:x="41212218761" fg:w="1090329940"/><text x="60.4913%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,940,267,246 samples, 2.84%)</title><rect x="61.8351%" y="325" width="2.8362%" height="15" fill="rgb(221,136,13)" fg:x="42302548701" fg:w="1940267246"/><text x="62.0851%" y="335.50">co..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (1,940,267,246 samples, 2.84%)</title><rect x="61.8351%" y="309" width="2.8362%" height="15" fill="rgb(249,199,10)" fg:x="42302548701" fg:w="1940267246"/><text x="62.0851%" y="319.50">im..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,269,499,647 samples, 1.86%)</title><rect x="62.8156%" y="293" width="1.8557%" height="15" fill="rgb(249,222,13)" fg:x="42973316300" fg:w="1269499647"/><text x="63.0656%" y="303.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,269,499,647 samples, 1.86%)</title><rect x="62.8156%" y="277" width="1.8557%" height="15" fill="rgb(244,185,38)" fg:x="42973316300" fg:w="1269499647"/><text x="63.0656%" y="287.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,269,499,647 samples, 1.86%)</title><rect x="62.8156%" y="261" width="1.8557%" height="15" fill="rgb(236,202,9)" fg:x="42973316300" fg:w="1269499647"/><text x="63.0656%" y="271.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u16,u16)&gt;&gt; (49,317,440 samples, 0.07%)</title><rect x="64.6773%" y="325" width="0.0721%" height="15" fill="rgb(250,229,37)" fg:x="44246971420" fg:w="49317440"/><text x="64.9273%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49,317,440 samples, 0.07%)</title><rect x="64.6773%" y="309" width="0.0721%" height="15" fill="rgb(206,174,23)" fg:x="44246971420" fg:w="49317440"/><text x="64.9273%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u16,u16),alloc::alloc::Global&gt;&gt; (49,317,440 samples, 0.07%)</title><rect x="64.6773%" y="293" width="0.0721%" height="15" fill="rgb(211,33,43)" fg:x="44246971420" fg:w="49317440"/><text x="64.9273%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49,317,440 samples, 0.07%)</title><rect x="64.6773%" y="277" width="0.0721%" height="15" fill="rgb(245,58,50)" fg:x="44246971420" fg:w="49317440"/><text x="64.9273%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u16,u16)&gt;&gt; (49,317,440 samples, 0.07%)</title><rect x="64.6773%" y="261" width="0.0721%" height="15" fill="rgb(244,68,36)" fg:x="44246971420" fg:w="49317440"/><text x="64.9273%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49,317,440 samples, 0.07%)</title><rect x="64.6773%" y="245" width="0.0721%" height="15" fill="rgb(232,229,15)" fg:x="44246971420" fg:w="49317440"/><text x="64.9273%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (49,317,440 samples, 0.07%)</title><rect x="64.6773%" y="229" width="0.0721%" height="15" fill="rgb(254,30,23)" fg:x="44246971420" fg:w="49317440"/><text x="64.9273%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (49,317,440 samples, 0.07%)</title><rect x="64.6773%" y="213" width="0.0721%" height="15" fill="rgb(235,160,14)" fg:x="44246971420" fg:w="49317440"/><text x="64.9273%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (49,317,440 samples, 0.07%)</title><rect x="64.6773%" y="197" width="0.0721%" height="15" fill="rgb(212,155,44)" fg:x="44246971420" fg:w="49317440"/><text x="64.9273%" y="207.50"></text></g><g><title>cfree (45,245,265 samples, 0.07%)</title><rect x="64.6833%" y="181" width="0.0661%" height="15" fill="rgb(226,2,50)" fg:x="44251043595" fg:w="45245265"/><text x="64.9333%" y="191.50"></text></g><g><title>[libc.so.6] (20,515,676 samples, 0.03%)</title><rect x="64.7194%" y="165" width="0.0300%" height="15" fill="rgb(234,177,6)" fg:x="44275773184" fg:w="20515676"/><text x="64.9694%" y="175.50"></text></g><g><title>[libc.so.6] (16,383,272 samples, 0.02%)</title><rect x="64.7255%" y="149" width="0.0239%" height="15" fill="rgb(217,24,9)" fg:x="44279905588" fg:w="16383272"/><text x="64.9755%" y="159.50"></text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (14,355,181,340 samples, 20.98%)</title><rect x="64.7494%" y="325" width="20.9835%" height="15" fill="rgb(220,13,46)" fg:x="44296288860" fg:w="14355181340"/><text x="64.9994%" y="335.50">img::png::deflate::lzss::cost_of_..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (3,577,711,866 samples, 5.23%)</title><rect x="80.5032%" y="309" width="5.2297%" height="15" fill="rgb(239,221,27)" fg:x="55073758334" fg:w="3577711866"/><text x="80.7532%" y="319.50">core::..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (32,660,015 samples, 0.05%)</title><rect x="85.7329%" y="229" width="0.0477%" height="15" fill="rgb(222,198,25)" fg:x="58651470200" fg:w="32660015"/><text x="85.9829%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (20,281,346 samples, 0.03%)</title><rect x="85.7510%" y="213" width="0.0296%" height="15" fill="rgb(211,99,13)" fg:x="58663848869" fg:w="20281346"/><text x="86.0010%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (16,314,327 samples, 0.02%)</title><rect x="85.7568%" y="197" width="0.0238%" height="15" fill="rgb(232,111,31)" fg:x="58667815888" fg:w="16314327"/><text x="86.0068%" y="207.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (27,847,395,494 samples, 40.71%)</title><rect x="45.0812%" y="357" width="40.7055%" height="15" fill="rgb(245,82,37)" fg:x="30840865230" fg:w="27847395494"/><text x="45.3312%" y="367.50">img::png::deflate::lzss::encode_lzss_optimized</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (27,847,395,494 samples, 40.71%)</title><rect x="45.0812%" y="341" width="40.7055%" height="15" fill="rgb(227,149,46)" fg:x="30840865230" fg:w="27847395494"/><text x="45.3312%" y="351.50">img::png::deflate::lzss::encode_lzss_iteration</text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (36,790,524 samples, 0.05%)</title><rect x="85.7329%" y="325" width="0.0538%" height="15" fill="rgb(218,36,50)" fg:x="58651470200" fg:w="36790524"/><text x="85.9829%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (36,790,524 samples, 0.05%)</title><rect x="85.7329%" y="309" width="0.0538%" height="15" fill="rgb(226,80,48)" fg:x="58651470200" fg:w="36790524"/><text x="85.9829%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36,790,524 samples, 0.05%)</title><rect x="85.7329%" y="293" width="0.0538%" height="15" fill="rgb(238,224,15)" fg:x="58651470200" fg:w="36790524"/><text x="85.9829%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36,790,524 samples, 0.05%)</title><rect x="85.7329%" y="277" width="0.0538%" height="15" fill="rgb(241,136,10)" fg:x="58651470200" fg:w="36790524"/><text x="85.9829%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36,790,524 samples, 0.05%)</title><rect x="85.7329%" y="261" width="0.0538%" height="15" fill="rgb(208,32,45)" fg:x="58651470200" fg:w="36790524"/><text x="85.9829%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (36,790,524 samples, 0.05%)</title><rect x="85.7329%" y="245" width="0.0538%" height="15" fill="rgb(207,135,9)" fg:x="58651470200" fg:w="36790524"/><text x="85.9829%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8,254,164 samples, 0.01%)</title><rect x="93.1046%" y="245" width="0.0121%" height="15" fill="rgb(206,86,44)" fg:x="63694588211" fg:w="8254164"/><text x="93.3546%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8,254,164 samples, 0.01%)</title><rect x="93.1046%" y="229" width="0.0121%" height="15" fill="rgb(245,177,15)" fg:x="63694588211" fg:w="8254164"/><text x="93.3546%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (8,254,164 samples, 0.01%)</title><rect x="93.1046%" y="213" width="0.0121%" height="15" fill="rgb(206,64,50)" fg:x="63694588211" fg:w="8254164"/><text x="93.3546%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8,254,164 samples, 0.01%)</title><rect x="93.1046%" y="197" width="0.0121%" height="15" fill="rgb(234,36,40)" fg:x="63694588211" fg:w="8254164"/><text x="93.3546%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (28,884,332 samples, 0.04%)</title><rect x="93.1167%" y="245" width="0.0422%" height="15" fill="rgb(213,64,8)" fg:x="63702842375" fg:w="28884332"/><text x="93.3667%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28,884,332 samples, 0.04%)</title><rect x="93.1167%" y="229" width="0.0422%" height="15" fill="rgb(210,75,36)" fg:x="63702842375" fg:w="28884332"/><text x="93.3667%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (28,884,332 samples, 0.04%)</title><rect x="93.1167%" y="213" width="0.0422%" height="15" fill="rgb(229,88,21)" fg:x="63702842375" fg:w="28884332"/><text x="93.3667%" y="223.50"></text></g><g><title>malloc (8,248,370 samples, 0.01%)</title><rect x="93.1468%" y="197" width="0.0121%" height="15" fill="rgb(252,204,47)" fg:x="63723478337" fg:w="8248370"/><text x="93.3968%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (8,248,370 samples, 0.01%)</title><rect x="93.1468%" y="181" width="0.0121%" height="15" fill="rgb(208,77,27)" fg:x="63723478337" fg:w="8248370"/><text x="93.3968%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8,248,370 samples, 0.01%)</title><rect x="93.1468%" y="165" width="0.0121%" height="15" fill="rgb(221,76,26)" fg:x="63723478337" fg:w="8248370"/><text x="93.3968%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8,248,370 samples, 0.01%)</title><rect x="93.1468%" y="149" width="0.0121%" height="15" fill="rgb(225,139,18)" fg:x="63723478337" fg:w="8248370"/><text x="93.3968%" y="159.50"></text></g><g><title>alloc::alloc::realloc (8,248,370 samples, 0.01%)</title><rect x="93.1468%" y="133" width="0.0121%" height="15" fill="rgb(230,137,11)" fg:x="63723478337" fg:w="8248370"/><text x="93.3968%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (765,104,871 samples, 1.12%)</title><rect x="93.1589%" y="245" width="1.1184%" height="15" fill="rgb(212,28,1)" fg:x="63731726707" fg:w="765104871"/><text x="93.4089%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6,958,796,160 samples, 10.17%)</title><rect x="85.7988%" y="341" width="10.1719%" height="15" fill="rgb(248,164,17)" fg:x="58696558739" fg:w="6958796160"/><text x="86.0488%" y="351.50">core::iter::tra..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,958,796,160 samples, 10.17%)</title><rect x="85.7988%" y="325" width="10.1719%" height="15" fill="rgb(222,171,42)" fg:x="58696558739" fg:w="6958796160"/><text x="86.0488%" y="335.50">&lt;alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,958,796,160 samples, 10.17%)</title><rect x="85.7988%" y="309" width="10.1719%" height="15" fill="rgb(243,84,45)" fg:x="58696558739" fg:w="6958796160"/><text x="86.0488%" y="319.50">&lt;alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,958,796,160 samples, 10.17%)</title><rect x="85.7988%" y="293" width="10.1719%" height="15" fill="rgb(252,49,23)" fg:x="58696558739" fg:w="6958796160"/><text x="86.0488%" y="303.50">&lt;alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,954,670,734 samples, 10.17%)</title><rect x="85.8048%" y="277" width="10.1659%" height="15" fill="rgb(215,19,7)" fg:x="58700684165" fg:w="6954670734"/><text x="86.0548%" y="287.50">&lt;alloc::vec::Ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6,954,670,734 samples, 10.17%)</title><rect x="85.8048%" y="261" width="10.1659%" height="15" fill="rgb(238,81,41)" fg:x="58700684165" fg:w="6954670734"/><text x="86.0548%" y="271.50">alloc::vec::Vec..</text></g><g><title>core::ptr::write (1,158,523,321 samples, 1.69%)</title><rect x="94.2773%" y="245" width="1.6935%" height="15" fill="rgb(210,199,37)" fg:x="64496831578" fg:w="1158523321"/><text x="94.5273%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_key (8,245,171 samples, 0.01%)</title><rect x="95.9707%" y="341" width="0.0121%" height="15" fill="rgb(244,192,49)" fg:x="65655354899" fg:w="8245171"/><text x="96.2207%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (28,924,058 samples, 0.04%)</title><rect x="95.9828%" y="245" width="0.0423%" height="15" fill="rgb(226,211,11)" fg:x="65663600070" fg:w="28924058"/><text x="96.2328%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (16,534,633 samples, 0.02%)</title><rect x="96.0009%" y="229" width="0.0242%" height="15" fill="rgb(236,162,54)" fg:x="65675989495" fg:w="16534633"/><text x="96.2509%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (16,534,633 samples, 0.02%)</title><rect x="96.0009%" y="213" width="0.0242%" height="15" fill="rgb(220,229,9)" fg:x="65675989495" fg:w="16534633"/><text x="96.2509%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (41,290,677 samples, 0.06%)</title><rect x="95.9828%" y="341" width="0.0604%" height="15" fill="rgb(250,87,22)" fg:x="65663600070" fg:w="41290677"/><text x="96.2328%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (41,290,677 samples, 0.06%)</title><rect x="95.9828%" y="325" width="0.0604%" height="15" fill="rgb(239,43,17)" fg:x="65663600070" fg:w="41290677"/><text x="96.2328%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (41,290,677 samples, 0.06%)</title><rect x="95.9828%" y="309" width="0.0604%" height="15" fill="rgb(231,177,25)" fg:x="65663600070" fg:w="41290677"/><text x="96.2328%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41,290,677 samples, 0.06%)</title><rect x="95.9828%" y="293" width="0.0604%" height="15" fill="rgb(219,179,1)" fg:x="65663600070" fg:w="41290677"/><text x="96.2328%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41,290,677 samples, 0.06%)</title><rect x="95.9828%" y="277" width="0.0604%" height="15" fill="rgb(238,219,53)" fg:x="65663600070" fg:w="41290677"/><text x="96.2328%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (41,290,677 samples, 0.06%)</title><rect x="95.9828%" y="261" width="0.0604%" height="15" fill="rgb(232,167,36)" fg:x="65663600070" fg:w="41290677"/><text x="96.2328%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12,366,619 samples, 0.02%)</title><rect x="96.0250%" y="245" width="0.0181%" height="15" fill="rgb(244,19,51)" fg:x="65692524128" fg:w="12366619"/><text x="96.2750%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (8,242,716 samples, 0.01%)</title><rect x="96.0311%" y="229" width="0.0120%" height="15" fill="rgb(224,6,22)" fg:x="65696648031" fg:w="8242716"/><text x="96.2811%" y="239.50"></text></g><g><title>core::intrinsics::likely (12,369,992 samples, 0.02%)</title><rect x="96.0431%" y="245" width="0.0181%" height="15" fill="rgb(224,145,5)" fg:x="65704890747" fg:w="12369992"/><text x="96.2931%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (7,037,279,309 samples, 10.29%)</title><rect x="85.7867%" y="357" width="10.2866%" height="15" fill="rgb(234,130,49)" fg:x="58688260724" fg:w="7037279309"/><text x="86.0367%" y="367.50">img::png::defla..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (20,649,286 samples, 0.03%)</title><rect x="96.0431%" y="341" width="0.0302%" height="15" fill="rgb(254,6,2)" fg:x="65704890747" fg:w="20649286"/><text x="96.2931%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (20,649,286 samples, 0.03%)</title><rect x="96.0431%" y="325" width="0.0302%" height="15" fill="rgb(208,96,46)" fg:x="65704890747" fg:w="20649286"/><text x="96.2931%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (20,649,286 samples, 0.03%)</title><rect x="96.0431%" y="309" width="0.0302%" height="15" fill="rgb(239,3,39)" fg:x="65704890747" fg:w="20649286"/><text x="96.2931%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (20,649,286 samples, 0.03%)</title><rect x="96.0431%" y="293" width="0.0302%" height="15" fill="rgb(233,210,1)" fg:x="65704890747" fg:w="20649286"/><text x="96.2931%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20,649,286 samples, 0.03%)</title><rect x="96.0431%" y="277" width="0.0302%" height="15" fill="rgb(244,137,37)" fg:x="65704890747" fg:w="20649286"/><text x="96.2931%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (20,649,286 samples, 0.03%)</title><rect x="96.0431%" y="261" width="0.0302%" height="15" fill="rgb(240,136,2)" fg:x="65704890747" fg:w="20649286"/><text x="96.2931%" y="271.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (8,279,294 samples, 0.01%)</title><rect x="96.0612%" y="245" width="0.0121%" height="15" fill="rgb(239,18,37)" fg:x="65717260739" fg:w="8279294"/><text x="96.3112%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8,279,294 samples, 0.01%)</title><rect x="96.0612%" y="229" width="0.0121%" height="15" fill="rgb(218,185,22)" fg:x="65717260739" fg:w="8279294"/><text x="96.3112%" y="239.50"></text></g><g><title>core::ptr::copy_nonoverlapping (8,279,294 samples, 0.01%)</title><rect x="96.0612%" y="213" width="0.0121%" height="15" fill="rgb(225,218,4)" fg:x="65717260739" fg:w="8279294"/><text x="96.3112%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (12,396,384 samples, 0.02%)</title><rect x="96.0914%" y="341" width="0.0181%" height="15" fill="rgb(230,182,32)" fg:x="65737899982" fg:w="12396384"/><text x="96.3414%" y="351.50"></text></g><g><title>core::intrinsics::likely (20,584,802 samples, 0.03%)</title><rect x="96.1215%" y="245" width="0.0301%" height="15" fill="rgb(242,56,43)" fg:x="65758542811" fg:w="20584802"/><text x="96.3715%" y="255.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (8,179,151 samples, 0.01%)</title><rect x="96.1577%" y="245" width="0.0120%" height="15" fill="rgb(233,99,24)" fg:x="65783241804" fg:w="8179151"/><text x="96.4077%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8,179,151 samples, 0.01%)</title><rect x="96.1577%" y="229" width="0.0120%" height="15" fill="rgb(234,209,42)" fg:x="65783241804" fg:w="8179151"/><text x="96.4077%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (69,997,921 samples, 0.10%)</title><rect x="96.0733%" y="357" width="0.1023%" height="15" fill="rgb(227,7,12)" fg:x="65725540033" fg:w="69997921"/><text x="96.3233%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (45,241,588 samples, 0.07%)</title><rect x="96.1095%" y="341" width="0.0661%" height="15" fill="rgb(245,203,43)" fg:x="65750296366" fg:w="45241588"/><text x="96.3595%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (45,241,588 samples, 0.07%)</title><rect x="96.1095%" y="325" width="0.0661%" height="15" fill="rgb(238,205,33)" fg:x="65750296366" fg:w="45241588"/><text x="96.3595%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (45,241,588 samples, 0.07%)</title><rect x="96.1095%" y="309" width="0.0661%" height="15" fill="rgb(231,56,7)" fg:x="65750296366" fg:w="45241588"/><text x="96.3595%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (41,119,088 samples, 0.06%)</title><rect x="96.1155%" y="293" width="0.0601%" height="15" fill="rgb(244,186,29)" fg:x="65754418866" fg:w="41119088"/><text x="96.3655%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (41,119,088 samples, 0.06%)</title><rect x="96.1155%" y="277" width="0.0601%" height="15" fill="rgb(234,111,31)" fg:x="65754418866" fg:w="41119088"/><text x="96.3655%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (41,119,088 samples, 0.06%)</title><rect x="96.1155%" y="261" width="0.0601%" height="15" fill="rgb(241,149,10)" fg:x="65754418866" fg:w="41119088"/><text x="96.3655%" y="271.50"></text></g><g><title>[unknown] (36,793,723,307 samples, 53.78%)</title><rect x="42.3990%" y="373" width="53.7827%" height="15" fill="rgb(249,206,44)" fg:x="29005920844" fg:w="36793723307"/><text x="42.6490%" y="383.50">[unknown]</text></g><g><title>__rustc::__rdl_alloc (24,540,781 samples, 0.04%)</title><rect x="96.1816%" y="373" width="0.0359%" height="15" fill="rgb(251,153,30)" fg:x="65799644151" fg:w="24540781"/><text x="96.4316%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (24,540,781 samples, 0.04%)</title><rect x="96.1816%" y="357" width="0.0359%" height="15" fill="rgb(239,152,38)" fg:x="65799644151" fg:w="24540781"/><text x="96.4316%" y="367.50"></text></g><g><title>__rustc::__rdl_realloc (12,350,711 samples, 0.02%)</title><rect x="96.2235%" y="373" width="0.0181%" height="15" fill="rgb(249,139,47)" fg:x="65828313948" fg:w="12350711"/><text x="96.4735%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (12,350,711 samples, 0.02%)</title><rect x="96.2235%" y="357" width="0.0181%" height="15" fill="rgb(244,64,35)" fg:x="65828313948" fg:w="12350711"/><text x="96.4735%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (90,334,822 samples, 0.13%)</title><rect x="96.2716%" y="373" width="0.1320%" height="15" fill="rgb(216,46,15)" fg:x="65861202816" fg:w="90334822"/><text x="96.5216%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (82,049,209 samples, 0.12%)</title><rect x="96.2837%" y="357" width="0.1199%" height="15" fill="rgb(250,74,19)" fg:x="65869488429" fg:w="82049209"/><text x="96.5337%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (82,049,209 samples, 0.12%)</title><rect x="96.2837%" y="341" width="0.1199%" height="15" fill="rgb(249,42,33)" fg:x="65869488429" fg:w="82049209"/><text x="96.5337%" y="351.50"></text></g><g><title>alloc::alloc::realloc (82,049,209 samples, 0.12%)</title><rect x="96.2837%" y="325" width="0.1199%" height="15" fill="rgb(242,149,17)" fg:x="65869488429" fg:w="82049209"/><text x="96.5337%" y="335.50"></text></g><g><title>realloc (77,978,418 samples, 0.11%)</title><rect x="96.2897%" y="309" width="0.1140%" height="15" fill="rgb(244,29,21)" fg:x="65873559220" fg:w="77978418"/><text x="96.5397%" y="319.50"></text></g><g><title>[libc.so.6] (73,862,794 samples, 0.11%)</title><rect x="96.2957%" y="293" width="0.1080%" height="15" fill="rgb(220,130,37)" fg:x="65877674844" fg:w="73862794"/><text x="96.5457%" y="303.50"></text></g><g><title>[libc.so.6] (69,706,752 samples, 0.10%)</title><rect x="96.3018%" y="277" width="0.1019%" height="15" fill="rgb(211,67,2)" fg:x="65881830886" fg:w="69706752"/><text x="96.5518%" y="287.50"></text></g><g><title>[libc.so.6] (49,206,032 samples, 0.07%)</title><rect x="96.3317%" y="261" width="0.0719%" height="15" fill="rgb(235,68,52)" fg:x="65902331606" fg:w="49206032"/><text x="96.5817%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8,186,124 samples, 0.01%)</title><rect x="96.4175%" y="309" width="0.0120%" height="15" fill="rgb(246,142,3)" fg:x="65961015982" fg:w="8186124"/><text x="96.6675%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,186,124 samples, 0.01%)</title><rect x="96.4175%" y="293" width="0.0120%" height="15" fill="rgb(241,25,7)" fg:x="65961015982" fg:w="8186124"/><text x="96.6675%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12,316,271 samples, 0.02%)</title><rect x="96.4415%" y="293" width="0.0180%" height="15" fill="rgb(242,119,39)" fg:x="65977456421" fg:w="12316271"/><text x="96.6915%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (32,879,914 samples, 0.05%)</title><rect x="96.4175%" y="357" width="0.0481%" height="15" fill="rgb(241,98,45)" fg:x="65961015982" fg:w="32879914"/><text x="96.6675%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (32,879,914 samples, 0.05%)</title><rect x="96.4175%" y="341" width="0.0481%" height="15" fill="rgb(254,28,30)" fg:x="65961015982" fg:w="32879914"/><text x="96.6675%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (32,879,914 samples, 0.05%)</title><rect x="96.4175%" y="325" width="0.0481%" height="15" fill="rgb(241,142,54)" fg:x="65961015982" fg:w="32879914"/><text x="96.6675%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (24,693,790 samples, 0.04%)</title><rect x="96.4295%" y="309" width="0.0361%" height="15" fill="rgb(222,85,15)" fg:x="65969202106" fg:w="24693790"/><text x="96.6795%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (53,283,781 samples, 0.08%)</title><rect x="96.4116%" y="373" width="0.0779%" height="15" fill="rgb(210,85,47)" fg:x="65956976077" fg:w="53283781"/><text x="96.6616%" y="383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (16,363,962 samples, 0.02%)</title><rect x="96.4656%" y="357" width="0.0239%" height="15" fill="rgb(224,206,25)" fg:x="65993895896" fg:w="16363962"/><text x="96.7156%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (12,222,221 samples, 0.02%)</title><rect x="96.4716%" y="341" width="0.0179%" height="15" fill="rgb(243,201,19)" fg:x="65998037637" fg:w="12222221"/><text x="96.7216%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (12,222,221 samples, 0.02%)</title><rect x="96.4716%" y="325" width="0.0179%" height="15" fill="rgb(236,59,4)" fg:x="65998037637" fg:w="12222221"/><text x="96.7216%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (12,222,221 samples, 0.02%)</title><rect x="96.4716%" y="309" width="0.0179%" height="15" fill="rgb(254,179,45)" fg:x="65998037637" fg:w="12222221"/><text x="96.7216%" y="319.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (16,277,473 samples, 0.02%)</title><rect x="96.5014%" y="373" width="0.0238%" height="15" fill="rgb(226,14,10)" fg:x="66018428600" fg:w="16277473"/><text x="96.7514%" y="383.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (12,187,198 samples, 0.02%)</title><rect x="96.5074%" y="357" width="0.0178%" height="15" fill="rgb(244,27,41)" fg:x="66022518875" fg:w="12187198"/><text x="96.7574%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (12,187,198 samples, 0.02%)</title><rect x="96.5074%" y="341" width="0.0178%" height="15" fill="rgb(235,35,32)" fg:x="66022518875" fg:w="12187198"/><text x="96.7574%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (8,186,874 samples, 0.01%)</title><rect x="96.5133%" y="325" width="0.0120%" height="15" fill="rgb(218,68,31)" fg:x="66026519199" fg:w="8186874"/><text x="96.7633%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8,215,106 samples, 0.01%)</title><rect x="96.5252%" y="373" width="0.0120%" height="15" fill="rgb(207,120,37)" fg:x="66034706073" fg:w="8215106"/><text x="96.7752%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8,252,997 samples, 0.01%)</title><rect x="96.5372%" y="373" width="0.0121%" height="15" fill="rgb(227,98,0)" fg:x="66042921179" fg:w="8252997"/><text x="96.7872%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (8,252,997 samples, 0.01%)</title><rect x="96.5372%" y="357" width="0.0121%" height="15" fill="rgb(207,7,3)" fg:x="66042921179" fg:w="8252997"/><text x="96.7872%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (8,252,997 samples, 0.01%)</title><rect x="96.5372%" y="341" width="0.0121%" height="15" fill="rgb(206,98,19)" fg:x="66042921179" fg:w="8252997"/><text x="96.7872%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (8,243,227 samples, 0.01%)</title><rect x="96.5598%" y="341" width="0.0120%" height="15" fill="rgb(217,5,26)" fg:x="66058382613" fg:w="8243227"/><text x="96.8098%" y="351.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (8,243,227 samples, 0.01%)</title><rect x="96.5598%" y="325" width="0.0120%" height="15" fill="rgb(235,190,38)" fg:x="66058382613" fg:w="8243227"/><text x="96.8098%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (8,243,227 samples, 0.01%)</title><rect x="96.5598%" y="309" width="0.0120%" height="15" fill="rgb(247,86,24)" fg:x="66058382613" fg:w="8243227"/><text x="96.8098%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (8,243,227 samples, 0.01%)</title><rect x="96.5598%" y="293" width="0.0120%" height="15" fill="rgb(205,101,16)" fg:x="66058382613" fg:w="8243227"/><text x="96.8098%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,243,227 samples, 0.01%)</title><rect x="96.5598%" y="277" width="0.0120%" height="15" fill="rgb(246,168,33)" fg:x="66058382613" fg:w="8243227"/><text x="96.8098%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,243,227 samples, 0.01%)</title><rect x="96.5598%" y="261" width="0.0120%" height="15" fill="rgb(231,114,1)" fg:x="66058382613" fg:w="8243227"/><text x="96.8098%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,243,227 samples, 0.01%)</title><rect x="96.5598%" y="245" width="0.0120%" height="15" fill="rgb(207,184,53)" fg:x="66058382613" fg:w="8243227"/><text x="96.8098%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (8,243,227 samples, 0.01%)</title><rect x="96.5598%" y="229" width="0.0120%" height="15" fill="rgb(224,95,51)" fg:x="66058382613" fg:w="8243227"/><text x="96.8098%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="325" width="0.0175%" height="15" fill="rgb(212,188,45)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="309" width="0.0175%" height="15" fill="rgb(223,154,38)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="293" width="0.0175%" height="15" fill="rgb(251,22,52)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="277" width="0.0175%" height="15" fill="rgb(229,209,22)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="261" width="0.0175%" height="15" fill="rgb(234,138,34)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="245" width="0.0175%" height="15" fill="rgb(212,95,11)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="229" width="0.0175%" height="15" fill="rgb(240,179,47)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="213" width="0.0175%" height="15" fill="rgb(240,163,11)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="197" width="0.0175%" height="15" fill="rgb(236,37,12)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="207.50"></text></g><g><title>cfree (11,964,610 samples, 0.02%)</title><rect x="96.5779%" y="181" width="0.0175%" height="15" fill="rgb(232,164,16)" fg:x="66070734805" fg:w="11964610"/><text x="96.8279%" y="191.50"></text></g><g><title>[libc.so.6] (7,839,186 samples, 0.01%)</title><rect x="96.5839%" y="165" width="0.0115%" height="15" fill="rgb(244,205,15)" fg:x="66074860229" fg:w="7839186"/><text x="96.8339%" y="175.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (39,806,669 samples, 0.06%)</title><rect x="96.5493%" y="373" width="0.0582%" height="15" fill="rgb(223,117,47)" fg:x="66051174176" fg:w="39806669"/><text x="96.7993%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (35,691,644 samples, 0.05%)</title><rect x="96.5553%" y="357" width="0.0522%" height="15" fill="rgb(244,107,35)" fg:x="66055289201" fg:w="35691644"/><text x="96.8053%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (20,246,040 samples, 0.03%)</title><rect x="96.5779%" y="341" width="0.0296%" height="15" fill="rgb(205,140,8)" fg:x="66070734805" fg:w="20246040"/><text x="96.8279%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (8,281,430 samples, 0.01%)</title><rect x="96.5954%" y="325" width="0.0121%" height="15" fill="rgb(228,84,46)" fg:x="66082699415" fg:w="8281430"/><text x="96.8454%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,281,430 samples, 0.01%)</title><rect x="96.5954%" y="309" width="0.0121%" height="15" fill="rgb(254,188,9)" fg:x="66082699415" fg:w="8281430"/><text x="96.8454%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,281,430 samples, 0.01%)</title><rect x="96.5954%" y="293" width="0.0121%" height="15" fill="rgb(206,112,54)" fg:x="66082699415" fg:w="8281430"/><text x="96.8454%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,281,430 samples, 0.01%)</title><rect x="96.5954%" y="277" width="0.0121%" height="15" fill="rgb(216,84,49)" fg:x="66082699415" fg:w="8281430"/><text x="96.8454%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (8,281,430 samples, 0.01%)</title><rect x="96.5954%" y="261" width="0.0121%" height="15" fill="rgb(214,194,35)" fg:x="66082699415" fg:w="8281430"/><text x="96.8454%" y="271.50"></text></g><g><title>cfree (8,281,430 samples, 0.01%)</title><rect x="96.5954%" y="245" width="0.0121%" height="15" fill="rgb(249,28,3)" fg:x="66082699415" fg:w="8281430"/><text x="96.8454%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (8,261,521 samples, 0.01%)</title><rect x="96.6075%" y="357" width="0.0121%" height="15" fill="rgb(222,56,52)" fg:x="66090980845" fg:w="8261521"/><text x="96.8575%" y="367.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (8,261,521 samples, 0.01%)</title><rect x="96.6075%" y="341" width="0.0121%" height="15" fill="rgb(245,217,50)" fg:x="66090980845" fg:w="8261521"/><text x="96.8575%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (8,261,521 samples, 0.01%)</title><rect x="96.6075%" y="325" width="0.0121%" height="15" fill="rgb(213,201,24)" fg:x="66090980845" fg:w="8261521"/><text x="96.8575%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (8,261,521 samples, 0.01%)</title><rect x="96.6075%" y="309" width="0.0121%" height="15" fill="rgb(248,116,28)" fg:x="66090980845" fg:w="8261521"/><text x="96.8575%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,261,521 samples, 0.01%)</title><rect x="96.6075%" y="293" width="0.0121%" height="15" fill="rgb(219,72,43)" fg:x="66090980845" fg:w="8261521"/><text x="96.8575%" y="303.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (12,288,812 samples, 0.02%)</title><rect x="96.6075%" y="373" width="0.0180%" height="15" fill="rgb(209,138,14)" fg:x="66090980845" fg:w="12288812"/><text x="96.8575%" y="383.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_greedy (14,848,189 samples, 0.02%)</title><rect x="96.6254%" y="373" width="0.0217%" height="15" fill="rgb(222,18,33)" fg:x="66103269657" fg:w="14848189"/><text x="96.8754%" y="383.50"></text></g><g><title>img::png::deflate::lzss::find_backreference_with_table (8,206,076 samples, 0.01%)</title><rect x="96.6352%" y="357" width="0.0120%" height="15" fill="rgb(213,199,7)" fg:x="66109911770" fg:w="8206076"/><text x="96.8852%" y="367.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (2,207,525,998 samples, 3.23%)</title><rect x="96.6472%" y="373" width="3.2268%" height="15" fill="rgb(250,110,10)" fg:x="66118117846" fg:w="2207525998"/><text x="96.8972%" y="383.50">img..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (2,207,525,998 samples, 3.23%)</title><rect x="96.6472%" y="357" width="3.2268%" height="15" fill="rgb(248,123,6)" fg:x="66118117846" fg:w="2207525998"/><text x="96.8972%" y="367.50">img..</text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (2,207,525,998 samples, 3.23%)</title><rect x="96.6472%" y="341" width="3.2268%" height="15" fill="rgb(206,91,31)" fg:x="66118117846" fg:w="2207525998"/><text x="96.8972%" y="351.50">img..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1,132,652,631 samples, 1.66%)</title><rect x="98.2183%" y="325" width="1.6556%" height="15" fill="rgb(211,154,13)" fg:x="67192991213" fg:w="1132652631"/><text x="98.4683%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (8,222,259 samples, 0.01%)</title><rect x="99.8740%" y="357" width="0.0120%" height="15" fill="rgb(225,148,7)" fg:x="68325643844" fg:w="8222259"/><text x="100.1240%" y="367.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (32,811,502 samples, 0.05%)</title><rect x="99.8740%" y="373" width="0.0480%" height="15" fill="rgb(220,160,43)" fg:x="68325643844" fg:w="32811502"/><text x="100.1240%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (24,589,243 samples, 0.04%)</title><rect x="99.8860%" y="357" width="0.0359%" height="15" fill="rgb(213,52,39)" fg:x="68333866103" fg:w="24589243"/><text x="100.1360%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (24,589,243 samples, 0.04%)</title><rect x="99.8860%" y="341" width="0.0359%" height="15" fill="rgb(243,137,7)" fg:x="68333866103" fg:w="24589243"/><text x="100.1360%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (24,589,243 samples, 0.04%)</title><rect x="99.8860%" y="325" width="0.0359%" height="15" fill="rgb(230,79,13)" fg:x="68333866103" fg:w="24589243"/><text x="100.1360%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (24,589,243 samples, 0.04%)</title><rect x="99.8860%" y="309" width="0.0359%" height="15" fill="rgb(247,105,23)" fg:x="68333866103" fg:w="24589243"/><text x="100.1360%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (24,589,243 samples, 0.04%)</title><rect x="99.8860%" y="293" width="0.0359%" height="15" fill="rgb(223,179,41)" fg:x="68333866103" fg:w="24589243"/><text x="100.1360%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (24,589,243 samples, 0.04%)</title><rect x="99.8860%" y="277" width="0.0359%" height="15" fill="rgb(218,9,34)" fg:x="68333866103" fg:w="24589243"/><text x="100.1360%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8,234,174 samples, 0.01%)</title><rect x="99.9099%" y="261" width="0.0120%" height="15" fill="rgb(222,106,8)" fg:x="68350221172" fg:w="8234174"/><text x="100.1599%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (8,234,174 samples, 0.01%)</title><rect x="99.9099%" y="245" width="0.0120%" height="15" fill="rgb(211,220,0)" fg:x="68350221172" fg:w="8234174"/><text x="100.1599%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (8,234,174 samples, 0.01%)</title><rect x="99.9099%" y="229" width="0.0120%" height="15" fill="rgb(229,52,16)" fg:x="68350221172" fg:w="8234174"/><text x="100.1599%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8,234,174 samples, 0.01%)</title><rect x="99.9099%" y="213" width="0.0120%" height="15" fill="rgb(212,155,18)" fg:x="68350221172" fg:w="8234174"/><text x="100.1599%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (41,155,063 samples, 0.06%)</title><rect x="99.9219%" y="373" width="0.0602%" height="15" fill="rgb(242,21,14)" fg:x="68358455346" fg:w="41155063"/><text x="100.1719%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (41,155,063 samples, 0.06%)</title><rect x="99.9219%" y="357" width="0.0602%" height="15" fill="rgb(222,19,48)" fg:x="68358455346" fg:w="41155063"/><text x="100.1719%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (41,155,063 samples, 0.06%)</title><rect x="99.9219%" y="341" width="0.0602%" height="15" fill="rgb(232,45,27)" fg:x="68358455346" fg:w="41155063"/><text x="100.1719%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41,155,063 samples, 0.06%)</title><rect x="99.9219%" y="325" width="0.0602%" height="15" fill="rgb(249,103,42)" fg:x="68358455346" fg:w="41155063"/><text x="100.1719%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (41,155,063 samples, 0.06%)</title><rect x="99.9219%" y="309" width="0.0602%" height="15" fill="rgb(246,81,33)" fg:x="68358455346" fg:w="41155063"/><text x="100.1719%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (41,155,063 samples, 0.06%)</title><rect x="99.9219%" y="293" width="0.0602%" height="15" fill="rgb(252,33,42)" fg:x="68358455346" fg:w="41155063"/><text x="100.1719%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (41,155,063 samples, 0.06%)</title><rect x="99.9219%" y="277" width="0.0602%" height="15" fill="rgb(209,212,41)" fg:x="68358455346" fg:w="41155063"/><text x="100.1719%" y="287.50"></text></g><g><title>core::ptr::write (12,395,441 samples, 0.02%)</title><rect x="99.9640%" y="261" width="0.0181%" height="15" fill="rgb(207,154,6)" fg:x="68387214968" fg:w="12395441"/><text x="100.2140%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (8,178,920 samples, 0.01%)</title><rect x="99.9821%" y="373" width="0.0120%" height="15" fill="rgb(223,64,47)" fg:x="68399610409" fg:w="8178920"/><text x="100.2321%" y="383.50"></text></g><g><title>all (68,411,863,624 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(211,161,38)" fg:x="0" fg:w="68411863624"/><text x="0.2500%" y="415.50"></text></g><g><title>img (68,411,863,624 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(219,138,40)" fg:x="0" fg:w="68411863624"/><text x="0.2500%" y="399.50">img</text></g></svg></svg>