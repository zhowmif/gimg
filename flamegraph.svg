<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="631282196"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="389" width="1.9159%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="399.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="373" width="1.9159%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="383.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="357" width="1.9159%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="367.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="341" width="1.9159%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="351.50">c..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="325" width="1.9159%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="335.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="309" width="1.9159%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="319.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="293" width="1.9159%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="303.50">&lt;..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="277" width="1.9159%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="287.50">c..</text></g><g><title>core::ops::function::FnMut::call_mut (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="261" width="1.9159%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="271.50">c..</text></g><g><title>core::clone::Clone::clone (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="245" width="1.9159%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="255.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="229" width="1.9159%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="239.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="213" width="1.9159%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="223.50">a..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="197" width="1.9159%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="207.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="181" width="1.9159%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="165" width="1.9159%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="175.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="149" width="1.9159%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="133" width="1.9159%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="143.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="117" width="1.9159%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="127.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="101" width="1.9159%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="111.50">a..</text></g><g><title>alloc::alloc::alloc (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="85" width="1.9159%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="95.50">a..</text></g><g><title>malloc (12,094,759 samples, 1.92%)</title><rect x="0.0000%" y="69" width="1.9159%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="12094759"/><text x="0.2500%" y="79.50">m..</text></g><g><title>[libc.so.6] (8,038,182 samples, 1.27%)</title><rect x="0.6426%" y="53" width="1.2733%" height="15" fill="rgb(235,183,28)" fg:x="4056577" fg:w="8038182"/><text x="0.8926%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="341" width="0.6467%" height="15" fill="rgb(221,5,38)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="325" width="0.6467%" height="15" fill="rgb(247,18,42)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="309" width="0.6467%" height="15" fill="rgb(241,131,45)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="293" width="0.6467%" height="15" fill="rgb(249,31,29)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="277" width="0.6467%" height="15" fill="rgb(225,111,53)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="261" width="0.6467%" height="15" fill="rgb(238,160,17)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="271.50"></text></g><g><title>alloc::alloc::alloc (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="245" width="0.6467%" height="15" fill="rgb(214,148,48)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="255.50"></text></g><g><title>malloc (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="229" width="0.6467%" height="15" fill="rgb(232,36,49)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="239.50"></text></g><g><title>[libc.so.6] (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="213" width="0.6467%" height="15" fill="rgb(209,103,24)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="223.50"></text></g><g><title>[libc.so.6] (4,082,370 samples, 0.65%)</title><rect x="3.1941%" y="197" width="0.6467%" height="15" fill="rgb(229,88,8)" fg:x="20164025" fg:w="4082370"/><text x="3.4441%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,092,097 samples, 0.65%)</title><rect x="3.8408%" y="277" width="0.6482%" height="15" fill="rgb(213,181,19)" fg:x="24246395" fg:w="4092097"/><text x="4.0908%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,092,097 samples, 0.65%)</title><rect x="3.8408%" y="261" width="0.6482%" height="15" fill="rgb(254,191,54)" fg:x="24246395" fg:w="4092097"/><text x="4.0908%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,092,097 samples, 0.65%)</title><rect x="3.8408%" y="245" width="0.6482%" height="15" fill="rgb(241,83,37)" fg:x="24246395" fg:w="4092097"/><text x="4.0908%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,092,097 samples, 0.65%)</title><rect x="3.8408%" y="229" width="0.6482%" height="15" fill="rgb(233,36,39)" fg:x="24246395" fg:w="4092097"/><text x="4.0908%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,092,097 samples, 0.65%)</title><rect x="3.8408%" y="213" width="0.6482%" height="15" fill="rgb(226,3,54)" fg:x="24246395" fg:w="4092097"/><text x="4.0908%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,092,097 samples, 0.65%)</title><rect x="3.8408%" y="197" width="0.6482%" height="15" fill="rgb(245,192,40)" fg:x="24246395" fg:w="4092097"/><text x="4.0908%" y="207.50"></text></g><g><title>alloc::alloc::alloc (4,092,097 samples, 0.65%)</title><rect x="3.8408%" y="181" width="0.6482%" height="15" fill="rgb(238,167,29)" fg:x="24246395" fg:w="4092097"/><text x="4.0908%" y="191.50"></text></g><g><title>malloc (4,092,097 samples, 0.65%)</title><rect x="3.8408%" y="165" width="0.6482%" height="15" fill="rgb(232,182,51)" fg:x="24246395" fg:w="4092097"/><text x="4.0908%" y="175.50"></text></g><g><title>[libc.so.6] (4,092,097 samples, 0.65%)</title><rect x="3.8408%" y="149" width="0.6482%" height="15" fill="rgb(231,60,39)" fg:x="24246395" fg:w="4092097"/><text x="4.0908%" y="159.50"></text></g><g><title>core::clone::Clone::clone (8,141,743 samples, 1.29%)</title><rect x="3.8408%" y="341" width="1.2897%" height="15" fill="rgb(208,69,12)" fg:x="24246395" fg:w="8141743"/><text x="4.0908%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8,141,743 samples, 1.29%)</title><rect x="3.8408%" y="325" width="1.2897%" height="15" fill="rgb(235,93,37)" fg:x="24246395" fg:w="8141743"/><text x="4.0908%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,141,743 samples, 1.29%)</title><rect x="3.8408%" y="309" width="1.2897%" height="15" fill="rgb(213,116,39)" fg:x="24246395" fg:w="8141743"/><text x="4.0908%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (8,141,743 samples, 1.29%)</title><rect x="3.8408%" y="293" width="1.2897%" height="15" fill="rgb(222,207,29)" fg:x="24246395" fg:w="8141743"/><text x="4.0908%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,049,646 samples, 0.64%)</title><rect x="4.4890%" y="277" width="0.6415%" height="15" fill="rgb(206,96,30)" fg:x="28338492" fg:w="4049646"/><text x="4.7390%" y="287.50"></text></g><g><title>core::ptr::copy_nonoverlapping (4,049,646 samples, 0.64%)</title><rect x="4.4890%" y="261" width="0.6415%" height="15" fill="rgb(218,138,4)" fg:x="28338492" fg:w="4049646"/><text x="4.7390%" y="271.50"></text></g><g><title>[libc.so.6] (4,049,646 samples, 0.64%)</title><rect x="4.4890%" y="245" width="0.6415%" height="15" fill="rgb(250,191,14)" fg:x="28338492" fg:w="4049646"/><text x="4.7390%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (24,343,441 samples, 3.86%)</title><rect x="1.9159%" y="389" width="3.8562%" height="15" fill="rgb(239,60,40)" fg:x="12094759" fg:w="24343441"/><text x="2.1659%" y="399.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20,299,913 samples, 3.22%)</title><rect x="2.5564%" y="373" width="3.2157%" height="15" fill="rgb(206,27,48)" fg:x="16138287" fg:w="20299913"/><text x="2.8064%" y="383.50">all..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (20,299,913 samples, 3.22%)</title><rect x="2.5564%" y="357" width="3.2157%" height="15" fill="rgb(225,35,8)" fg:x="16138287" fg:w="20299913"/><text x="2.8064%" y="367.50">&lt;T ..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (4,050,062 samples, 0.64%)</title><rect x="5.1305%" y="341" width="0.6416%" height="15" fill="rgb(250,213,24)" fg:x="32388138" fg:w="4050062"/><text x="5.3805%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="309" width="0.6389%" height="15" fill="rgb(247,123,22)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="293" width="0.6389%" height="15" fill="rgb(231,138,38)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="277" width="0.6389%" height="15" fill="rgb(231,145,46)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="261" width="0.6389%" height="15" fill="rgb(251,118,11)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="245" width="0.6389%" height="15" fill="rgb(217,147,25)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="229" width="0.6389%" height="15" fill="rgb(247,81,37)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="213" width="0.6389%" height="15" fill="rgb(209,12,38)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="197" width="0.6389%" height="15" fill="rgb(227,1,9)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="181" width="0.6389%" height="15" fill="rgb(248,47,43)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="165" width="0.6389%" height="15" fill="rgb(221,10,30)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (4,033,130 samples, 0.64%)</title><rect x="5.7721%" y="149" width="0.6389%" height="15" fill="rgb(210,229,1)" fg:x="36438200" fg:w="4033130"/><text x="6.0221%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="309" width="0.6351%" height="15" fill="rgb(222,148,37)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="293" width="0.6351%" height="15" fill="rgb(234,67,33)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="277" width="0.6351%" height="15" fill="rgb(247,98,35)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="287.50"></text></g><g><title>img::png::deflate::prefix_table::get_cl_codes_for_code_lengths::_{{closure}} (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="261" width="0.6351%" height="15" fill="rgb(247,138,52)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="245" width="0.6351%" height="15" fill="rgb(213,79,30)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="229" width="0.6351%" height="15" fill="rgb(246,177,23)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="213" width="0.6351%" height="15" fill="rgb(230,62,27)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="197" width="0.6351%" height="15" fill="rgb(216,154,8)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="181" width="0.6351%" height="15" fill="rgb(244,35,45)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="165" width="0.6351%" height="15" fill="rgb(251,115,12)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (4,009,168 samples, 0.64%)</title><rect x="6.4110%" y="149" width="0.6351%" height="15" fill="rgb(240,54,50)" fg:x="40471330" fg:w="4009168"/><text x="6.6610%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20,142,556 samples, 3.19%)</title><rect x="5.7721%" y="357" width="3.1907%" height="15" fill="rgb(233,84,52)" fg:x="36438200" fg:w="20142556"/><text x="6.0221%" y="367.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (20,142,556 samples, 3.19%)</title><rect x="5.7721%" y="341" width="3.1907%" height="15" fill="rgb(207,117,47)" fg:x="36438200" fg:w="20142556"/><text x="6.0221%" y="351.50">all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (20,142,556 samples, 3.19%)</title><rect x="5.7721%" y="325" width="3.1907%" height="15" fill="rgb(249,43,39)" fg:x="36438200" fg:w="20142556"/><text x="6.0221%" y="335.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (12,100,258 samples, 1.92%)</title><rect x="7.0461%" y="309" width="1.9168%" height="15" fill="rgb(209,38,44)" fg:x="44480498" fg:w="12100258"/><text x="7.2961%" y="319.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (12,100,258 samples, 1.92%)</title><rect x="7.0461%" y="293" width="1.9168%" height="15" fill="rgb(236,212,23)" fg:x="44480498" fg:w="12100258"/><text x="7.2961%" y="303.50">c..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,100,258 samples, 1.92%)</title><rect x="7.0461%" y="277" width="1.9168%" height="15" fill="rgb(242,79,21)" fg:x="44480498" fg:w="12100258"/><text x="7.2961%" y="287.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (12,100,258 samples, 1.92%)</title><rect x="7.0461%" y="261" width="1.9168%" height="15" fill="rgb(211,96,35)" fg:x="44480498" fg:w="12100258"/><text x="7.2961%" y="271.50">c..</text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,100,258 samples, 1.92%)</title><rect x="7.0461%" y="245" width="1.9168%" height="15" fill="rgb(253,215,40)" fg:x="44480498" fg:w="12100258"/><text x="7.2961%" y="255.50">&lt;..</text></g><g><title>core::ptr::copy (12,100,258 samples, 1.92%)</title><rect x="7.0461%" y="229" width="1.9168%" height="15" fill="rgb(211,81,21)" fg:x="44480498" fg:w="12100258"/><text x="7.2961%" y="239.50">c..</text></g><g><title>[libc.so.6] (12,100,258 samples, 1.92%)</title><rect x="7.0461%" y="213" width="1.9168%" height="15" fill="rgb(208,190,38)" fg:x="44480498" fg:w="12100258"/><text x="7.2961%" y="223.50">[..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4,080,129 samples, 0.65%)</title><rect x="8.9628%" y="357" width="0.6463%" height="15" fill="rgb(235,213,38)" fg:x="56580756" fg:w="4080129"/><text x="9.2128%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4,080,129 samples, 0.65%)</title><rect x="8.9628%" y="341" width="0.6463%" height="15" fill="rgb(237,122,38)" fg:x="56580756" fg:w="4080129"/><text x="9.2128%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3,991,360 samples, 0.63%)</title><rect x="9.6092%" y="357" width="0.6323%" height="15" fill="rgb(244,218,35)" fg:x="60660885" fg:w="3991360"/><text x="9.8592%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35,614,304 samples, 5.64%)</title><rect x="5.7721%" y="389" width="5.6416%" height="15" fill="rgb(240,68,47)" fg:x="36438200" fg:w="35614304"/><text x="6.0221%" y="399.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (35,614,304 samples, 5.64%)</title><rect x="5.7721%" y="373" width="5.6416%" height="15" fill="rgb(210,16,53)" fg:x="36438200" fg:w="35614304"/><text x="6.0221%" y="383.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7,400,259 samples, 1.17%)</title><rect x="10.2414%" y="357" width="1.1723%" height="15" fill="rgb(235,124,12)" fg:x="64652245" fg:w="7400259"/><text x="10.4914%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,400,259 samples, 1.17%)</title><rect x="10.2414%" y="341" width="1.1723%" height="15" fill="rgb(224,169,11)" fg:x="64652245" fg:w="7400259"/><text x="10.4914%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,400,259 samples, 1.17%)</title><rect x="10.2414%" y="325" width="1.1723%" height="15" fill="rgb(250,166,2)" fg:x="64652245" fg:w="7400259"/><text x="10.4914%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,400,259 samples, 1.17%)</title><rect x="10.2414%" y="309" width="1.1723%" height="15" fill="rgb(242,216,29)" fg:x="64652245" fg:w="7400259"/><text x="10.4914%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,400,259 samples, 1.17%)</title><rect x="10.2414%" y="293" width="1.1723%" height="15" fill="rgb(230,116,27)" fg:x="64652245" fg:w="7400259"/><text x="10.4914%" y="303.50"></text></g><g><title>core::cmp::PartialEq::ne (6,719,088 samples, 1.06%)</title><rect x="11.4137%" y="373" width="1.0644%" height="15" fill="rgb(228,99,48)" fg:x="72052504" fg:w="6719088"/><text x="11.6637%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6,719,088 samples, 1.06%)</title><rect x="11.4137%" y="357" width="1.0644%" height="15" fill="rgb(253,11,6)" fg:x="72052504" fg:w="6719088"/><text x="11.6637%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (14,168,528 samples, 2.24%)</title><rect x="12.4780%" y="357" width="2.2444%" height="15" fill="rgb(247,143,39)" fg:x="78771592" fg:w="14168528"/><text x="12.7280%" y="367.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (3,375,132 samples, 0.53%)</title><rect x="14.1878%" y="341" width="0.5346%" height="15" fill="rgb(236,97,10)" fg:x="89564988" fg:w="3375132"/><text x="14.4378%" y="351.50"></text></g><g><title>core::cmp::min_by (3,375,132 samples, 0.53%)</title><rect x="14.1878%" y="325" width="0.5346%" height="15" fill="rgb(233,208,19)" fg:x="89564988" fg:w="3375132"/><text x="14.4378%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3,351,874 samples, 0.53%)</title><rect x="16.3185%" y="341" width="0.5310%" height="15" fill="rgb(216,164,2)" fg:x="103016089" fg:w="3351874"/><text x="16.5685%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7,001,137 samples, 1.11%)</title><rect x="16.8495%" y="341" width="1.1090%" height="15" fill="rgb(220,129,5)" fg:x="106367963" fg:w="7001137"/><text x="17.0995%" y="351.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}}::_{{closure}} (7,001,137 samples, 1.11%)</title><rect x="16.8495%" y="325" width="1.1090%" height="15" fill="rgb(242,17,10)" fg:x="106367963" fg:w="7001137"/><text x="17.0995%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7,001,137 samples, 1.11%)</title><rect x="16.8495%" y="309" width="1.1090%" height="15" fill="rgb(242,107,0)" fg:x="106367963" fg:w="7001137"/><text x="17.0995%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7,001,137 samples, 1.11%)</title><rect x="16.8495%" y="293" width="1.1090%" height="15" fill="rgb(251,28,31)" fg:x="106367963" fg:w="7001137"/><text x="17.0995%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7,001,137 samples, 1.11%)</title><rect x="16.8495%" y="277" width="1.1090%" height="15" fill="rgb(233,223,10)" fg:x="106367963" fg:w="7001137"/><text x="17.0995%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,631,802 samples, 9.76%)</title><rect x="11.4137%" y="389" width="9.7630%" height="15" fill="rgb(215,21,27)" fg:x="72052504" fg:w="61631802"/><text x="11.6637%" y="399.50">&lt;alloc::vec::i..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (54,912,714 samples, 8.70%)</title><rect x="12.4780%" y="373" width="8.6986%" height="15" fill="rgb(232,23,21)" fg:x="78771592" fg:w="54912714"/><text x="12.7280%" y="383.50">core::iter::..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (40,744,186 samples, 6.45%)</title><rect x="14.7224%" y="357" width="6.4542%" height="15" fill="rgb(244,5,23)" fg:x="92940120" fg:w="40744186"/><text x="14.9724%" y="367.50">img::png..</text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (20,315,206 samples, 3.22%)</title><rect x="17.9585%" y="341" width="3.2181%" height="15" fill="rgb(226,81,46)" fg:x="113369100" fg:w="20315206"/><text x="18.2085%" y="351.50">img..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (6,753,585 samples, 1.07%)</title><rect x="20.1068%" y="325" width="1.0698%" height="15" fill="rgb(247,70,30)" fg:x="126930721" fg:w="6753585"/><text x="20.3568%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="389" width="0.6401%" height="15" fill="rgb(212,68,19)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="373" width="0.6401%" height="15" fill="rgb(240,187,13)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="357" width="0.6401%" height="15" fill="rgb(223,113,26)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_try_fold (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="341" width="0.6401%" height="15" fill="rgb(206,192,2)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="351.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="325" width="0.6401%" height="15" fill="rgb(241,108,4)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="309" width="0.6401%" height="15" fill="rgb(247,173,49)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="319.50"></text></g><g><title>img::png::deflate::prefix_table::generate_bitstream_from_range::_{{closure}} (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="293" width="0.6401%" height="15" fill="rgb(224,114,35)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="303.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::from_u32_ltr (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="277" width="0.6401%" height="15" fill="rgb(245,159,27)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="287.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::from_u32_ltr_with_offset (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="261" width="0.6401%" height="15" fill="rgb(245,172,44)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="271.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::flush_buffer (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="245" width="0.6401%" height="15" fill="rgb(236,23,11)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="229" width="0.6401%" height="15" fill="rgb(205,117,38)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="213" width="0.6401%" height="15" fill="rgb(237,72,25)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="197" width="0.6401%" height="15" fill="rgb(244,70,9)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="181" width="0.6401%" height="15" fill="rgb(217,125,39)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="165" width="0.6401%" height="15" fill="rgb(235,36,10)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="175.50"></text></g><g><title>malloc (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="149" width="0.6401%" height="15" fill="rgb(251,123,47)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="159.50"></text></g><g><title>[libc.so.6] (4,040,711 samples, 0.64%)</title><rect x="21.1766%" y="133" width="0.6401%" height="15" fill="rgb(221,13,13)" fg:x="133684306" fg:w="4040711"/><text x="21.4266%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,156,907 samples, 1.29%)</title><rect x="21.8167%" y="389" width="1.2921%" height="15" fill="rgb(238,131,9)" fg:x="137725017" fg:w="8156907"/><text x="22.0667%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,156,907 samples, 1.29%)</title><rect x="21.8167%" y="373" width="1.2921%" height="15" fill="rgb(211,50,8)" fg:x="137725017" fg:w="8156907"/><text x="22.0667%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,156,907 samples, 1.29%)</title><rect x="21.8167%" y="357" width="1.2921%" height="15" fill="rgb(245,182,24)" fg:x="137725017" fg:w="8156907"/><text x="22.0667%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (4,078,016 samples, 0.65%)</title><rect x="22.4628%" y="341" width="0.6460%" height="15" fill="rgb(242,14,37)" fg:x="141803908" fg:w="4078016"/><text x="22.7128%" y="351.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4,069,741 samples, 0.64%)</title><rect x="23.7369%" y="309" width="0.6447%" height="15" fill="rgb(246,228,12)" fg:x="149847132" fg:w="4069741"/><text x="23.9869%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4,069,741 samples, 0.64%)</title><rect x="23.7369%" y="293" width="0.6447%" height="15" fill="rgb(213,55,15)" fg:x="149847132" fg:w="4069741"/><text x="23.9869%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (4,069,741 samples, 0.64%)</title><rect x="23.7369%" y="277" width="0.6447%" height="15" fill="rgb(209,9,3)" fg:x="149847132" fg:w="4069741"/><text x="23.9869%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from_unsigned (4,069,741 samples, 0.64%)</title><rect x="23.7369%" y="261" width="0.6447%" height="15" fill="rgb(230,59,30)" fg:x="149847132" fg:w="4069741"/><text x="23.9869%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from_unsigned (4,069,741 samples, 0.64%)</title><rect x="23.7369%" y="245" width="0.6447%" height="15" fill="rgb(209,121,21)" fg:x="149847132" fg:w="4069741"/><text x="23.9869%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,078,177 samples, 0.65%)</title><rect x="24.3816%" y="293" width="0.6460%" height="15" fill="rgb(220,109,13)" fg:x="153916873" fg:w="4078177"/><text x="24.6316%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,078,177 samples, 0.65%)</title><rect x="24.3816%" y="277" width="0.6460%" height="15" fill="rgb(232,18,1)" fg:x="153916873" fg:w="4078177"/><text x="24.6316%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;u16,alloc::vec::Vec&lt;u16&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;,alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (4,078,177 samples, 0.65%)</title><rect x="24.3816%" y="261" width="0.6460%" height="15" fill="rgb(215,41,42)" fg:x="153916873" fg:w="4078177"/><text x="24.6316%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;,alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt;&gt;::{{closure}}&gt; (4,078,177 samples, 0.65%)</title><rect x="24.3816%" y="245" width="0.6460%" height="15" fill="rgb(224,123,36)" fg:x="153916873" fg:w="4078177"/><text x="24.6316%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (4,078,177 samples, 0.65%)</title><rect x="24.3816%" y="229" width="0.6460%" height="15" fill="rgb(240,125,3)" fg:x="153916873" fg:w="4078177"/><text x="24.6316%" y="239.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (4,078,177 samples, 0.65%)</title><rect x="24.3816%" y="213" width="0.6460%" height="15" fill="rgb(205,98,50)" fg:x="153916873" fg:w="4078177"/><text x="24.6316%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (12,234,243 samples, 1.94%)</title><rect x="23.7369%" y="341" width="1.9380%" height="15" fill="rgb(205,185,37)" fg:x="149847132" fg:w="12234243"/><text x="23.9869%" y="351.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (12,234,243 samples, 1.94%)</title><rect x="23.7369%" y="325" width="1.9380%" height="15" fill="rgb(238,207,15)" fg:x="149847132" fg:w="12234243"/><text x="23.9869%" y="335.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,164,502 samples, 1.29%)</title><rect x="24.3816%" y="309" width="1.2933%" height="15" fill="rgb(213,199,42)" fg:x="153916873" fg:w="8164502"/><text x="24.6316%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4,086,325 samples, 0.65%)</title><rect x="25.0276%" y="293" width="0.6473%" height="15" fill="rgb(235,201,11)" fg:x="157995050" fg:w="4086325"/><text x="25.2776%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (4,086,325 samples, 0.65%)</title><rect x="25.0276%" y="277" width="0.6473%" height="15" fill="rgb(207,46,11)" fg:x="157995050" fg:w="4086325"/><text x="25.2776%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,086,325 samples, 0.65%)</title><rect x="25.0276%" y="261" width="0.6473%" height="15" fill="rgb(241,35,35)" fg:x="157995050" fg:w="4086325"/><text x="25.2776%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (4,086,325 samples, 0.65%)</title><rect x="25.0276%" y="245" width="0.6473%" height="15" fill="rgb(243,32,47)" fg:x="157995050" fg:w="4086325"/><text x="25.2776%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,086,325 samples, 0.65%)</title><rect x="25.0276%" y="229" width="0.6473%" height="15" fill="rgb(247,202,23)" fg:x="157995050" fg:w="4086325"/><text x="25.2776%" y="239.50"></text></g><g><title>core::ptr::copy (4,086,325 samples, 0.65%)</title><rect x="25.0276%" y="213" width="0.6473%" height="15" fill="rgb(219,102,11)" fg:x="157995050" fg:w="4086325"/><text x="25.2776%" y="223.50"></text></g><g><title>[libc.so.6] (4,086,325 samples, 0.65%)</title><rect x="25.0276%" y="197" width="0.6473%" height="15" fill="rgb(243,110,44)" fg:x="157995050" fg:w="4086325"/><text x="25.2776%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,639,643 samples, 0.58%)</title><rect x="25.6749%" y="341" width="0.5765%" height="15" fill="rgb(222,74,54)" fg:x="162081375" fg:w="3639643"/><text x="25.9249%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,639,643 samples, 0.58%)</title><rect x="25.6749%" y="325" width="0.5765%" height="15" fill="rgb(216,99,12)" fg:x="162081375" fg:w="3639643"/><text x="25.9249%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3,639,643 samples, 0.58%)</title><rect x="25.6749%" y="309" width="0.5765%" height="15" fill="rgb(226,22,26)" fg:x="162081375" fg:w="3639643"/><text x="25.9249%" y="319.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,639,643 samples, 0.58%)</title><rect x="25.6749%" y="293" width="0.5765%" height="15" fill="rgb(217,163,10)" fg:x="162081375" fg:w="3639643"/><text x="25.9249%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,639,643 samples, 0.58%)</title><rect x="25.6749%" y="277" width="0.5765%" height="15" fill="rgb(213,25,53)" fg:x="162081375" fg:w="3639643"/><text x="25.9249%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,639,643 samples, 0.58%)</title><rect x="25.6749%" y="261" width="0.5765%" height="15" fill="rgb(252,105,26)" fg:x="162081375" fg:w="3639643"/><text x="25.9249%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (3,639,643 samples, 0.58%)</title><rect x="25.6749%" y="245" width="0.5765%" height="15" fill="rgb(220,39,43)" fg:x="162081375" fg:w="3639643"/><text x="25.9249%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,639,643 samples, 0.58%)</title><rect x="25.6749%" y="229" width="0.5765%" height="15" fill="rgb(229,68,48)" fg:x="162081375" fg:w="3639643"/><text x="25.9249%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (3,639,643 samples, 0.58%)</title><rect x="25.6749%" y="213" width="0.5765%" height="15" fill="rgb(252,8,32)" fg:x="162081375" fg:w="3639643"/><text x="25.9249%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31,974,177 samples, 5.06%)</title><rect x="23.1088%" y="373" width="5.0650%" height="15" fill="rgb(223,20,43)" fg:x="145881924" fg:w="31974177"/><text x="23.3588%" y="383.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (31,974,177 samples, 5.06%)</title><rect x="23.1088%" y="357" width="5.0650%" height="15" fill="rgb(229,81,49)" fg:x="145881924" fg:w="31974177"/><text x="23.3588%" y="367.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12,135,083 samples, 1.92%)</title><rect x="26.2515%" y="341" width="1.9223%" height="15" fill="rgb(236,28,36)" fg:x="165721018" fg:w="12135083"/><text x="26.5015%" y="351.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,135,083 samples, 1.92%)</title><rect x="26.2515%" y="325" width="1.9223%" height="15" fill="rgb(249,185,26)" fg:x="165721018" fg:w="12135083"/><text x="26.5015%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,135,083 samples, 1.92%)</title><rect x="26.2515%" y="309" width="1.9223%" height="15" fill="rgb(249,174,33)" fg:x="165721018" fg:w="12135083"/><text x="26.5015%" y="319.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,135,083 samples, 1.92%)</title><rect x="26.2515%" y="293" width="1.9223%" height="15" fill="rgb(233,201,37)" fg:x="165721018" fg:w="12135083"/><text x="26.5015%" y="303.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,135,083 samples, 1.92%)</title><rect x="26.2515%" y="277" width="1.9223%" height="15" fill="rgb(221,78,26)" fg:x="165721018" fg:w="12135083"/><text x="26.5015%" y="287.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,135,083 samples, 1.92%)</title><rect x="26.2515%" y="261" width="1.9223%" height="15" fill="rgb(250,127,30)" fg:x="165721018" fg:w="12135083"/><text x="26.5015%" y="271.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (12,135,083 samples, 1.92%)</title><rect x="26.2515%" y="245" width="1.9223%" height="15" fill="rgb(230,49,44)" fg:x="165721018" fg:w="12135083"/><text x="26.5015%" y="255.50">a..</text></g><g><title>alloc::alloc::alloc (12,135,083 samples, 1.92%)</title><rect x="26.2515%" y="229" width="1.9223%" height="15" fill="rgb(229,67,23)" fg:x="165721018" fg:w="12135083"/><text x="26.5015%" y="239.50">a..</text></g><g><title>malloc (12,135,083 samples, 1.92%)</title><rect x="26.2515%" y="213" width="1.9223%" height="15" fill="rgb(249,83,47)" fg:x="165721018" fg:w="12135083"/><text x="26.5015%" y="223.50">m..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="373" width="1.9150%" height="15" fill="rgb(215,43,3)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="383.50">&lt;..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="357" width="1.9150%" height="15" fill="rgb(238,154,13)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="367.50">c..</text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths::_{{closure}} (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="341" width="1.9150%" height="15" fill="rgb(219,56,2)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="351.50">i..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="325" width="1.9150%" height="15" fill="rgb(233,0,4)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="335.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="309" width="1.9150%" height="15" fill="rgb(235,30,7)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="319.50">c..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="293" width="1.9150%" height="15" fill="rgb(250,79,13)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="303.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="277" width="1.9150%" height="15" fill="rgb(211,146,34)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="287.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="261" width="1.9150%" height="15" fill="rgb(228,22,38)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="271.50">&lt;..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="245" width="1.9150%" height="15" fill="rgb(235,168,5)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="255.50">c..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (12,088,923 samples, 1.91%)</title><rect x="28.1738%" y="229" width="1.9150%" height="15" fill="rgb(221,155,16)" fg:x="177856101" fg:w="12088923"/><text x="28.4238%" y="239.50">&lt;..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,073,561 samples, 0.65%)</title><rect x="30.0888%" y="373" width="0.6453%" height="15" fill="rgb(215,215,53)" fg:x="189945024" fg:w="4073561"/><text x="30.3388%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,073,561 samples, 0.65%)</title><rect x="30.0888%" y="357" width="0.6453%" height="15" fill="rgb(223,4,10)" fg:x="189945024" fg:w="4073561"/><text x="30.3388%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,073,561 samples, 0.65%)</title><rect x="30.0888%" y="341" width="0.6453%" height="15" fill="rgb(234,103,6)" fg:x="189945024" fg:w="4073561"/><text x="30.3388%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,156,982 samples, 1.29%)</title><rect x="30.7340%" y="357" width="1.2921%" height="15" fill="rgb(227,97,0)" fg:x="194018585" fg:w="8156982"/><text x="30.9840%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,156,982 samples, 1.29%)</title><rect x="30.7340%" y="341" width="1.2921%" height="15" fill="rgb(234,150,53)" fg:x="194018585" fg:w="8156982"/><text x="30.9840%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,156,982 samples, 1.29%)</title><rect x="30.7340%" y="325" width="1.2921%" height="15" fill="rgb(228,201,54)" fg:x="194018585" fg:w="8156982"/><text x="30.9840%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (4,081,840 samples, 0.65%)</title><rect x="31.3796%" y="309" width="0.6466%" height="15" fill="rgb(222,22,37)" fg:x="198093727" fg:w="4081840"/><text x="31.6296%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by_key (6,738,770 samples, 1.07%)</title><rect x="32.0262%" y="325" width="1.0675%" height="15" fill="rgb(237,53,32)" fg:x="202175567" fg:w="6738770"/><text x="32.2762%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (6,738,770 samples, 1.07%)</title><rect x="32.0262%" y="309" width="1.0675%" height="15" fill="rgb(233,25,53)" fg:x="202175567" fg:w="6738770"/><text x="32.2762%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (6,738,770 samples, 1.07%)</title><rect x="32.0262%" y="293" width="1.0675%" height="15" fill="rgb(210,40,34)" fg:x="202175567" fg:w="6738770"/><text x="32.2762%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,738,770 samples, 1.07%)</title><rect x="32.0262%" y="277" width="1.0675%" height="15" fill="rgb(241,220,44)" fg:x="202175567" fg:w="6738770"/><text x="32.2762%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,738,770 samples, 1.07%)</title><rect x="32.0262%" y="261" width="1.0675%" height="15" fill="rgb(235,28,35)" fg:x="202175567" fg:w="6738770"/><text x="32.2762%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (6,738,770 samples, 1.07%)</title><rect x="32.0262%" y="245" width="1.0675%" height="15" fill="rgb(210,56,17)" fg:x="202175567" fg:w="6738770"/><text x="32.2762%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6,738,770 samples, 1.07%)</title><rect x="32.0262%" y="229" width="1.0675%" height="15" fill="rgb(224,130,29)" fg:x="202175567" fg:w="6738770"/><text x="32.2762%" y="239.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (6,738,770 samples, 1.07%)</title><rect x="32.0262%" y="213" width="1.0675%" height="15" fill="rgb(235,212,8)" fg:x="202175567" fg:w="6738770"/><text x="32.2762%" y="223.50"></text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (6,738,770 samples, 1.07%)</title><rect x="32.0262%" y="197" width="1.0675%" height="15" fill="rgb(223,33,50)" fg:x="202175567" fg:w="6738770"/><text x="32.2762%" y="207.50"></text></g><g><title>[unknown] (18,616,972 samples, 2.95%)</title><rect x="30.7340%" y="373" width="2.9491%" height="15" fill="rgb(219,149,13)" fg:x="194018585" fg:w="18616972"/><text x="30.9840%" y="383.50">[u..</text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (10,459,990 samples, 1.66%)</title><rect x="32.0262%" y="357" width="1.6569%" height="15" fill="rgb(250,156,29)" fg:x="202175567" fg:w="10459990"/><text x="32.2762%" y="367.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (10,459,990 samples, 1.66%)</title><rect x="32.0262%" y="341" width="1.6569%" height="15" fill="rgb(216,193,19)" fg:x="202175567" fg:w="10459990"/><text x="32.2762%" y="351.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (3,721,220 samples, 0.59%)</title><rect x="33.0937%" y="325" width="0.5895%" height="15" fill="rgb(216,135,14)" fg:x="208914337" fg:w="3721220"/><text x="33.3437%" y="335.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2,970,397 samples, 0.47%)</title><rect x="35.2046%" y="341" width="0.4705%" height="15" fill="rgb(241,47,5)" fg:x="222240425" fg:w="2970397"/><text x="35.4546%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (2,970,397 samples, 0.47%)</title><rect x="35.2046%" y="325" width="0.4705%" height="15" fill="rgb(233,42,35)" fg:x="222240425" fg:w="2970397"/><text x="35.4546%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,970,397 samples, 0.47%)</title><rect x="35.2046%" y="309" width="0.4705%" height="15" fill="rgb(231,13,6)" fg:x="222240425" fg:w="2970397"/><text x="35.4546%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,970,397 samples, 0.47%)</title><rect x="35.2046%" y="293" width="0.4705%" height="15" fill="rgb(207,181,40)" fg:x="222240425" fg:w="2970397"/><text x="35.4546%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,970,397 samples, 0.47%)</title><rect x="35.2046%" y="277" width="0.4705%" height="15" fill="rgb(254,173,49)" fg:x="222240425" fg:w="2970397"/><text x="35.4546%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (15,931,455 samples, 2.52%)</title><rect x="33.6831%" y="373" width="2.5237%" height="15" fill="rgb(221,1,38)" fg:x="212635557" fg:w="15931455"/><text x="33.9331%" y="383.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (15,931,455 samples, 2.52%)</title><rect x="33.6831%" y="357" width="2.5237%" height="15" fill="rgb(206,124,46)" fg:x="212635557" fg:w="15931455"/><text x="33.9331%" y="367.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::swap (3,356,190 samples, 0.53%)</title><rect x="35.6751%" y="341" width="0.5316%" height="15" fill="rgb(249,21,11)" fg:x="225210822" fg:w="3356190"/><text x="35.9251%" y="351.50"></text></g><g><title>core::ptr::swap (3,356,190 samples, 0.53%)</title><rect x="35.6751%" y="325" width="0.5316%" height="15" fill="rgb(222,201,40)" fg:x="225210822" fg:w="3356190"/><text x="35.9251%" y="335.50"></text></g><g><title>core::ptr::copy (3,356,190 samples, 0.53%)</title><rect x="35.6751%" y="309" width="0.5316%" height="15" fill="rgb(235,61,29)" fg:x="225210822" fg:w="3356190"/><text x="35.9251%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="373" width="0.6404%" height="15" fill="rgb(219,207,3)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="357" width="0.6404%" height="15" fill="rgb(222,56,46)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="341" width="0.6404%" height="15" fill="rgb(239,76,54)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="325" width="0.6404%" height="15" fill="rgb(231,124,27)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="309" width="0.6404%" height="15" fill="rgb(249,195,6)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="293" width="0.6404%" height="15" fill="rgb(237,174,47)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="277" width="0.6404%" height="15" fill="rgb(206,201,31)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="261" width="0.6404%" height="15" fill="rgb(231,57,52)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="245" width="0.6404%" height="15" fill="rgb(248,177,22)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="229" width="0.6404%" height="15" fill="rgb(215,211,37)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="213" width="0.6404%" height="15" fill="rgb(241,128,51)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="197" width="0.6404%" height="15" fill="rgb(227,165,31)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="207.50"></text></g><g><title>alloc::alloc::alloc (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="181" width="0.6404%" height="15" fill="rgb(228,167,24)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="191.50"></text></g><g><title>malloc (4,042,540 samples, 0.64%)</title><rect x="36.2068%" y="165" width="0.6404%" height="15" fill="rgb(228,143,12)" fg:x="228567012" fg:w="4042540"/><text x="36.4568%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,050,647 samples, 0.64%)</title><rect x="36.8472%" y="245" width="0.6417%" height="15" fill="rgb(249,149,8)" fg:x="232609552" fg:w="4050647"/><text x="37.0972%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,050,647 samples, 0.64%)</title><rect x="36.8472%" y="229" width="0.6417%" height="15" fill="rgb(243,35,44)" fg:x="232609552" fg:w="4050647"/><text x="37.0972%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,103,995 samples, 1.28%)</title><rect x="36.8472%" y="309" width="1.2837%" height="15" fill="rgb(246,89,9)" fg:x="232609552" fg:w="8103995"/><text x="37.0972%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8,103,995 samples, 1.28%)</title><rect x="36.8472%" y="293" width="1.2837%" height="15" fill="rgb(233,213,13)" fg:x="232609552" fg:w="8103995"/><text x="37.0972%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8,103,995 samples, 1.28%)</title><rect x="36.8472%" y="277" width="1.2837%" height="15" fill="rgb(233,141,41)" fg:x="232609552" fg:w="8103995"/><text x="37.0972%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8,103,995 samples, 1.28%)</title><rect x="36.8472%" y="261" width="1.2837%" height="15" fill="rgb(239,167,4)" fg:x="232609552" fg:w="8103995"/><text x="37.0972%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4,053,348 samples, 0.64%)</title><rect x="37.4888%" y="245" width="0.6421%" height="15" fill="rgb(209,217,16)" fg:x="236660199" fg:w="4053348"/><text x="37.7388%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (44,850,796 samples, 7.10%)</title><rect x="36.8472%" y="373" width="7.1047%" height="15" fill="rgb(219,88,35)" fg:x="232609552" fg:w="44850796"/><text x="37.0972%" y="383.50">alloc::raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (44,850,796 samples, 7.10%)</title><rect x="36.8472%" y="357" width="7.1047%" height="15" fill="rgb(220,193,23)" fg:x="232609552" fg:w="44850796"/><text x="37.0972%" y="367.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::grow_impl (44,850,796 samples, 7.10%)</title><rect x="36.8472%" y="341" width="7.1047%" height="15" fill="rgb(230,90,52)" fg:x="232609552" fg:w="44850796"/><text x="37.0972%" y="351.50">alloc::all..</text></g><g><title>alloc::alloc::realloc (44,850,796 samples, 7.10%)</title><rect x="36.8472%" y="325" width="7.1047%" height="15" fill="rgb(252,106,19)" fg:x="232609552" fg:w="44850796"/><text x="37.0972%" y="335.50">alloc::all..</text></g><g><title>realloc (36,746,801 samples, 5.82%)</title><rect x="38.1309%" y="309" width="5.8210%" height="15" fill="rgb(206,74,20)" fg:x="240713547" fg:w="36746801"/><text x="38.3809%" y="319.50">realloc</text></g><g><title>[libc.so.6] (36,746,801 samples, 5.82%)</title><rect x="38.1309%" y="293" width="5.8210%" height="15" fill="rgb(230,138,44)" fg:x="240713547" fg:w="36746801"/><text x="38.3809%" y="303.50">[libc.s..</text></g><g><title>[libc.so.6] (33,560,314 samples, 5.32%)</title><rect x="38.6357%" y="277" width="5.3162%" height="15" fill="rgb(235,182,43)" fg:x="243900034" fg:w="33560314"/><text x="38.8857%" y="287.50">[libc.s..</text></g><g><title>[libc.so.6] (16,134,158 samples, 2.56%)</title><rect x="41.3961%" y="261" width="2.5558%" height="15" fill="rgb(242,16,51)" fg:x="261326190" fg:w="16134158"/><text x="41.6461%" y="271.50">[l..</text></g><g><title>[libc.so.6] (4,043,641 samples, 0.64%)</title><rect x="43.3113%" y="245" width="0.6405%" height="15" fill="rgb(248,9,4)" fg:x="273416707" fg:w="4043641"/><text x="43.5613%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8,114,002 samples, 1.29%)</title><rect x="44.5929%" y="309" width="1.2853%" height="15" fill="rgb(210,31,22)" fg:x="281507030" fg:w="8114002"/><text x="44.8429%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,114,002 samples, 1.29%)</title><rect x="44.5929%" y="293" width="1.2853%" height="15" fill="rgb(239,54,39)" fg:x="281507030" fg:w="8114002"/><text x="44.8429%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (20,270,597 samples, 3.21%)</title><rect x="43.9519%" y="357" width="3.2110%" height="15" fill="rgb(230,99,41)" fg:x="277460348" fg:w="20270597"/><text x="44.2019%" y="367.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (20,270,597 samples, 3.21%)</title><rect x="43.9519%" y="341" width="3.2110%" height="15" fill="rgb(253,106,12)" fg:x="277460348" fg:w="20270597"/><text x="44.2019%" y="351.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (20,270,597 samples, 3.21%)</title><rect x="43.9519%" y="325" width="3.2110%" height="15" fill="rgb(213,46,41)" fg:x="277460348" fg:w="20270597"/><text x="44.2019%" y="335.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8,109,913 samples, 1.28%)</title><rect x="45.8782%" y="309" width="1.2847%" height="15" fill="rgb(215,133,35)" fg:x="289621032" fg:w="8109913"/><text x="46.1282%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,109,913 samples, 1.28%)</title><rect x="45.8782%" y="293" width="1.2847%" height="15" fill="rgb(213,28,5)" fg:x="289621032" fg:w="8109913"/><text x="46.1282%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (28,345,170 samples, 4.49%)</title><rect x="43.9519%" y="373" width="4.4901%" height="15" fill="rgb(215,77,49)" fg:x="277460348" fg:w="28345170"/><text x="44.2019%" y="383.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8,074,573 samples, 1.28%)</title><rect x="47.1629%" y="357" width="1.2791%" height="15" fill="rgb(248,100,22)" fg:x="297730945" fg:w="8074573"/><text x="47.4129%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (4,047,293 samples, 0.64%)</title><rect x="47.8008%" y="341" width="0.6411%" height="15" fill="rgb(208,67,9)" fg:x="301758225" fg:w="4047293"/><text x="48.0508%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u16 (4,047,293 samples, 0.64%)</title><rect x="47.8008%" y="325" width="0.6411%" height="15" fill="rgb(219,133,21)" fg:x="301758225" fg:w="4047293"/><text x="48.0508%" y="335.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (4,047,293 samples, 0.64%)</title><rect x="47.8008%" y="309" width="0.6411%" height="15" fill="rgb(246,46,29)" fg:x="301758225" fg:w="4047293"/><text x="48.0508%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (4,034,086 samples, 0.64%)</title><rect x="48.4420%" y="373" width="0.6390%" height="15" fill="rgb(246,185,52)" fg:x="305805518" fg:w="4034086"/><text x="48.6920%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4,034,086 samples, 0.64%)</title><rect x="48.4420%" y="357" width="0.6390%" height="15" fill="rgb(252,136,11)" fg:x="305805518" fg:w="4034086"/><text x="48.6920%" y="367.50"></text></g><g><title>core::slice::sort::stable::drift::sort (8,121,815 samples, 1.29%)</title><rect x="49.0810%" y="373" width="1.2866%" height="15" fill="rgb(219,138,53)" fg:x="309839604" fg:w="8121815"/><text x="49.3310%" y="383.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (4,047,289 samples, 0.64%)</title><rect x="49.7264%" y="357" width="0.6411%" height="15" fill="rgb(211,51,23)" fg:x="313914130" fg:w="4047289"/><text x="49.9764%" y="367.50"></text></g><g><title>core::slice::sort::stable::merge::merge (4,047,289 samples, 0.64%)</title><rect x="49.7264%" y="341" width="0.6411%" height="15" fill="rgb(247,221,28)" fg:x="313914130" fg:w="4047289"/><text x="49.9764%" y="351.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_down (4,047,289 samples, 0.64%)</title><rect x="49.7264%" y="325" width="0.6411%" height="15" fill="rgb(251,222,45)" fg:x="313914130" fg:w="4047289"/><text x="49.9764%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (4,047,289 samples, 0.64%)</title><rect x="49.7264%" y="309" width="0.6411%" height="15" fill="rgb(217,162,53)" fg:x="313914130" fg:w="4047289"/><text x="49.9764%" y="319.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (4,089,558 samples, 0.65%)</title><rect x="50.3676%" y="373" width="0.6478%" height="15" fill="rgb(229,93,14)" fg:x="317961419" fg:w="4089558"/><text x="50.6176%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (501,504 samples, 0.08%)</title><rect x="51.0154%" y="373" width="0.0794%" height="15" fill="rgb(209,67,49)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (501,504 samples, 0.08%)</title><rect x="51.0154%" y="357" width="0.0794%" height="15" fill="rgb(213,87,29)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (501,504 samples, 0.08%)</title><rect x="51.0154%" y="341" width="0.0794%" height="15" fill="rgb(205,151,52)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (501,504 samples, 0.08%)</title><rect x="51.0154%" y="325" width="0.0794%" height="15" fill="rgb(253,215,39)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (501,504 samples, 0.08%)</title><rect x="51.0154%" y="309" width="0.0794%" height="15" fill="rgb(221,220,41)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (501,504 samples, 0.08%)</title><rect x="51.0154%" y="293" width="0.0794%" height="15" fill="rgb(218,133,21)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (501,504 samples, 0.08%)</title><rect x="51.0154%" y="277" width="0.0794%" height="15" fill="rgb(221,193,43)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (501,504 samples, 0.08%)</title><rect x="51.0154%" y="261" width="0.0794%" height="15" fill="rgb(240,128,52)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (501,504 samples, 0.08%)</title><rect x="51.0154%" y="245" width="0.0794%" height="15" fill="rgb(253,114,12)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (501,504 samples, 0.08%)</title><rect x="51.0154%" y="229" width="0.0794%" height="15" fill="rgb(215,223,47)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="239.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (501,504 samples, 0.08%)</title><rect x="51.0154%" y="213" width="0.0794%" height="15" fill="rgb(248,225,23)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (501,504 samples, 0.08%)</title><rect x="51.0154%" y="197" width="0.0794%" height="15" fill="rgb(250,108,0)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (501,504 samples, 0.08%)</title><rect x="51.0154%" y="181" width="0.0794%" height="15" fill="rgb(228,208,7)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="191.50"></text></g><g><title>alloc::alloc::alloc (501,504 samples, 0.08%)</title><rect x="51.0154%" y="165" width="0.0794%" height="15" fill="rgb(244,45,10)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="175.50"></text></g><g><title>malloc (501,504 samples, 0.08%)</title><rect x="51.0154%" y="149" width="0.0794%" height="15" fill="rgb(207,125,25)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="159.50"></text></g><g><title>[libc.so.6] (501,504 samples, 0.08%)</title><rect x="51.0154%" y="133" width="0.0794%" height="15" fill="rgb(210,195,18)" fg:x="322050977" fg:w="501504"/><text x="51.2654%" y="143.50"></text></g><g><title>img::main (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="373" width="0.3928%" height="15" fill="rgb(249,80,12)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="383.50"></text></g><g><title>img::deflate_test (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="357" width="0.3928%" height="15" fill="rgb(221,65,9)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="367.50"></text></g><g><title>img::compress (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="341" width="0.3928%" height="15" fill="rgb(235,49,36)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="351.50"></text></g><g><title>[libc.so.6] (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="325" width="0.3928%" height="15" fill="rgb(225,32,20)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="335.50"></text></g><g><title>std::fs::OpenOptions::_open (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="309" width="0.3928%" height="15" fill="rgb(215,141,46)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="319.50"></text></g><g><title>std::sys::fs::unix::File::open (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="293" width="0.3928%" height="15" fill="rgb(250,160,47)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="303.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="277" width="0.3928%" height="15" fill="rgb(216,222,40)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="287.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="261" width="0.3928%" height="15" fill="rgb(234,217,39)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="271.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="245" width="0.3928%" height="15" fill="rgb(207,178,40)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="255.50"></text></g><g><title>std::sys::fs::unix::File::open::_{{closure}} (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="229" width="0.3928%" height="15" fill="rgb(221,136,13)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="239.50"></text></g><g><title>std::sys::fs::unix::File::open_c (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="213" width="0.3928%" height="15" fill="rgb(249,199,10)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="223.50"></text></g><g><title>std::sys::pal::unix::cvt_r (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="197" width="0.3928%" height="15" fill="rgb(249,222,13)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="207.50"></text></g><g><title>std::sys::fs::unix::File::open_c::_{{closure}} (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="181" width="0.3928%" height="15" fill="rgb(244,185,38)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="191.50"></text></g><g><title>open64 (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="165" width="0.3928%" height="15" fill="rgb(236,202,9)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="175.50"></text></g><g><title>[unknown] (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="149" width="0.3928%" height="15" fill="rgb(250,229,37)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="133" width="0.3928%" height="15" fill="rgb(206,174,23)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="143.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="117" width="0.3928%" height="15" fill="rgb(211,33,43)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="127.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="101" width="0.3928%" height="15" fill="rgb(245,58,50)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="85" width="0.3928%" height="15" fill="rgb(244,68,36)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="69" width="0.3928%" height="15" fill="rgb(232,229,15)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="53" width="0.3928%" height="15" fill="rgb(254,30,23)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="63.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,479,838 samples, 0.39%)</title><rect x="51.0948%" y="37" width="0.3928%" height="15" fill="rgb(235,160,14)" fg:x="322552481" fg:w="2479838"/><text x="51.3448%" y="47.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (7,979,749 samples, 1.26%)</title><rect x="51.4876%" y="373" width="1.2641%" height="15" fill="rgb(212,155,44)" fg:x="325032319" fg:w="7979749"/><text x="51.7376%" y="383.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="357" width="0.6323%" height="15" fill="rgb(226,2,50)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="341" width="0.6323%" height="15" fill="rgb(234,177,6)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="351.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::flush_buffer (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="325" width="0.6323%" height="15" fill="rgb(217,24,9)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="309" width="0.6323%" height="15" fill="rgb(220,13,46)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="293" width="0.6323%" height="15" fill="rgb(239,221,27)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="277" width="0.6323%" height="15" fill="rgb(222,198,25)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="261" width="0.6323%" height="15" fill="rgb(211,99,13)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="245" width="0.6323%" height="15" fill="rgb(232,111,31)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="229" width="0.6323%" height="15" fill="rgb(245,82,37)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="213" width="0.6323%" height="15" fill="rgb(227,149,46)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="223.50"></text></g><g><title>alloc::alloc::realloc (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="197" width="0.6323%" height="15" fill="rgb(218,36,50)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="207.50"></text></g><g><title>realloc (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="181" width="0.6323%" height="15" fill="rgb(226,80,48)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="191.50"></text></g><g><title>[libc.so.6] (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="165" width="0.6323%" height="15" fill="rgb(238,224,15)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="175.50"></text></g><g><title>[libc.so.6] (3,991,439 samples, 0.63%)</title><rect x="52.1194%" y="149" width="0.6323%" height="15" fill="rgb(241,136,10)" fg:x="329020629" fg:w="3991439"/><text x="52.3694%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,img::png::deflate::bitstream::WriteBitStream&gt;&gt; (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="357" width="0.6403%" height="15" fill="rgb(208,32,45)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,img::png::deflate::bitstream::WriteBitStream,std::hash::random::RandomState&gt;&gt; (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="341" width="0.6403%" height="15" fill="rgb(207,135,9)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,img::png::deflate::bitstream::WriteBitStream)&gt;&gt; (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="325" width="0.6403%" height="15" fill="rgb(206,86,44)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="309" width="0.6403%" height="15" fill="rgb(245,177,15)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="293" width="0.6403%" height="15" fill="rgb(206,64,50)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="277" width="0.6403%" height="15" fill="rgb(234,36,40)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="261" width="0.6403%" height="15" fill="rgb(213,64,8)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="245" width="0.6403%" height="15" fill="rgb(210,75,36)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,img::png::deflate::bitstream::WriteBitStream)&gt; (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="229" width="0.6403%" height="15" fill="rgb(229,88,21)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;img::png::deflate::bitstream::WriteBitStream&gt; (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="213" width="0.6403%" height="15" fill="rgb(252,204,47)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="197" width="0.6403%" height="15" fill="rgb(208,77,27)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="181" width="0.6403%" height="15" fill="rgb(221,76,26)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="165" width="0.6403%" height="15" fill="rgb(225,139,18)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="149" width="0.6403%" height="15" fill="rgb(230,137,11)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="133" width="0.6403%" height="15" fill="rgb(212,28,1)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="117" width="0.6403%" height="15" fill="rgb(248,164,17)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="127.50"></text></g><g><title>cfree (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="101" width="0.6403%" height="15" fill="rgb(222,171,42)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="111.50"></text></g><g><title>[libc.so.6] (4,041,981 samples, 0.64%)</title><rect x="52.7517%" y="85" width="0.6403%" height="15" fill="rgb(243,84,45)" fg:x="333012068" fg:w="4041981"/><text x="53.0017%" y="95.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (4,075,436 samples, 0.65%)</title><rect x="53.3920%" y="357" width="0.6456%" height="15" fill="rgb(252,49,23)" fg:x="337054049" fg:w="4075436"/><text x="53.6420%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4,075,436 samples, 0.65%)</title><rect x="53.3920%" y="341" width="0.6456%" height="15" fill="rgb(215,19,7)" fg:x="337054049" fg:w="4075436"/><text x="53.6420%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4,075,436 samples, 0.65%)</title><rect x="53.3920%" y="325" width="0.6456%" height="15" fill="rgb(238,81,41)" fg:x="337054049" fg:w="4075436"/><text x="53.6420%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4,075,436 samples, 0.65%)</title><rect x="53.3920%" y="309" width="0.6456%" height="15" fill="rgb(210,199,37)" fg:x="337054049" fg:w="4075436"/><text x="53.6420%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (4,075,436 samples, 0.65%)</title><rect x="53.3920%" y="293" width="0.6456%" height="15" fill="rgb(244,192,49)" fg:x="337054049" fg:w="4075436"/><text x="53.6420%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,075,436 samples, 0.65%)</title><rect x="53.3920%" y="277" width="0.6456%" height="15" fill="rgb(226,211,11)" fg:x="337054049" fg:w="4075436"/><text x="53.6420%" y="287.50"></text></g><g><title>img::png::deflate::encode_block_type_two (12,161,978 samples, 1.93%)</title><rect x="52.7517%" y="373" width="1.9266%" height="15" fill="rgb(236,162,54)" fg:x="333012068" fg:w="12161978"/><text x="53.0017%" y="383.50">i..</text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (4,044,561 samples, 0.64%)</title><rect x="54.0376%" y="357" width="0.6407%" height="15" fill="rgb(220,229,9)" fg:x="341129485" fg:w="4044561"/><text x="54.2876%" y="367.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,045,231 samples, 0.64%)</title><rect x="54.6782%" y="245" width="0.6408%" height="15" fill="rgb(250,87,22)" fg:x="345174046" fg:w="4045231"/><text x="54.9282%" y="255.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (4,045,231 samples, 0.64%)</title><rect x="54.6782%" y="229" width="0.6408%" height="15" fill="rgb(239,43,17)" fg:x="345174046" fg:w="4045231"/><text x="54.9282%" y="239.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (4,045,231 samples, 0.64%)</title><rect x="54.6782%" y="213" width="0.6408%" height="15" fill="rgb(231,177,25)" fg:x="345174046" fg:w="4045231"/><text x="54.9282%" y="223.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (4,045,231 samples, 0.64%)</title><rect x="54.6782%" y="197" width="0.6408%" height="15" fill="rgb(219,179,1)" fg:x="345174046" fg:w="4045231"/><text x="54.9282%" y="207.50"></text></g><g><title>core::intrinsics::likely (8,165,881 samples, 1.29%)</title><rect x="55.3190%" y="245" width="1.2935%" height="15" fill="rgb(238,219,53)" fg:x="349219277" fg:w="8165881"/><text x="55.5690%" y="255.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (4,052,796 samples, 0.64%)</title><rect x="56.6126%" y="245" width="0.6420%" height="15" fill="rgb(232,167,36)" fg:x="357385158" fg:w="4052796"/><text x="56.8626%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4,052,796 samples, 0.64%)</title><rect x="56.6126%" y="229" width="0.6420%" height="15" fill="rgb(244,19,51)" fg:x="357385158" fg:w="4052796"/><text x="56.8626%" y="239.50"></text></g><g><title>core::ptr::copy_nonoverlapping (4,052,796 samples, 0.64%)</title><rect x="56.6126%" y="213" width="0.6420%" height="15" fill="rgb(224,6,22)" fg:x="357385158" fg:w="4052796"/><text x="56.8626%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4,091,161 samples, 0.65%)</title><rect x="57.2546%" y="245" width="0.6481%" height="15" fill="rgb(224,145,5)" fg:x="361437954" fg:w="4091161"/><text x="57.5046%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (4,091,161 samples, 0.65%)</title><rect x="57.2546%" y="229" width="0.6481%" height="15" fill="rgb(234,130,49)" fg:x="361437954" fg:w="4091161"/><text x="57.5046%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4,091,161 samples, 0.65%)</title><rect x="57.2546%" y="213" width="0.6481%" height="15" fill="rgb(254,6,2)" fg:x="361437954" fg:w="4091161"/><text x="57.5046%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,091,161 samples, 0.65%)</title><rect x="57.2546%" y="197" width="0.6481%" height="15" fill="rgb(208,96,46)" fg:x="361437954" fg:w="4091161"/><text x="57.5046%" y="207.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (32,457,773 samples, 5.14%)</title><rect x="54.6782%" y="357" width="5.1416%" height="15" fill="rgb(239,3,39)" fg:x="345174046" fg:w="32457773"/><text x="54.9282%" y="367.50">img::p..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (32,457,773 samples, 5.14%)</title><rect x="54.6782%" y="341" width="5.1416%" height="15" fill="rgb(233,210,1)" fg:x="345174046" fg:w="32457773"/><text x="54.9282%" y="351.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (32,457,773 samples, 5.14%)</title><rect x="54.6782%" y="325" width="5.1416%" height="15" fill="rgb(244,137,37)" fg:x="345174046" fg:w="32457773"/><text x="54.9282%" y="335.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (32,457,773 samples, 5.14%)</title><rect x="54.6782%" y="309" width="5.1416%" height="15" fill="rgb(240,136,2)" fg:x="345174046" fg:w="32457773"/><text x="54.9282%" y="319.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (32,457,773 samples, 5.14%)</title><rect x="54.6782%" y="293" width="5.1416%" height="15" fill="rgb(239,18,37)" fg:x="345174046" fg:w="32457773"/><text x="54.9282%" y="303.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (32,457,773 samples, 5.14%)</title><rect x="54.6782%" y="277" width="5.1416%" height="15" fill="rgb(218,185,22)" fg:x="345174046" fg:w="32457773"/><text x="54.9282%" y="287.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (32,457,773 samples, 5.14%)</title><rect x="54.6782%" y="261" width="5.1416%" height="15" fill="rgb(225,218,4)" fg:x="345174046" fg:w="32457773"/><text x="54.9282%" y="271.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (12,102,704 samples, 1.92%)</title><rect x="57.9026%" y="245" width="1.9172%" height="15" fill="rgb(230,182,32)" fg:x="365529115" fg:w="12102704"/><text x="58.1526%" y="255.50">h..</text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (36,459,336 samples, 5.78%)</title><rect x="54.6782%" y="373" width="5.7754%" height="15" fill="rgb(242,56,43)" fg:x="345174046" fg:w="36459336"/><text x="54.9282%" y="383.50">img::pn..</text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (4,001,563 samples, 0.63%)</title><rect x="59.8198%" y="357" width="0.6339%" height="15" fill="rgb(233,99,24)" fg:x="377631819" fg:w="4001563"/><text x="60.0698%" y="367.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (4,001,563 samples, 0.63%)</title><rect x="59.8198%" y="341" width="0.6339%" height="15" fill="rgb(234,209,42)" fg:x="377631819" fg:w="4001563"/><text x="60.0698%" y="351.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (4,001,563 samples, 0.63%)</title><rect x="59.8198%" y="325" width="0.6339%" height="15" fill="rgb(227,7,12)" fg:x="377631819" fg:w="4001563"/><text x="60.0698%" y="335.50"></text></g><g><title>core::ptr::read (4,001,563 samples, 0.63%)</title><rect x="59.8198%" y="309" width="0.6339%" height="15" fill="rgb(245,203,43)" fg:x="377631819" fg:w="4001563"/><text x="60.0698%" y="319.50"></text></g><g><title>img::png::deflate::huffman::construct_canonical_tree_from_lengths (3,956,553 samples, 0.63%)</title><rect x="60.4537%" y="373" width="0.6267%" height="15" fill="rgb(238,205,33)" fg:x="381633382" fg:w="3956553"/><text x="60.7037%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (3,956,553 samples, 0.63%)</title><rect x="60.4537%" y="357" width="0.6267%" height="15" fill="rgb(231,56,7)" fg:x="381633382" fg:w="3956553"/><text x="60.7037%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (3,956,553 samples, 0.63%)</title><rect x="60.4537%" y="341" width="0.6267%" height="15" fill="rgb(244,186,29)" fg:x="381633382" fg:w="3956553"/><text x="60.7037%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (3,956,553 samples, 0.63%)</title><rect x="60.4537%" y="325" width="0.6267%" height="15" fill="rgb(234,111,31)" fg:x="381633382" fg:w="3956553"/><text x="60.7037%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (8,066,024 samples, 1.28%)</title><rect x="62.3604%" y="357" width="1.2777%" height="15" fill="rgb(241,149,10)" fg:x="393670279" fg:w="8066024"/><text x="62.6104%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::flush_buffer (4,049,062 samples, 0.64%)</title><rect x="62.9967%" y="341" width="0.6414%" height="15" fill="rgb(249,206,44)" fg:x="397687241" fg:w="4049062"/><text x="63.2467%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,049,062 samples, 0.64%)</title><rect x="62.9967%" y="325" width="0.6414%" height="15" fill="rgb(251,153,30)" fg:x="397687241" fg:w="4049062"/><text x="63.2467%" y="335.50"></text></g><g><title>core::ptr::write (4,049,062 samples, 0.64%)</title><rect x="62.9967%" y="309" width="0.6414%" height="15" fill="rgb(239,152,38)" fg:x="397687241" fg:w="4049062"/><text x="63.2467%" y="319.50"></text></g><g><title>core::intrinsics::likely (12,196,180 samples, 1.93%)</title><rect x="64.2840%" y="261" width="1.9320%" height="15" fill="rgb(249,139,47)" fg:x="405813488" fg:w="12196180"/><text x="64.5340%" y="271.50">c..</text></g><g><title>hashbrown::control::tag::Tag::full (4,060,480 samples, 0.64%)</title><rect x="66.2160%" y="261" width="0.6432%" height="15" fill="rgb(244,64,35)" fg:x="418009668" fg:w="4060480"/><text x="66.4660%" y="271.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (40,542,468 samples, 6.42%)</title><rect x="61.0804%" y="373" width="6.4222%" height="15" fill="rgb(216,46,15)" fg:x="385589935" fg:w="40542468"/><text x="61.3304%" y="383.50">img::png..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (24,396,100 samples, 3.86%)</title><rect x="63.6381%" y="357" width="3.8645%" height="15" fill="rgb(250,74,19)" fg:x="401736303" fg:w="24396100"/><text x="63.8881%" y="367.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (24,396,100 samples, 3.86%)</title><rect x="63.6381%" y="341" width="3.8645%" height="15" fill="rgb(249,42,33)" fg:x="401736303" fg:w="24396100"/><text x="63.8881%" y="351.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (24,396,100 samples, 3.86%)</title><rect x="63.6381%" y="325" width="3.8645%" height="15" fill="rgb(242,149,17)" fg:x="401736303" fg:w="24396100"/><text x="63.8881%" y="335.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (20,318,915 samples, 3.22%)</title><rect x="64.2840%" y="309" width="3.2187%" height="15" fill="rgb(244,29,21)" fg:x="405813488" fg:w="20318915"/><text x="64.5340%" y="319.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20,318,915 samples, 3.22%)</title><rect x="64.2840%" y="293" width="3.2187%" height="15" fill="rgb(220,130,37)" fg:x="405813488" fg:w="20318915"/><text x="64.5340%" y="303.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (20,318,915 samples, 3.22%)</title><rect x="64.2840%" y="277" width="3.2187%" height="15" fill="rgb(211,67,2)" fg:x="405813488" fg:w="20318915"/><text x="64.5340%" y="287.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4,062,255 samples, 0.64%)</title><rect x="66.8592%" y="261" width="0.6435%" height="15" fill="rgb(235,68,52)" fg:x="422070148" fg:w="4062255"/><text x="67.1092%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (4,062,255 samples, 0.64%)</title><rect x="66.8592%" y="245" width="0.6435%" height="15" fill="rgb(246,142,3)" fg:x="422070148" fg:w="4062255"/><text x="67.1092%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (4,062,255 samples, 0.64%)</title><rect x="66.8592%" y="229" width="0.6435%" height="15" fill="rgb(241,25,7)" fg:x="422070148" fg:w="4062255"/><text x="67.1092%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4,062,255 samples, 0.64%)</title><rect x="66.8592%" y="213" width="0.6435%" height="15" fill="rgb(242,119,39)" fg:x="422070148" fg:w="4062255"/><text x="67.1092%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (3,374,786 samples, 0.53%)</title><rect x="67.5027%" y="373" width="0.5346%" height="15" fill="rgb(241,98,45)" fg:x="426132403" fg:w="3374786"/><text x="67.7527%" y="383.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::convert::From&lt;[T: N]&gt;&gt;::from (501,504 samples, 0.08%)</title><rect x="68.0373%" y="357" width="0.0794%" height="15" fill="rgb(254,28,30)" fg:x="429507189" fg:w="501504"/><text x="68.2873%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::with_capacity (501,504 samples, 0.08%)</title><rect x="68.0373%" y="341" width="0.0794%" height="15" fill="rgb(241,142,54)" fg:x="429507189" fg:w="501504"/><text x="68.2873%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::with_capacity_in (501,504 samples, 0.08%)</title><rect x="68.0373%" y="325" width="0.0794%" height="15" fill="rgb(222,85,15)" fg:x="429507189" fg:w="501504"/><text x="68.2873%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (501,504 samples, 0.08%)</title><rect x="68.0373%" y="309" width="0.0794%" height="15" fill="rgb(210,85,47)" fg:x="429507189" fg:w="501504"/><text x="68.2873%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (501,504 samples, 0.08%)</title><rect x="68.0373%" y="293" width="0.0794%" height="15" fill="rgb(224,206,25)" fg:x="429507189" fg:w="501504"/><text x="68.2873%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (501,504 samples, 0.08%)</title><rect x="68.0373%" y="277" width="0.0794%" height="15" fill="rgb(243,201,19)" fg:x="429507189" fg:w="501504"/><text x="68.2873%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (2,800,513 samples, 0.44%)</title><rect x="68.1167%" y="357" width="0.4436%" height="15" fill="rgb(236,59,4)" fg:x="430008693" fg:w="2800513"/><text x="68.3667%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,800,513 samples, 0.44%)</title><rect x="68.1167%" y="341" width="0.4436%" height="15" fill="rgb(254,179,45)" fg:x="430008693" fg:w="2800513"/><text x="68.3667%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,800,513 samples, 0.44%)</title><rect x="68.1167%" y="325" width="0.4436%" height="15" fill="rgb(226,14,10)" fg:x="430008693" fg:w="2800513"/><text x="68.3667%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2,800,513 samples, 0.44%)</title><rect x="68.1167%" y="309" width="0.4436%" height="15" fill="rgb(244,27,41)" fg:x="430008693" fg:w="2800513"/><text x="68.3667%" y="319.50"></text></g><g><title>[unknown] (290,297,515 samples, 45.99%)</title><rect x="23.1088%" y="389" width="45.9854%" height="15" fill="rgb(235,35,32)" fg:x="145881924" fg:w="290297515"/><text x="23.3588%" y="399.50">[unknown]</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (6,672,250 samples, 1.06%)</title><rect x="68.0373%" y="373" width="1.0569%" height="15" fill="rgb(218,68,31)" fg:x="429507189" fg:w="6672250"/><text x="68.2873%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3,370,233 samples, 0.53%)</title><rect x="68.5603%" y="357" width="0.5339%" height="15" fill="rgb(207,120,37)" fg:x="432809206" fg:w="3370233"/><text x="68.8103%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3,370,233 samples, 0.53%)</title><rect x="68.5603%" y="341" width="0.5339%" height="15" fill="rgb(227,98,0)" fg:x="432809206" fg:w="3370233"/><text x="68.8103%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3,370,233 samples, 0.53%)</title><rect x="68.5603%" y="325" width="0.5339%" height="15" fill="rgb(207,7,3)" fg:x="432809206" fg:w="3370233"/><text x="68.8103%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,370,233 samples, 0.53%)</title><rect x="68.5603%" y="309" width="0.5339%" height="15" fill="rgb(206,98,19)" fg:x="432809206" fg:w="3370233"/><text x="68.8103%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,370,233 samples, 0.53%)</title><rect x="68.5603%" y="293" width="0.5339%" height="15" fill="rgb(217,5,26)" fg:x="432809206" fg:w="3370233"/><text x="68.8103%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,370,233 samples, 0.53%)</title><rect x="68.5603%" y="277" width="0.5339%" height="15" fill="rgb(235,190,38)" fg:x="432809206" fg:w="3370233"/><text x="68.8103%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (3,370,233 samples, 0.53%)</title><rect x="68.5603%" y="261" width="0.5339%" height="15" fill="rgb(247,86,24)" fg:x="432809206" fg:w="3370233"/><text x="68.8103%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3,370,233 samples, 0.53%)</title><rect x="68.5603%" y="245" width="0.5339%" height="15" fill="rgb(205,101,16)" fg:x="432809206" fg:w="3370233"/><text x="68.8103%" y="255.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,370,233 samples, 0.53%)</title><rect x="68.5603%" y="229" width="0.5339%" height="15" fill="rgb(246,168,33)" fg:x="432809206" fg:w="3370233"/><text x="68.8103%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7,331,279 samples, 1.16%)</title><rect x="69.0942%" y="389" width="1.1613%" height="15" fill="rgb(231,114,1)" fg:x="436179439" fg:w="7331279"/><text x="69.3442%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (7,331,279 samples, 1.16%)</title><rect x="69.0942%" y="373" width="1.1613%" height="15" fill="rgb(207,184,53)" fg:x="436179439" fg:w="7331279"/><text x="69.3442%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (8,109,954 samples, 1.28%)</title><rect x="70.2555%" y="389" width="1.2847%" height="15" fill="rgb(224,95,51)" fg:x="443510718" fg:w="8109954"/><text x="70.5055%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8,109,954 samples, 1.28%)</title><rect x="70.2555%" y="373" width="1.2847%" height="15" fill="rgb(212,188,45)" fg:x="443510718" fg:w="8109954"/><text x="70.5055%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8,109,954 samples, 1.28%)</title><rect x="70.2555%" y="357" width="1.2847%" height="15" fill="rgb(223,154,38)" fg:x="443510718" fg:w="8109954"/><text x="70.5055%" y="367.50"></text></g><g><title>alloc::alloc::realloc (8,109,954 samples, 1.28%)</title><rect x="70.2555%" y="341" width="1.2847%" height="15" fill="rgb(251,22,52)" fg:x="443510718" fg:w="8109954"/><text x="70.5055%" y="351.50"></text></g><g><title>realloc (8,109,954 samples, 1.28%)</title><rect x="70.2555%" y="325" width="1.2847%" height="15" fill="rgb(229,209,22)" fg:x="443510718" fg:w="8109954"/><text x="70.5055%" y="335.50"></text></g><g><title>[libc.so.6] (8,109,954 samples, 1.28%)</title><rect x="70.2555%" y="309" width="1.2847%" height="15" fill="rgb(234,138,34)" fg:x="443510718" fg:w="8109954"/><text x="70.5055%" y="319.50"></text></g><g><title>[libc.so.6] (8,109,954 samples, 1.28%)</title><rect x="70.2555%" y="293" width="1.2847%" height="15" fill="rgb(212,95,11)" fg:x="443510718" fg:w="8109954"/><text x="70.5055%" y="303.50"></text></g><g><title>[libc.so.6] (4,065,942 samples, 0.64%)</title><rect x="70.8961%" y="277" width="0.6441%" height="15" fill="rgb(240,179,47)" fg:x="447554730" fg:w="4065942"/><text x="71.1461%" y="287.50"></text></g><g><title>cfree (4,061,750 samples, 0.64%)</title><rect x="71.5402%" y="389" width="0.6434%" height="15" fill="rgb(240,163,11)" fg:x="451620672" fg:w="4061750"/><text x="71.7902%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,378,742 samples, 0.54%)</title><rect x="72.1836%" y="373" width="0.5352%" height="15" fill="rgb(236,37,12)" fg:x="455682422" fg:w="3378742"/><text x="72.4336%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,378,742 samples, 0.54%)</title><rect x="72.1836%" y="357" width="0.5352%" height="15" fill="rgb(232,164,16)" fg:x="455682422" fg:w="3378742"/><text x="72.4336%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,378,742 samples, 0.54%)</title><rect x="72.1836%" y="341" width="0.5352%" height="15" fill="rgb(244,205,15)" fg:x="455682422" fg:w="3378742"/><text x="72.4336%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,378,742 samples, 0.54%)</title><rect x="72.1836%" y="325" width="0.5352%" height="15" fill="rgb(223,117,47)" fg:x="455682422" fg:w="3378742"/><text x="72.4336%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,378,742 samples, 0.54%)</title><rect x="72.1836%" y="309" width="0.5352%" height="15" fill="rgb(244,107,35)" fg:x="455682422" fg:w="3378742"/><text x="72.4336%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6,868,497 samples, 1.09%)</title><rect x="72.1836%" y="389" width="1.0880%" height="15" fill="rgb(205,140,8)" fg:x="455682422" fg:w="6868497"/><text x="72.4336%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,489,755 samples, 0.55%)</title><rect x="72.7189%" y="373" width="0.5528%" height="15" fill="rgb(228,84,46)" fg:x="459061164" fg:w="3489755"/><text x="72.9689%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (3,489,755 samples, 0.55%)</title><rect x="72.7189%" y="357" width="0.5528%" height="15" fill="rgb(254,188,9)" fg:x="459061164" fg:w="3489755"/><text x="72.9689%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u32 (3,489,755 samples, 0.55%)</title><rect x="72.7189%" y="341" width="0.5528%" height="15" fill="rgb(206,112,54)" fg:x="459061164" fg:w="3489755"/><text x="72.9689%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,422,763 samples, 0.23%)</title><rect x="73.6087%" y="341" width="0.2254%" height="15" fill="rgb(216,84,49)" fg:x="464678762" fg:w="1422763"/><text x="73.8587%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (1,422,763 samples, 0.23%)</title><rect x="73.6087%" y="325" width="0.2254%" height="15" fill="rgb(214,194,35)" fg:x="464678762" fg:w="1422763"/><text x="73.8587%" y="335.50"></text></g><g><title>core::cmp::max_by (1,422,763 samples, 0.23%)</title><rect x="73.6087%" y="309" width="0.2254%" height="15" fill="rgb(249,28,3)" fg:x="464678762" fg:w="1422763"/><text x="73.8587%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6,625,583 samples, 1.05%)</title><rect x="73.2717%" y="389" width="1.0495%" height="15" fill="rgb(222,56,52)" fg:x="462550919" fg:w="6625583"/><text x="73.5217%" y="399.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (4,497,740 samples, 0.71%)</title><rect x="73.6087%" y="373" width="0.7125%" height="15" fill="rgb(245,217,50)" fg:x="464678762" fg:w="4497740"/><text x="73.8587%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4,497,740 samples, 0.71%)</title><rect x="73.6087%" y="357" width="0.7125%" height="15" fill="rgb(213,201,24)" fg:x="464678762" fg:w="4497740"/><text x="73.8587%" y="367.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (3,074,977 samples, 0.49%)</title><rect x="73.8341%" y="341" width="0.4871%" height="15" fill="rgb(248,116,28)" fg:x="466101525" fg:w="3074977"/><text x="74.0841%" y="351.50"></text></g><g><title>img::png::deflate::lzss::hash::number_of_matching_bytes (3,074,977 samples, 0.49%)</title><rect x="73.8341%" y="325" width="0.4871%" height="15" fill="rgb(219,72,43)" fg:x="466101525" fg:w="3074977"/><text x="74.0841%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (4,001,606 samples, 0.63%)</title><rect x="74.3212%" y="389" width="0.6339%" height="15" fill="rgb(209,138,14)" fg:x="469176502" fg:w="4001606"/><text x="74.5712%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (4,001,606 samples, 0.63%)</title><rect x="74.3212%" y="373" width="0.6339%" height="15" fill="rgb(222,18,33)" fg:x="469176502" fg:w="4001606"/><text x="74.5712%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (4,001,606 samples, 0.63%)</title><rect x="74.3212%" y="357" width="0.6339%" height="15" fill="rgb(213,199,7)" fg:x="469176502" fg:w="4001606"/><text x="74.5712%" y="367.50"></text></g><g><title>core::ptr::copy_nonoverlapping (4,001,606 samples, 0.63%)</title><rect x="74.3212%" y="341" width="0.6339%" height="15" fill="rgb(250,110,10)" fg:x="469176502" fg:w="4001606"/><text x="74.5712%" y="351.50"></text></g><g><title>core::slice::sort::stable::driftsort_main (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="389" width="0.4159%" height="15" fill="rgb(248,123,6)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl core::slice::sort::stable::BufGuard&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::with_capacity (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="373" width="0.4159%" height="15" fill="rgb(206,91,31)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="357" width="0.4159%" height="15" fill="rgb(211,154,13)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="341" width="0.4159%" height="15" fill="rgb(225,148,7)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="325" width="0.4159%" height="15" fill="rgb(220,160,43)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="309" width="0.4159%" height="15" fill="rgb(213,52,39)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="293" width="0.4159%" height="15" fill="rgb(243,137,7)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="277" width="0.4159%" height="15" fill="rgb(230,79,13)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="261" width="0.4159%" height="15" fill="rgb(247,105,23)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="245" width="0.4159%" height="15" fill="rgb(223,179,41)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="255.50"></text></g><g><title>malloc (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="229" width="0.4159%" height="15" fill="rgb(218,9,34)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="239.50"></text></g><g><title>[libc.so.6] (2,625,604 samples, 0.42%)</title><rect x="74.9551%" y="213" width="0.4159%" height="15" fill="rgb(222,106,8)" fg:x="473178108" fg:w="2625604"/><text x="75.2051%" y="223.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (4,026,582 samples, 0.64%)</title><rect x="75.3710%" y="389" width="0.6378%" height="15" fill="rgb(211,220,0)" fg:x="475803712" fg:w="4026582"/><text x="75.6210%" y="399.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (4,026,582 samples, 0.64%)</title><rect x="75.3710%" y="373" width="0.6378%" height="15" fill="rgb(229,52,16)" fg:x="475803712" fg:w="4026582"/><text x="75.6210%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (4,026,582 samples, 0.64%)</title><rect x="75.3710%" y="357" width="0.6378%" height="15" fill="rgb(212,155,18)" fg:x="475803712" fg:w="4026582"/><text x="75.6210%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (16,197,370 samples, 2.57%)</title><rect x="76.0088%" y="389" width="2.5658%" height="15" fill="rgb(242,21,14)" fg:x="479830294" fg:w="16197370"/><text x="76.2588%" y="399.50">im..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4,088,096 samples, 0.65%)</title><rect x="77.9270%" y="373" width="0.6476%" height="15" fill="rgb(222,19,48)" fg:x="491939568" fg:w="4088096"/><text x="78.1770%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (4,088,096 samples, 0.65%)</title><rect x="77.9270%" y="357" width="0.6476%" height="15" fill="rgb(232,45,27)" fg:x="491939568" fg:w="4088096"/><text x="78.1770%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="389" width="1.2803%" height="15" fill="rgb(249,103,42)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="373" width="1.2803%" height="15" fill="rgb(246,81,33)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="357" width="1.2803%" height="15" fill="rgb(252,33,42)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="341" width="1.2803%" height="15" fill="rgb(209,212,41)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="325" width="1.2803%" height="15" fill="rgb(207,154,6)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="309" width="1.2803%" height="15" fill="rgb(223,64,47)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="293" width="1.2803%" height="15" fill="rgb(211,161,38)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="277" width="1.2803%" height="15" fill="rgb(219,138,40)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="261" width="1.2803%" height="15" fill="rgb(241,228,46)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="245" width="1.2803%" height="15" fill="rgb(223,209,38)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="229" width="1.2803%" height="15" fill="rgb(236,164,45)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="239.50"></text></g><g><title>cfree (8,082,077 samples, 1.28%)</title><rect x="78.5746%" y="213" width="1.2803%" height="15" fill="rgb(231,15,5)" fg:x="496027664" fg:w="8082077"/><text x="78.8246%" y="223.50"></text></g><g><title>[libc.so.6] (4,013,265 samples, 0.64%)</title><rect x="79.2192%" y="197" width="0.6357%" height="15" fill="rgb(252,35,15)" fg:x="500096476" fg:w="4013265"/><text x="79.4692%" y="207.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (4,058,234 samples, 0.64%)</title><rect x="79.8549%" y="389" width="0.6429%" height="15" fill="rgb(248,181,18)" fg:x="504109741" fg:w="4058234"/><text x="80.1049%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,719,595 samples, 1.06%)</title><rect x="82.0931%" y="261" width="1.0644%" height="15" fill="rgb(233,39,42)" fg:x="518239402" fg:w="6719595"/><text x="82.3431%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (6,719,595 samples, 1.06%)</title><rect x="82.0931%" y="245" width="1.0644%" height="15" fill="rgb(238,110,33)" fg:x="518239402" fg:w="6719595"/><text x="82.3431%" y="255.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6,719,595 samples, 1.06%)</title><rect x="82.0931%" y="229" width="1.0644%" height="15" fill="rgb(233,195,10)" fg:x="518239402" fg:w="6719595"/><text x="82.3431%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6,719,595 samples, 1.06%)</title><rect x="82.0931%" y="213" width="1.0644%" height="15" fill="rgb(254,105,3)" fg:x="518239402" fg:w="6719595"/><text x="82.3431%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6,719,595 samples, 1.06%)</title><rect x="82.0931%" y="197" width="1.0644%" height="15" fill="rgb(221,225,9)" fg:x="518239402" fg:w="6719595"/><text x="82.3431%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (6,719,595 samples, 1.06%)</title><rect x="82.0931%" y="181" width="1.0644%" height="15" fill="rgb(224,227,45)" fg:x="518239402" fg:w="6719595"/><text x="82.3431%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6,719,595 samples, 1.06%)</title><rect x="82.0931%" y="165" width="1.0644%" height="15" fill="rgb(229,198,43)" fg:x="518239402" fg:w="6719595"/><text x="82.3431%" y="175.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (6,719,595 samples, 1.06%)</title><rect x="82.0931%" y="149" width="1.0644%" height="15" fill="rgb(206,209,35)" fg:x="518239402" fg:w="6719595"/><text x="82.3431%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6,738,018 samples, 1.07%)</title><rect x="85.9557%" y="213" width="1.0674%" height="15" fill="rgb(245,195,53)" fg:x="542622842" fg:w="6738018"/><text x="86.2057%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6,738,018 samples, 1.07%)</title><rect x="85.9557%" y="197" width="1.0674%" height="15" fill="rgb(240,92,26)" fg:x="542622842" fg:w="6738018"/><text x="86.2057%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (6,738,018 samples, 1.07%)</title><rect x="85.9557%" y="181" width="1.0674%" height="15" fill="rgb(207,40,23)" fg:x="542622842" fg:w="6738018"/><text x="86.2057%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (91,987,581 samples, 14.57%)</title><rect x="82.0931%" y="277" width="14.5715%" height="15" fill="rgb(223,111,35)" fg:x="518239402" fg:w="91987581"/><text x="82.3431%" y="287.50">&lt;core::iter::adapters:..</text></g><g><title>core::option::Option&lt;T&gt;::map (85,267,986 samples, 13.51%)</title><rect x="83.1576%" y="261" width="13.5071%" height="15" fill="rgb(229,147,28)" fg:x="524958997" fg:w="85267986"/><text x="83.4076%" y="271.50">core::option::Option..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (85,267,986 samples, 13.51%)</title><rect x="83.1576%" y="245" width="13.5071%" height="15" fill="rgb(211,29,28)" fg:x="524958997" fg:w="85267986"/><text x="83.4076%" y="255.50">core::ops::function:..</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (85,267,986 samples, 13.51%)</title><rect x="83.1576%" y="229" width="13.5071%" height="15" fill="rgb(228,72,33)" fg:x="524958997" fg:w="85267986"/><text x="83.4076%" y="239.50">img::png::deflate::l..</text></g><g><title>img::png::deflate::lzss::hash::number_of_matching_bytes (60,866,123 samples, 9.64%)</title><rect x="87.0230%" y="213" width="9.6417%" height="15" fill="rgb(205,214,31)" fg:x="549360860" fg:w="60866123"/><text x="87.2730%" y="223.50">img::png::defl..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (105,427,468 samples, 16.70%)</title><rect x="80.4978%" y="373" width="16.7005%" height="15" fill="rgb(224,111,15)" fg:x="508167975" fg:w="105427468"/><text x="80.7478%" y="383.50">core::iter::traits::iterat..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (105,427,468 samples, 16.70%)</title><rect x="80.4978%" y="357" width="16.7005%" height="15" fill="rgb(253,21,26)" fg:x="508167975" fg:w="105427468"/><text x="80.7478%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (105,427,468 samples, 16.70%)</title><rect x="80.4978%" y="341" width="16.7005%" height="15" fill="rgb(245,139,43)" fg:x="508167975" fg:w="105427468"/><text x="80.7478%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (105,427,468 samples, 16.70%)</title><rect x="80.4978%" y="325" width="16.7005%" height="15" fill="rgb(252,170,7)" fg:x="508167975" fg:w="105427468"/><text x="80.7478%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (105,427,468 samples, 16.70%)</title><rect x="80.4978%" y="309" width="16.7005%" height="15" fill="rgb(231,118,14)" fg:x="508167975" fg:w="105427468"/><text x="80.7478%" y="319.50">&lt;alloc::vec::Vec&lt;T,A&gt; as a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (105,427,468 samples, 16.70%)</title><rect x="80.4978%" y="293" width="16.7005%" height="15" fill="rgb(238,83,0)" fg:x="508167975" fg:w="105427468"/><text x="80.7478%" y="303.50">alloc::vec::Vec&lt;T,A&gt;::exte..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,368,460 samples, 0.53%)</title><rect x="96.6647%" y="277" width="0.5336%" height="15" fill="rgb(221,39,39)" fg:x="610226983" fg:w="3368460"/><text x="96.9147%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,368,460 samples, 0.53%)</title><rect x="96.6647%" y="261" width="0.5336%" height="15" fill="rgb(222,119,46)" fg:x="610226983" fg:w="3368460"/><text x="96.9147%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,368,460 samples, 0.53%)</title><rect x="96.6647%" y="245" width="0.5336%" height="15" fill="rgb(222,165,49)" fg:x="610226983" fg:w="3368460"/><text x="96.9147%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (111,926,899 samples, 17.73%)</title><rect x="80.4978%" y="389" width="17.7301%" height="15" fill="rgb(219,113,52)" fg:x="508167975" fg:w="111926899"/><text x="80.7478%" y="399.50">img::png::deflate::lzss::has..</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_chain (6,499,431 samples, 1.03%)</title><rect x="97.1983%" y="373" width="1.0296%" height="15" fill="rgb(214,7,15)" fg:x="613595443" fg:w="6499431"/><text x="97.4483%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,499,431 samples, 1.03%)</title><rect x="97.1983%" y="357" width="1.0296%" height="15" fill="rgb(235,32,4)" fg:x="613595443" fg:w="6499431"/><text x="97.4483%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,499,431 samples, 1.03%)</title><rect x="97.1983%" y="341" width="1.0296%" height="15" fill="rgb(238,90,54)" fg:x="613595443" fg:w="6499431"/><text x="97.4483%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,499,431 samples, 1.03%)</title><rect x="97.1983%" y="325" width="1.0296%" height="15" fill="rgb(213,208,19)" fg:x="613595443" fg:w="6499431"/><text x="97.4483%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (6,499,431 samples, 1.03%)</title><rect x="97.1983%" y="309" width="1.0296%" height="15" fill="rgb(233,156,4)" fg:x="613595443" fg:w="6499431"/><text x="97.4483%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,499,431 samples, 1.03%)</title><rect x="97.1983%" y="293" width="1.0296%" height="15" fill="rgb(207,194,5)" fg:x="613595443" fg:w="6499431"/><text x="97.4483%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,499,431 samples, 1.03%)</title><rect x="97.1983%" y="277" width="1.0296%" height="15" fill="rgb(206,111,30)" fg:x="613595443" fg:w="6499431"/><text x="97.4483%" y="287.50"></text></g><g><title>core::intrinsics::likely (3,138,054 samples, 0.50%)</title><rect x="97.7307%" y="261" width="0.4971%" height="15" fill="rgb(243,70,54)" fg:x="616956820" fg:w="3138054"/><text x="97.9807%" y="271.50"></text></g><g><title>core::intrinsics::likely (3,229,889 samples, 0.51%)</title><rect x="98.2278%" y="277" width="0.5116%" height="15" fill="rgb(242,28,8)" fg:x="620094874" fg:w="3229889"/><text x="98.4778%" y="287.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (6,263,367 samples, 0.99%)</title><rect x="98.2278%" y="389" width="0.9922%" height="15" fill="rgb(219,106,18)" fg:x="620094874" fg:w="6263367"/><text x="98.4778%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (6,263,367 samples, 0.99%)</title><rect x="98.2278%" y="373" width="0.9922%" height="15" fill="rgb(244,222,10)" fg:x="620094874" fg:w="6263367"/><text x="98.4778%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6,263,367 samples, 0.99%)</title><rect x="98.2278%" y="357" width="0.9922%" height="15" fill="rgb(236,179,52)" fg:x="620094874" fg:w="6263367"/><text x="98.4778%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (6,263,367 samples, 0.99%)</title><rect x="98.2278%" y="341" width="0.9922%" height="15" fill="rgb(213,23,39)" fg:x="620094874" fg:w="6263367"/><text x="98.4778%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (6,263,367 samples, 0.99%)</title><rect x="98.2278%" y="325" width="0.9922%" height="15" fill="rgb(238,48,10)" fg:x="620094874" fg:w="6263367"/><text x="98.4778%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6,263,367 samples, 0.99%)</title><rect x="98.2278%" y="309" width="0.9922%" height="15" fill="rgb(251,196,23)" fg:x="620094874" fg:w="6263367"/><text x="98.4778%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6,263,367 samples, 0.99%)</title><rect x="98.2278%" y="293" width="0.9922%" height="15" fill="rgb(250,152,24)" fg:x="620094874" fg:w="6263367"/><text x="98.4778%" y="303.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,033,478 samples, 0.48%)</title><rect x="98.7395%" y="277" width="0.4805%" height="15" fill="rgb(209,150,17)" fg:x="623324763" fg:w="3033478"/><text x="98.9895%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,033,478 samples, 0.48%)</title><rect x="98.7395%" y="261" width="0.4805%" height="15" fill="rgb(234,202,34)" fg:x="623324763" fg:w="3033478"/><text x="98.9895%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (854,855 samples, 0.14%)</title><rect x="99.2200%" y="389" width="0.1354%" height="15" fill="rgb(253,148,53)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (854,855 samples, 0.14%)</title><rect x="99.2200%" y="373" width="0.1354%" height="15" fill="rgb(218,129,16)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (854,855 samples, 0.14%)</title><rect x="99.2200%" y="357" width="0.1354%" height="15" fill="rgb(216,85,19)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (854,855 samples, 0.14%)</title><rect x="99.2200%" y="341" width="0.1354%" height="15" fill="rgb(235,228,7)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (854,855 samples, 0.14%)</title><rect x="99.2200%" y="325" width="0.1354%" height="15" fill="rgb(245,175,0)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (854,855 samples, 0.14%)</title><rect x="99.2200%" y="309" width="0.1354%" height="15" fill="rgb(208,168,36)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (854,855 samples, 0.14%)</title><rect x="99.2200%" y="293" width="0.1354%" height="15" fill="rgb(246,171,24)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (854,855 samples, 0.14%)</title><rect x="99.2200%" y="277" width="0.1354%" height="15" fill="rgb(215,142,24)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="287.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (854,855 samples, 0.14%)</title><rect x="99.2200%" y="261" width="0.1354%" height="15" fill="rgb(250,187,7)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::number_of_matching_bytes (854,855 samples, 0.14%)</title><rect x="99.2200%" y="245" width="0.1354%" height="15" fill="rgb(228,66,33)" fg:x="626358241" fg:w="854855"/><text x="99.4700%" y="255.50"></text></g><g><title>all (631,282,196 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(234,215,21)" fg:x="0" fg:w="631282196"/><text x="0.2500%" y="431.50"></text></g><g><title>img (631,282,196 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(222,191,20)" fg:x="0" fg:w="631282196"/><text x="0.2500%" y="415.50">img</text></g><g><title>img::png::deflate::prefix_table::CLCode::encode (4,069,100 samples, 0.64%)</title><rect x="99.3554%" y="389" width="0.6446%" height="15" fill="rgb(245,79,54)" fg:x="627213096" fg:w="4069100"/><text x="99.6054%" y="399.50"></text></g></svg></svg>