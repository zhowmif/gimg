<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="43703743746"><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8,192,326 samples, 0.02%)</title><rect x="0.0000%" y="341" width="0.0187%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8192326"/><text x="0.2500%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8,192,326 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0187%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="8192326"/><text x="0.2500%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (8,192,326 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0187%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="8192326"/><text x="0.2500%" y="319.50"></text></g><g><title>[unknown] (8,192,326 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0187%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="8192326"/><text x="0.2500%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (8,192,326 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0187%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="8192326"/><text x="0.2500%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41,195,604 samples, 0.09%)</title><rect x="0.0377%" y="181" width="0.0943%" height="15" fill="rgb(232,128,0)" fg:x="16457733" fg:w="41195604"/><text x="0.2877%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41,195,604 samples, 0.09%)</title><rect x="0.0377%" y="165" width="0.0943%" height="15" fill="rgb(207,160,47)" fg:x="16457733" fg:w="41195604"/><text x="0.2877%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (41,195,604 samples, 0.09%)</title><rect x="0.0377%" y="149" width="0.0943%" height="15" fill="rgb(228,23,34)" fg:x="16457733" fg:w="41195604"/><text x="0.2877%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (41,195,604 samples, 0.09%)</title><rect x="0.0377%" y="133" width="0.0943%" height="15" fill="rgb(218,30,26)" fg:x="16457733" fg:w="41195604"/><text x="0.2877%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41,195,604 samples, 0.09%)</title><rect x="0.0377%" y="117" width="0.0943%" height="15" fill="rgb(220,122,19)" fg:x="16457733" fg:w="41195604"/><text x="0.2877%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41,195,604 samples, 0.09%)</title><rect x="0.0377%" y="101" width="0.0943%" height="15" fill="rgb(250,228,42)" fg:x="16457733" fg:w="41195604"/><text x="0.2877%" y="111.50"></text></g><g><title>alloc::alloc::alloc (41,195,604 samples, 0.09%)</title><rect x="0.0377%" y="85" width="0.0943%" height="15" fill="rgb(240,193,28)" fg:x="16457733" fg:w="41195604"/><text x="0.2877%" y="95.50"></text></g><g><title>malloc (41,195,604 samples, 0.09%)</title><rect x="0.0377%" y="69" width="0.0943%" height="15" fill="rgb(216,20,37)" fg:x="16457733" fg:w="41195604"/><text x="0.2877%" y="79.50"></text></g><g><title>[libc.so.6] (28,787,362 samples, 0.07%)</title><rect x="0.0660%" y="53" width="0.0659%" height="15" fill="rgb(206,188,39)" fg:x="28865975" fg:w="28787362"/><text x="0.3160%" y="63.50"></text></g><g><title>[libc.so.6] (8,199,247 samples, 0.02%)</title><rect x="0.1132%" y="37" width="0.0188%" height="15" fill="rgb(217,207,13)" fg:x="49454090" fg:w="8199247"/><text x="0.3632%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (69,969,349 samples, 0.16%)</title><rect x="0.0000%" y="389" width="0.1601%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="69969349"/><text x="0.2500%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (69,969,349 samples, 0.16%)</title><rect x="0.0000%" y="373" width="0.1601%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="69969349"/><text x="0.2500%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (69,969,349 samples, 0.16%)</title><rect x="0.0000%" y="357" width="0.1601%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="69969349"/><text x="0.2500%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (61,777,023 samples, 0.14%)</title><rect x="0.0187%" y="341" width="0.1414%" height="15" fill="rgb(221,200,47)" fg:x="8192326" fg:w="61777023"/><text x="0.2687%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,777,023 samples, 0.14%)</title><rect x="0.0187%" y="325" width="0.1414%" height="15" fill="rgb(226,26,5)" fg:x="8192326" fg:w="61777023"/><text x="0.2687%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,777,023 samples, 0.14%)</title><rect x="0.0187%" y="309" width="0.1414%" height="15" fill="rgb(249,33,26)" fg:x="8192326" fg:w="61777023"/><text x="0.2687%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,777,023 samples, 0.14%)</title><rect x="0.0187%" y="293" width="0.1414%" height="15" fill="rgb(235,183,28)" fg:x="8192326" fg:w="61777023"/><text x="0.2687%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (61,777,023 samples, 0.14%)</title><rect x="0.0187%" y="277" width="0.1414%" height="15" fill="rgb(221,5,38)" fg:x="8192326" fg:w="61777023"/><text x="0.2687%" y="287.50"></text></g><g><title>core::ops::function::FnMut::call_mut (61,777,023 samples, 0.14%)</title><rect x="0.0187%" y="261" width="0.1414%" height="15" fill="rgb(247,18,42)" fg:x="8192326" fg:w="61777023"/><text x="0.2687%" y="271.50"></text></g><g><title>core::clone::Clone::clone (61,777,023 samples, 0.14%)</title><rect x="0.0187%" y="245" width="0.1414%" height="15" fill="rgb(241,131,45)" fg:x="8192326" fg:w="61777023"/><text x="0.2687%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (53,511,616 samples, 0.12%)</title><rect x="0.0377%" y="229" width="0.1224%" height="15" fill="rgb(249,31,29)" fg:x="16457733" fg:w="53511616"/><text x="0.2877%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (53,511,616 samples, 0.12%)</title><rect x="0.0377%" y="213" width="0.1224%" height="15" fill="rgb(225,111,53)" fg:x="16457733" fg:w="53511616"/><text x="0.2877%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (53,511,616 samples, 0.12%)</title><rect x="0.0377%" y="197" width="0.1224%" height="15" fill="rgb(238,160,17)" fg:x="16457733" fg:w="53511616"/><text x="0.2877%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12,316,012 samples, 0.03%)</title><rect x="0.1319%" y="181" width="0.0282%" height="15" fill="rgb(214,148,48)" fg:x="57653337" fg:w="12316012"/><text x="0.3819%" y="191.50"></text></g><g><title>core::ptr::copy_nonoverlapping (12,316,012 samples, 0.03%)</title><rect x="0.1319%" y="165" width="0.0282%" height="15" fill="rgb(232,36,49)" fg:x="57653337" fg:w="12316012"/><text x="0.3819%" y="175.50"></text></g><g><title>[libc.so.6] (12,316,012 samples, 0.03%)</title><rect x="0.1319%" y="149" width="0.0282%" height="15" fill="rgb(209,103,24)" fg:x="57653337" fg:w="12316012"/><text x="0.3819%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20,504,054 samples, 0.05%)</title><rect x="0.1601%" y="341" width="0.0469%" height="15" fill="rgb(229,88,8)" fg:x="69969349" fg:w="20504054"/><text x="0.4101%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20,504,054 samples, 0.05%)</title><rect x="0.1601%" y="325" width="0.0469%" height="15" fill="rgb(213,181,19)" fg:x="69969349" fg:w="20504054"/><text x="0.4101%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (20,504,054 samples, 0.05%)</title><rect x="0.1601%" y="309" width="0.0469%" height="15" fill="rgb(254,191,54)" fg:x="69969349" fg:w="20504054"/><text x="0.4101%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (20,504,054 samples, 0.05%)</title><rect x="0.1601%" y="293" width="0.0469%" height="15" fill="rgb(241,83,37)" fg:x="69969349" fg:w="20504054"/><text x="0.4101%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20,504,054 samples, 0.05%)</title><rect x="0.1601%" y="277" width="0.0469%" height="15" fill="rgb(233,36,39)" fg:x="69969349" fg:w="20504054"/><text x="0.4101%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20,504,054 samples, 0.05%)</title><rect x="0.1601%" y="261" width="0.0469%" height="15" fill="rgb(226,3,54)" fg:x="69969349" fg:w="20504054"/><text x="0.4101%" y="271.50"></text></g><g><title>alloc::alloc::alloc (20,504,054 samples, 0.05%)</title><rect x="0.1601%" y="245" width="0.0469%" height="15" fill="rgb(245,192,40)" fg:x="69969349" fg:w="20504054"/><text x="0.4101%" y="255.50"></text></g><g><title>malloc (20,504,054 samples, 0.05%)</title><rect x="0.1601%" y="229" width="0.0469%" height="15" fill="rgb(238,167,29)" fg:x="69969349" fg:w="20504054"/><text x="0.4101%" y="239.50"></text></g><g><title>[libc.so.6] (20,504,054 samples, 0.05%)</title><rect x="0.1601%" y="213" width="0.0469%" height="15" fill="rgb(232,182,51)" fg:x="69969349" fg:w="20504054"/><text x="0.4101%" y="223.50"></text></g><g><title>[libc.so.6] (16,379,871 samples, 0.04%)</title><rect x="0.1695%" y="197" width="0.0375%" height="15" fill="rgb(231,60,39)" fg:x="74093532" fg:w="16379871"/><text x="0.4195%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (44,644,335 samples, 0.10%)</title><rect x="0.2165%" y="277" width="0.1022%" height="15" fill="rgb(208,69,12)" fg:x="94609755" fg:w="44644335"/><text x="0.4665%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (44,644,335 samples, 0.10%)</title><rect x="0.2165%" y="261" width="0.1022%" height="15" fill="rgb(235,93,37)" fg:x="94609755" fg:w="44644335"/><text x="0.4665%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (44,644,335 samples, 0.10%)</title><rect x="0.2165%" y="245" width="0.1022%" height="15" fill="rgb(213,116,39)" fg:x="94609755" fg:w="44644335"/><text x="0.4665%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (44,644,335 samples, 0.10%)</title><rect x="0.2165%" y="229" width="0.1022%" height="15" fill="rgb(222,207,29)" fg:x="94609755" fg:w="44644335"/><text x="0.4665%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44,644,335 samples, 0.10%)</title><rect x="0.2165%" y="213" width="0.1022%" height="15" fill="rgb(206,96,30)" fg:x="94609755" fg:w="44644335"/><text x="0.4665%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44,644,335 samples, 0.10%)</title><rect x="0.2165%" y="197" width="0.1022%" height="15" fill="rgb(218,138,4)" fg:x="94609755" fg:w="44644335"/><text x="0.4665%" y="207.50"></text></g><g><title>alloc::alloc::alloc (44,644,335 samples, 0.10%)</title><rect x="0.2165%" y="181" width="0.1022%" height="15" fill="rgb(250,191,14)" fg:x="94609755" fg:w="44644335"/><text x="0.4665%" y="191.50"></text></g><g><title>malloc (44,644,335 samples, 0.10%)</title><rect x="0.2165%" y="165" width="0.1022%" height="15" fill="rgb(239,60,40)" fg:x="94609755" fg:w="44644335"/><text x="0.4665%" y="175.50"></text></g><g><title>[libc.so.6] (16,392,029 samples, 0.04%)</title><rect x="0.2811%" y="149" width="0.0375%" height="15" fill="rgb(206,27,48)" fg:x="122862061" fg:w="16392029"/><text x="0.5311%" y="159.50"></text></g><g><title>core::clone::Clone::clone (52,884,501 samples, 0.12%)</title><rect x="0.2070%" y="341" width="0.1210%" height="15" fill="rgb(225,35,8)" fg:x="90473403" fg:w="52884501"/><text x="0.4570%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (48,748,149 samples, 0.11%)</title><rect x="0.2165%" y="325" width="0.1115%" height="15" fill="rgb(250,213,24)" fg:x="94609755" fg:w="48748149"/><text x="0.4665%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (48,748,149 samples, 0.11%)</title><rect x="0.2165%" y="309" width="0.1115%" height="15" fill="rgb(247,123,22)" fg:x="94609755" fg:w="48748149"/><text x="0.4665%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (48,748,149 samples, 0.11%)</title><rect x="0.2165%" y="293" width="0.1115%" height="15" fill="rgb(231,138,38)" fg:x="94609755" fg:w="48748149"/><text x="0.4665%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (77,525,633 samples, 0.18%)</title><rect x="0.1601%" y="389" width="0.1774%" height="15" fill="rgb(231,145,46)" fg:x="69969349" fg:w="77525633"/><text x="0.4101%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (77,525,633 samples, 0.18%)</title><rect x="0.1601%" y="373" width="0.1774%" height="15" fill="rgb(251,118,11)" fg:x="69969349" fg:w="77525633"/><text x="0.4101%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (77,525,633 samples, 0.18%)</title><rect x="0.1601%" y="357" width="0.1774%" height="15" fill="rgb(217,147,25)" fg:x="69969349" fg:w="77525633"/><text x="0.4101%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28,818,907 samples, 0.07%)</title><rect x="0.4126%" y="165" width="0.0659%" height="15" fill="rgb(247,81,37)" fg:x="180309646" fg:w="28818907"/><text x="0.6626%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (28,818,907 samples, 0.07%)</title><rect x="0.4126%" y="149" width="0.0659%" height="15" fill="rgb(209,12,38)" fg:x="180309646" fg:w="28818907"/><text x="0.6626%" y="159.50"></text></g><g><title>cfree (24,663,710 samples, 0.06%)</title><rect x="0.4221%" y="133" width="0.0564%" height="15" fill="rgb(227,1,9)" fg:x="184464843" fg:w="24663710"/><text x="0.6721%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (37,023,876 samples, 0.08%)</title><rect x="0.4126%" y="277" width="0.0847%" height="15" fill="rgb(248,47,43)" fg:x="180309646" fg:w="37023876"/><text x="0.6626%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,023,876 samples, 0.08%)</title><rect x="0.4126%" y="261" width="0.0847%" height="15" fill="rgb(221,10,30)" fg:x="180309646" fg:w="37023876"/><text x="0.6626%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (37,023,876 samples, 0.08%)</title><rect x="0.4126%" y="245" width="0.0847%" height="15" fill="rgb(210,229,1)" fg:x="180309646" fg:w="37023876"/><text x="0.6626%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,023,876 samples, 0.08%)</title><rect x="0.4126%" y="229" width="0.0847%" height="15" fill="rgb(222,148,37)" fg:x="180309646" fg:w="37023876"/><text x="0.6626%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (37,023,876 samples, 0.08%)</title><rect x="0.4126%" y="213" width="0.0847%" height="15" fill="rgb(234,67,33)" fg:x="180309646" fg:w="37023876"/><text x="0.6626%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,023,876 samples, 0.08%)</title><rect x="0.4126%" y="197" width="0.0847%" height="15" fill="rgb(247,98,35)" fg:x="180309646" fg:w="37023876"/><text x="0.6626%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (37,023,876 samples, 0.08%)</title><rect x="0.4126%" y="181" width="0.0847%" height="15" fill="rgb(247,138,52)" fg:x="180309646" fg:w="37023876"/><text x="0.6626%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (8,204,969 samples, 0.02%)</title><rect x="0.4785%" y="165" width="0.0188%" height="15" fill="rgb(213,79,30)" fg:x="209128553" fg:w="8204969"/><text x="0.7285%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (41,156,549 samples, 0.09%)</title><rect x="0.4126%" y="309" width="0.0942%" height="15" fill="rgb(246,177,23)" fg:x="180309646" fg:w="41156549"/><text x="0.6626%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (41,156,549 samples, 0.09%)</title><rect x="0.4126%" y="293" width="0.0942%" height="15" fill="rgb(230,62,27)" fg:x="180309646" fg:w="41156549"/><text x="0.6626%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8,257,464 samples, 0.02%)</title><rect x="0.5540%" y="293" width="0.0189%" height="15" fill="rgb(216,154,8)" fg:x="242105132" fg:w="8257464"/><text x="0.8040%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (8,257,464 samples, 0.02%)</title><rect x="0.5540%" y="277" width="0.0189%" height="15" fill="rgb(244,35,45)" fg:x="242105132" fg:w="8257464"/><text x="0.8040%" y="287.50"></text></g><g><title>core::ptr::write (8,257,464 samples, 0.02%)</title><rect x="0.5540%" y="261" width="0.0189%" height="15" fill="rgb(251,115,12)" fg:x="242105132" fg:w="8257464"/><text x="0.8040%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (73,971,388 samples, 0.17%)</title><rect x="0.5729%" y="293" width="0.1693%" height="15" fill="rgb(240,54,50)" fg:x="250362596" fg:w="73971388"/><text x="0.8229%" y="303.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73,971,388 samples, 0.17%)</title><rect x="0.5729%" y="277" width="0.1693%" height="15" fill="rgb(233,84,52)" fg:x="250362596" fg:w="73971388"/><text x="0.8229%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (73,971,388 samples, 0.17%)</title><rect x="0.5729%" y="261" width="0.1693%" height="15" fill="rgb(207,117,47)" fg:x="250362596" fg:w="73971388"/><text x="0.8229%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73,971,388 samples, 0.17%)</title><rect x="0.5729%" y="245" width="0.1693%" height="15" fill="rgb(249,43,39)" fg:x="250362596" fg:w="73971388"/><text x="0.8229%" y="255.50"></text></g><g><title>core::ptr::copy (73,971,388 samples, 0.17%)</title><rect x="0.5729%" y="229" width="0.1693%" height="15" fill="rgb(209,38,44)" fg:x="250362596" fg:w="73971388"/><text x="0.8229%" y="239.50"></text></g><g><title>[libc.so.6] (73,971,388 samples, 0.17%)</title><rect x="0.5729%" y="213" width="0.1693%" height="15" fill="rgb(236,212,23)" fg:x="250362596" fg:w="73971388"/><text x="0.8229%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (160,244,180 samples, 0.37%)</title><rect x="0.3845%" y="357" width="0.3667%" height="15" fill="rgb(242,79,21)" fg:x="168044828" fg:w="160244180"/><text x="0.6345%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (160,244,180 samples, 0.37%)</title><rect x="0.3845%" y="341" width="0.3667%" height="15" fill="rgb(211,96,35)" fg:x="168044828" fg:w="160244180"/><text x="0.6345%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (147,979,362 samples, 0.34%)</title><rect x="0.4126%" y="325" width="0.3386%" height="15" fill="rgb(253,215,40)" fg:x="180309646" fg:w="147979362"/><text x="0.6626%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (102,740,312 samples, 0.24%)</title><rect x="0.5161%" y="309" width="0.2351%" height="15" fill="rgb(211,81,21)" fg:x="225548696" fg:w="102740312"/><text x="0.7661%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (8,235,328 samples, 0.02%)</title><rect x="0.7512%" y="357" width="0.0188%" height="15" fill="rgb(208,190,38)" fg:x="328289008" fg:w="8235328"/><text x="1.0012%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (234,377,245 samples, 0.54%)</title><rect x="0.3375%" y="389" width="0.5363%" height="15" fill="rgb(235,213,38)" fg:x="147494982" fg:w="234377245"/><text x="0.5875%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (234,377,245 samples, 0.54%)</title><rect x="0.3375%" y="373" width="0.5363%" height="15" fill="rgb(237,122,38)" fg:x="147494982" fg:w="234377245"/><text x="0.5875%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (45,347,891 samples, 0.10%)</title><rect x="0.7700%" y="357" width="0.1038%" height="15" fill="rgb(244,218,35)" fg:x="336524336" fg:w="45347891"/><text x="1.0200%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (45,347,891 samples, 0.10%)</title><rect x="0.7700%" y="341" width="0.1038%" height="15" fill="rgb(240,68,47)" fg:x="336524336" fg:w="45347891"/><text x="1.0200%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41,269,513 samples, 0.09%)</title><rect x="0.7793%" y="325" width="0.0944%" height="15" fill="rgb(210,16,53)" fg:x="340602714" fg:w="41269513"/><text x="1.0293%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (41,269,513 samples, 0.09%)</title><rect x="0.7793%" y="309" width="0.0944%" height="15" fill="rgb(235,124,12)" fg:x="340602714" fg:w="41269513"/><text x="1.0293%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (41,269,513 samples, 0.09%)</title><rect x="0.7793%" y="293" width="0.0944%" height="15" fill="rgb(224,169,11)" fg:x="340602714" fg:w="41269513"/><text x="1.0293%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41,269,513 samples, 0.09%)</title><rect x="0.7793%" y="277" width="0.0944%" height="15" fill="rgb(250,166,2)" fg:x="340602714" fg:w="41269513"/><text x="1.0293%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41,269,513 samples, 0.09%)</title><rect x="0.7793%" y="261" width="0.0944%" height="15" fill="rgb(242,216,29)" fg:x="340602714" fg:w="41269513"/><text x="1.0293%" y="271.50"></text></g><g><title>alloc::alloc::alloc (41,269,513 samples, 0.09%)</title><rect x="0.7793%" y="245" width="0.0944%" height="15" fill="rgb(230,116,27)" fg:x="340602714" fg:w="41269513"/><text x="1.0293%" y="255.50"></text></g><g><title>malloc (41,269,513 samples, 0.09%)</title><rect x="0.7793%" y="229" width="0.0944%" height="15" fill="rgb(228,99,48)" fg:x="340602714" fg:w="41269513"/><text x="1.0293%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,245,657 samples, 0.02%)</title><rect x="0.8738%" y="389" width="0.0189%" height="15" fill="rgb(253,11,6)" fg:x="381872227" fg:w="8245657"/><text x="1.1238%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8,245,657 samples, 0.02%)</title><rect x="0.8738%" y="373" width="0.0189%" height="15" fill="rgb(247,143,39)" fg:x="381872227" fg:w="8245657"/><text x="1.1238%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths::_{{closure}} (8,245,657 samples, 0.02%)</title><rect x="0.8738%" y="357" width="0.0189%" height="15" fill="rgb(236,97,10)" fg:x="381872227" fg:w="8245657"/><text x="1.1238%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (8,245,657 samples, 0.02%)</title><rect x="0.8738%" y="341" width="0.0189%" height="15" fill="rgb(233,208,19)" fg:x="381872227" fg:w="8245657"/><text x="1.1238%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8,245,657 samples, 0.02%)</title><rect x="0.8738%" y="325" width="0.0189%" height="15" fill="rgb(216,164,2)" fg:x="381872227" fg:w="8245657"/><text x="1.1238%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8,245,657 samples, 0.02%)</title><rect x="0.8738%" y="309" width="0.0189%" height="15" fill="rgb(220,129,5)" fg:x="381872227" fg:w="8245657"/><text x="1.1238%" y="319.50"></text></g><g><title>alloc::alloc::alloc (8,245,657 samples, 0.02%)</title><rect x="0.8738%" y="293" width="0.0189%" height="15" fill="rgb(242,17,10)" fg:x="381872227" fg:w="8245657"/><text x="1.1238%" y="303.50"></text></g><g><title>malloc (8,245,657 samples, 0.02%)</title><rect x="0.8738%" y="277" width="0.0189%" height="15" fill="rgb(242,107,0)" fg:x="381872227" fg:w="8245657"/><text x="1.1238%" y="287.50"></text></g><g><title>[libc.so.6] (8,245,657 samples, 0.02%)</title><rect x="0.8738%" y="261" width="0.0189%" height="15" fill="rgb(251,28,31)" fg:x="381872227" fg:w="8245657"/><text x="1.1238%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,137,883 samples, 0.01%)</title><rect x="0.8926%" y="389" width="0.0118%" height="15" fill="rgb(233,223,10)" fg:x="390117884" fg:w="5137883"/><text x="1.1426%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (20,494,957 samples, 0.05%)</title><rect x="0.9044%" y="389" width="0.0469%" height="15" fill="rgb(215,21,27)" fg:x="395255767" fg:w="20494957"/><text x="1.1544%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20,494,957 samples, 0.05%)</title><rect x="0.9044%" y="373" width="0.0469%" height="15" fill="rgb(232,23,21)" fg:x="395255767" fg:w="20494957"/><text x="1.1544%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20,494,957 samples, 0.05%)</title><rect x="0.9044%" y="357" width="0.0469%" height="15" fill="rgb(244,5,23)" fg:x="395255767" fg:w="20494957"/><text x="1.1544%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (16,441,868 samples, 0.04%)</title><rect x="0.9137%" y="341" width="0.0376%" height="15" fill="rgb(226,81,46)" fg:x="399308856" fg:w="16441868"/><text x="1.1637%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="373" width="0.0188%" height="15" fill="rgb(247,70,30)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="357" width="0.0188%" height="15" fill="rgb(212,68,19)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="341" width="0.0188%" height="15" fill="rgb(240,187,13)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="351.50"></text></g><g><title>core::clone::Clone::clone (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="325" width="0.0188%" height="15" fill="rgb(223,113,26)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="309" width="0.0188%" height="15" fill="rgb(206,192,2)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="293" width="0.0188%" height="15" fill="rgb(241,108,4)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="277" width="0.0188%" height="15" fill="rgb(247,173,49)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="261" width="0.0188%" height="15" fill="rgb(224,114,35)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="245" width="0.0188%" height="15" fill="rgb(245,159,27)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="229" width="0.0188%" height="15" fill="rgb(245,172,44)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="213" width="0.0188%" height="15" fill="rgb(236,23,11)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="197" width="0.0188%" height="15" fill="rgb(205,117,38)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="181" width="0.0188%" height="15" fill="rgb(237,72,25)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="191.50"></text></g><g><title>alloc::alloc::alloc (8,229,432 samples, 0.02%)</title><rect x="0.9513%" y="165" width="0.0188%" height="15" fill="rgb(244,70,9)" fg:x="415750724" fg:w="8229432"/><text x="1.2013%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,219,744 samples, 0.02%)</title><rect x="0.9984%" y="293" width="0.0188%" height="15" fill="rgb(217,125,39)" fg:x="436321871" fg:w="8219744"/><text x="1.2484%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,219,744 samples, 0.02%)</title><rect x="0.9984%" y="277" width="0.0188%" height="15" fill="rgb(235,36,10)" fg:x="436321871" fg:w="8219744"/><text x="1.2484%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24,671,149 samples, 0.06%)</title><rect x="0.9701%" y="373" width="0.0565%" height="15" fill="rgb(251,123,47)" fg:x="423980156" fg:w="24671149"/><text x="1.2201%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (24,671,149 samples, 0.06%)</title><rect x="0.9701%" y="357" width="0.0565%" height="15" fill="rgb(221,13,13)" fg:x="423980156" fg:w="24671149"/><text x="1.2201%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16,458,677 samples, 0.04%)</title><rect x="0.9889%" y="341" width="0.0377%" height="15" fill="rgb(238,131,9)" fg:x="432192628" fg:w="16458677"/><text x="1.2389%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (12,329,434 samples, 0.03%)</title><rect x="0.9984%" y="325" width="0.0282%" height="15" fill="rgb(211,50,8)" fg:x="436321871" fg:w="12329434"/><text x="1.2484%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12,329,434 samples, 0.03%)</title><rect x="0.9984%" y="309" width="0.0282%" height="15" fill="rgb(245,182,24)" fg:x="436321871" fg:w="12329434"/><text x="1.2484%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20,562,091 samples, 0.05%)</title><rect x="1.0266%" y="373" width="0.0470%" height="15" fill="rgb(242,14,37)" fg:x="448651305" fg:w="20562091"/><text x="1.2766%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (20,562,091 samples, 0.05%)</title><rect x="1.0266%" y="357" width="0.0470%" height="15" fill="rgb(246,228,12)" fg:x="448651305" fg:w="20562091"/><text x="1.2766%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths::_{{closure}} (16,425,405 samples, 0.04%)</title><rect x="1.0360%" y="341" width="0.0376%" height="15" fill="rgb(213,55,15)" fg:x="452787991" fg:w="16425405"/><text x="1.2860%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (16,425,405 samples, 0.04%)</title><rect x="1.0360%" y="325" width="0.0376%" height="15" fill="rgb(209,9,3)" fg:x="452787991" fg:w="16425405"/><text x="1.2860%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (16,425,405 samples, 0.04%)</title><rect x="1.0360%" y="309" width="0.0376%" height="15" fill="rgb(230,59,30)" fg:x="452787991" fg:w="16425405"/><text x="1.2860%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (16,425,405 samples, 0.04%)</title><rect x="1.0360%" y="293" width="0.0376%" height="15" fill="rgb(209,121,21)" fg:x="452787991" fg:w="16425405"/><text x="1.2860%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16,425,405 samples, 0.04%)</title><rect x="1.0360%" y="277" width="0.0376%" height="15" fill="rgb(220,109,13)" fg:x="452787991" fg:w="16425405"/><text x="1.2860%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16,425,405 samples, 0.04%)</title><rect x="1.0360%" y="261" width="0.0376%" height="15" fill="rgb(232,18,1)" fg:x="452787991" fg:w="16425405"/><text x="1.2860%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (20,236,095 samples, 0.05%)</title><rect x="1.0736%" y="373" width="0.0463%" height="15" fill="rgb(215,41,42)" fg:x="469213396" fg:w="20236095"/><text x="1.3236%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20,236,095 samples, 0.05%)</title><rect x="1.0736%" y="357" width="0.0463%" height="15" fill="rgb(224,123,36)" fg:x="469213396" fg:w="20236095"/><text x="1.3236%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20,236,095 samples, 0.05%)</title><rect x="1.0736%" y="341" width="0.0463%" height="15" fill="rgb(240,125,3)" fg:x="469213396" fg:w="20236095"/><text x="1.3236%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (11,492,708 samples, 0.03%)</title><rect x="1.1286%" y="325" width="0.0263%" height="15" fill="rgb(205,98,50)" fg:x="493252962" fg:w="11492708"/><text x="1.3786%" y="335.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (11,492,708 samples, 0.03%)</title><rect x="1.1286%" y="309" width="0.0263%" height="15" fill="rgb(205,185,37)" fg:x="493252962" fg:w="11492708"/><text x="1.3786%" y="319.50"></text></g><g><title>core::ptr::read (7,393,067 samples, 0.02%)</title><rect x="1.1380%" y="293" width="0.0169%" height="15" fill="rgb(238,207,15)" fg:x="497352603" fg:w="7393067"/><text x="1.3880%" y="303.50"></text></g><g><title>[img] (27,576,889 samples, 0.06%)</title><rect x="1.1199%" y="373" width="0.0631%" height="15" fill="rgb(213,199,42)" fg:x="489449491" fg:w="27576889"/><text x="1.3699%" y="383.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (27,576,889 samples, 0.06%)</title><rect x="1.1199%" y="357" width="0.0631%" height="15" fill="rgb(235,201,11)" fg:x="489449491" fg:w="27576889"/><text x="1.3699%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (23,773,418 samples, 0.05%)</title><rect x="1.1286%" y="341" width="0.0544%" height="15" fill="rgb(207,46,11)" fg:x="493252962" fg:w="23773418"/><text x="1.3786%" y="351.50"></text></g><g><title>[unknown] (8,178,700 samples, 0.02%)</title><rect x="1.1830%" y="373" width="0.0187%" height="15" fill="rgb(241,35,35)" fg:x="517026380" fg:w="8178700"/><text x="1.4330%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (8,178,700 samples, 0.02%)</title><rect x="1.1830%" y="357" width="0.0187%" height="15" fill="rgb(243,32,47)" fg:x="517026380" fg:w="8178700"/><text x="1.4330%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (8,178,700 samples, 0.02%)</title><rect x="1.1830%" y="341" width="0.0187%" height="15" fill="rgb(247,202,23)" fg:x="517026380" fg:w="8178700"/><text x="1.4330%" y="351.50"></text></g><g><title>__rustc::__rust_alloc (8,292,473 samples, 0.02%)</title><rect x="1.2017%" y="373" width="0.0190%" height="15" fill="rgb(219,102,11)" fg:x="525205080" fg:w="8292473"/><text x="1.4517%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12,309,191 samples, 0.03%)</title><rect x="1.2396%" y="309" width="0.0282%" height="15" fill="rgb(243,110,44)" fg:x="541749935" fg:w="12309191"/><text x="1.4896%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,248,677 samples, 0.02%)</title><rect x="1.2489%" y="293" width="0.0189%" height="15" fill="rgb(222,74,54)" fg:x="545810449" fg:w="8248677"/><text x="1.4989%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,181,712 samples, 0.02%)</title><rect x="1.2866%" y="293" width="0.0187%" height="15" fill="rgb(216,99,12)" fg:x="562288218" fg:w="8181712"/><text x="1.5366%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (41,030,115 samples, 0.09%)</title><rect x="1.2302%" y="357" width="0.0939%" height="15" fill="rgb(226,22,26)" fg:x="537636872" fg:w="41030115"/><text x="1.4802%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (41,030,115 samples, 0.09%)</title><rect x="1.2302%" y="341" width="0.0939%" height="15" fill="rgb(217,163,10)" fg:x="537636872" fg:w="41030115"/><text x="1.4802%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (41,030,115 samples, 0.09%)</title><rect x="1.2302%" y="325" width="0.0939%" height="15" fill="rgb(213,25,53)" fg:x="537636872" fg:w="41030115"/><text x="1.4802%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (24,607,861 samples, 0.06%)</title><rect x="1.2678%" y="309" width="0.0563%" height="15" fill="rgb(252,105,26)" fg:x="554059126" fg:w="24607861"/><text x="1.5178%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,197,057 samples, 0.02%)</title><rect x="1.3053%" y="293" width="0.0188%" height="15" fill="rgb(220,39,43)" fg:x="570469930" fg:w="8197057"/><text x="1.5553%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (57,477,321 samples, 0.13%)</title><rect x="1.2302%" y="373" width="0.1315%" height="15" fill="rgb(229,68,48)" fg:x="537636872" fg:w="57477321"/><text x="1.4802%" y="383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (16,447,206 samples, 0.04%)</title><rect x="1.3241%" y="357" width="0.0376%" height="15" fill="rgb(252,8,32)" fg:x="578666987" fg:w="16447206"/><text x="1.5741%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (16,447,206 samples, 0.04%)</title><rect x="1.3241%" y="341" width="0.0376%" height="15" fill="rgb(223,20,43)" fg:x="578666987" fg:w="16447206"/><text x="1.5741%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (16,447,206 samples, 0.04%)</title><rect x="1.3241%" y="325" width="0.0376%" height="15" fill="rgb(229,81,49)" fg:x="578666987" fg:w="16447206"/><text x="1.5741%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (16,447,206 samples, 0.04%)</title><rect x="1.3241%" y="309" width="0.0376%" height="15" fill="rgb(236,28,36)" fg:x="578666987" fg:w="16447206"/><text x="1.5741%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (12,279,931 samples, 0.03%)</title><rect x="1.3710%" y="373" width="0.0281%" height="15" fill="rgb(249,185,26)" fg:x="599196278" fg:w="12279931"/><text x="1.6210%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (12,279,931 samples, 0.03%)</title><rect x="1.3710%" y="357" width="0.0281%" height="15" fill="rgb(249,174,33)" fg:x="599196278" fg:w="12279931"/><text x="1.6210%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (8,234,846 samples, 0.02%)</title><rect x="1.3991%" y="357" width="0.0188%" height="15" fill="rgb(233,201,37)" fg:x="611476209" fg:w="8234846"/><text x="1.6491%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (12,286,785 samples, 0.03%)</title><rect x="1.3991%" y="373" width="0.0281%" height="15" fill="rgb(221,78,26)" fg:x="611476209" fg:w="12286785"/><text x="1.6491%" y="383.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (7,488,313 samples, 0.02%)</title><rect x="1.4273%" y="357" width="0.0171%" height="15" fill="rgb(250,127,30)" fg:x="623762994" fg:w="7488313"/><text x="1.6773%" y="367.50"></text></g><g><title>core::slice::sort::stable::merge::merge (7,488,313 samples, 0.02%)</title><rect x="1.4273%" y="341" width="0.0171%" height="15" fill="rgb(230,49,44)" fg:x="623762994" fg:w="7488313"/><text x="1.6773%" y="351.50"></text></g><g><title>core::slice::sort::stable::drift::sort (15,729,524 samples, 0.04%)</title><rect x="1.4273%" y="373" width="0.0360%" height="15" fill="rgb(229,67,23)" fg:x="623762994" fg:w="15729524"/><text x="1.6773%" y="383.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (8,126,057 samples, 0.02%)</title><rect x="1.4632%" y="357" width="0.0186%" height="15" fill="rgb(249,83,47)" fg:x="639492518" fg:w="8126057"/><text x="1.7132%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8,126,057 samples, 0.02%)</title><rect x="1.4632%" y="341" width="0.0186%" height="15" fill="rgb(215,43,3)" fg:x="639492518" fg:w="8126057"/><text x="1.7132%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (16,287,788 samples, 0.04%)</title><rect x="1.4632%" y="373" width="0.0373%" height="15" fill="rgb(238,154,13)" fg:x="639492518" fg:w="16287788"/><text x="1.7132%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (8,161,731 samples, 0.02%)</title><rect x="1.4818%" y="357" width="0.0187%" height="15" fill="rgb(219,56,2)" fg:x="647618575" fg:w="8161731"/><text x="1.7318%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (8,161,731 samples, 0.02%)</title><rect x="1.4818%" y="341" width="0.0187%" height="15" fill="rgb(233,0,4)" fg:x="647618575" fg:w="8161731"/><text x="1.7318%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11,789,583 samples, 0.03%)</title><rect x="1.5005%" y="373" width="0.0270%" height="15" fill="rgb(235,30,7)" fg:x="655780306" fg:w="11789583"/><text x="1.7505%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12,308,133 samples, 0.03%)</title><rect x="1.5275%" y="373" width="0.0282%" height="15" fill="rgb(250,79,13)" fg:x="667569889" fg:w="12308133"/><text x="1.7775%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (12,308,133 samples, 0.03%)</title><rect x="1.5275%" y="357" width="0.0282%" height="15" fill="rgb(211,146,34)" fg:x="667569889" fg:w="12308133"/><text x="1.7775%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (8,250,973 samples, 0.02%)</title><rect x="1.5368%" y="341" width="0.0189%" height="15" fill="rgb(228,22,38)" fg:x="671627049" fg:w="8250973"/><text x="1.7868%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (8,250,973 samples, 0.02%)</title><rect x="1.5368%" y="325" width="0.0189%" height="15" fill="rgb(235,168,5)" fg:x="671627049" fg:w="8250973"/><text x="1.7868%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (8,250,973 samples, 0.02%)</title><rect x="1.5368%" y="309" width="0.0189%" height="15" fill="rgb(221,155,16)" fg:x="671627049" fg:w="8250973"/><text x="1.7868%" y="319.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (12,410,414 samples, 0.03%)</title><rect x="1.5934%" y="245" width="0.0284%" height="15" fill="rgb(215,215,53)" fg:x="696362596" fg:w="12410414"/><text x="1.8434%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12,410,414 samples, 0.03%)</title><rect x="1.5934%" y="229" width="0.0284%" height="15" fill="rgb(223,4,10)" fg:x="696362596" fg:w="12410414"/><text x="1.8434%" y="239.50"></text></g><g><title>core::ptr::copy_nonoverlapping (12,410,414 samples, 0.03%)</title><rect x="1.5934%" y="213" width="0.0284%" height="15" fill="rgb(234,103,6)" fg:x="696362596" fg:w="12410414"/><text x="1.8434%" y="223.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (24,785,080 samples, 0.06%)</title><rect x="1.5745%" y="357" width="0.0567%" height="15" fill="rgb(227,97,0)" fg:x="688126641" fg:w="24785080"/><text x="1.8245%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (24,785,080 samples, 0.06%)</title><rect x="1.5745%" y="341" width="0.0567%" height="15" fill="rgb(234,150,53)" fg:x="688126641" fg:w="24785080"/><text x="1.8245%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (24,785,080 samples, 0.06%)</title><rect x="1.5745%" y="325" width="0.0567%" height="15" fill="rgb(228,201,54)" fg:x="688126641" fg:w="24785080"/><text x="1.8245%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (24,785,080 samples, 0.06%)</title><rect x="1.5745%" y="309" width="0.0567%" height="15" fill="rgb(222,22,37)" fg:x="688126641" fg:w="24785080"/><text x="1.8245%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (20,671,671 samples, 0.05%)</title><rect x="1.5839%" y="293" width="0.0473%" height="15" fill="rgb(237,53,32)" fg:x="692240050" fg:w="20671671"/><text x="1.8339%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20,671,671 samples, 0.05%)</title><rect x="1.5839%" y="277" width="0.0473%" height="15" fill="rgb(233,25,53)" fg:x="692240050" fg:w="20671671"/><text x="1.8339%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (20,671,671 samples, 0.05%)</title><rect x="1.5839%" y="261" width="0.0473%" height="15" fill="rgb(210,40,34)" fg:x="692240050" fg:w="20671671"/><text x="1.8339%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (8,243,299 samples, 0.02%)</title><rect x="1.6407%" y="309" width="0.0189%" height="15" fill="rgb(241,220,44)" fg:x="717031989" fg:w="8243299"/><text x="1.8907%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (8,243,299 samples, 0.02%)</title><rect x="1.6407%" y="293" width="0.0189%" height="15" fill="rgb(235,28,35)" fg:x="717031989" fg:w="8243299"/><text x="1.8907%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,243,299 samples, 0.02%)</title><rect x="1.6407%" y="277" width="0.0189%" height="15" fill="rgb(210,56,17)" fg:x="717031989" fg:w="8243299"/><text x="1.8907%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,243,299 samples, 0.02%)</title><rect x="1.6407%" y="261" width="0.0189%" height="15" fill="rgb(224,130,29)" fg:x="717031989" fg:w="8243299"/><text x="1.8907%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,243,299 samples, 0.02%)</title><rect x="1.6407%" y="245" width="0.0189%" height="15" fill="rgb(235,212,8)" fg:x="717031989" fg:w="8243299"/><text x="1.8907%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (8,243,299 samples, 0.02%)</title><rect x="1.6407%" y="229" width="0.0189%" height="15" fill="rgb(223,33,50)" fg:x="717031989" fg:w="8243299"/><text x="1.8907%" y="239.50"></text></g><g><title>cfree (8,243,299 samples, 0.02%)</title><rect x="1.6407%" y="213" width="0.0189%" height="15" fill="rgb(219,149,13)" fg:x="717031989" fg:w="8243299"/><text x="1.8907%" y="223.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (16,476,765 samples, 0.04%)</title><rect x="1.6407%" y="341" width="0.0377%" height="15" fill="rgb(250,156,29)" fg:x="717031989" fg:w="16476765"/><text x="1.8907%" y="351.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (16,476,765 samples, 0.04%)</title><rect x="1.6407%" y="325" width="0.0377%" height="15" fill="rgb(216,193,19)" fg:x="717031989" fg:w="16476765"/><text x="1.8907%" y="335.50"></text></g><g><title>core::ptr::read (8,233,466 samples, 0.02%)</title><rect x="1.6595%" y="309" width="0.0188%" height="15" fill="rgb(216,135,14)" fg:x="725275288" fg:w="8233466"/><text x="1.9095%" y="319.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (61,819,133 samples, 0.14%)</title><rect x="1.5651%" y="373" width="0.1415%" height="15" fill="rgb(241,47,5)" fg:x="684008778" fg:w="61819133"/><text x="1.8151%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (32,916,190 samples, 0.08%)</title><rect x="1.6312%" y="357" width="0.0753%" height="15" fill="rgb(233,42,35)" fg:x="712911721" fg:w="32916190"/><text x="1.8812%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="341" width="0.0282%" height="15" fill="rgb(231,13,6)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="325" width="0.0282%" height="15" fill="rgb(207,181,40)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="309" width="0.0282%" height="15" fill="rgb(254,173,49)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="293" width="0.0282%" height="15" fill="rgb(221,1,38)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="277" width="0.0282%" height="15" fill="rgb(206,124,46)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="261" width="0.0282%" height="15" fill="rgb(249,21,11)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="245" width="0.0282%" height="15" fill="rgb(222,201,40)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="229" width="0.0282%" height="15" fill="rgb(235,61,29)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="213" width="0.0282%" height="15" fill="rgb(219,207,3)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="197" width="0.0282%" height="15" fill="rgb(222,56,46)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="207.50"></text></g><g><title>cfree (12,319,157 samples, 0.03%)</title><rect x="1.6784%" y="181" width="0.0282%" height="15" fill="rgb(239,76,54)" fg:x="733508754" fg:w="12319157"/><text x="1.9284%" y="191.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="373" width="0.0187%" height="15" fill="rgb(231,124,27)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="383.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="357" width="0.0187%" height="15" fill="rgb(249,195,6)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="367.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="341" width="0.0187%" height="15" fill="rgb(237,174,47)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="325" width="0.0187%" height="15" fill="rgb(206,201,31)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="309" width="0.0187%" height="15" fill="rgb(231,57,52)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="293" width="0.0187%" height="15" fill="rgb(248,177,22)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="277" width="0.0187%" height="15" fill="rgb(215,211,37)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="261" width="0.0187%" height="15" fill="rgb(241,128,51)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="245" width="0.0187%" height="15" fill="rgb(227,165,31)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="255.50"></text></g><g><title>cfree (8,188,670 samples, 0.02%)</title><rect x="1.7160%" y="229" width="0.0187%" height="15" fill="rgb(228,167,24)" fg:x="749948636" fg:w="8188670"/><text x="1.9660%" y="239.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_greedy (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="373" width="0.0188%" height="15" fill="rgb(228,143,12)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;img::png::deflate::lzss::hash::LzssHashTable&gt; (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="357" width="0.0188%" height="15" fill="rgb(249,149,8)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;&gt;&gt; (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="341" width="0.0188%" height="15" fill="rgb(243,35,44)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;,std::hash::random::RandomState&gt;&gt; (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="325" width="0.0188%" height="15" fill="rgb(246,89,9)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;)&gt;&gt; (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="309" width="0.0188%" height="15" fill="rgb(233,213,13)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="293" width="0.0188%" height="15" fill="rgb(233,141,41)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="277" width="0.0188%" height="15" fill="rgb(239,167,4)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="261" width="0.0188%" height="15" fill="rgb(209,217,16)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="245" width="0.0188%" height="15" fill="rgb(219,88,35)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="229" width="0.0188%" height="15" fill="rgb(220,193,23)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;)&gt; (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="213" width="0.0188%" height="15" fill="rgb(230,90,52)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;&gt; (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="197" width="0.0188%" height="15" fill="rgb(252,106,19)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="181" width="0.0188%" height="15" fill="rgb(206,74,20)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="165" width="0.0188%" height="15" fill="rgb(230,138,44)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="149" width="0.0188%" height="15" fill="rgb(235,182,43)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="133" width="0.0188%" height="15" fill="rgb(242,16,51)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="117" width="0.0188%" height="15" fill="rgb(248,9,4)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="127.50"></text></g><g><title>cfree (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="101" width="0.0188%" height="15" fill="rgb(210,31,22)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="111.50"></text></g><g><title>[libc.so.6] (8,199,638 samples, 0.02%)</title><rect x="1.7347%" y="85" width="0.0188%" height="15" fill="rgb(239,54,39)" fg:x="758137306" fg:w="8199638"/><text x="1.9847%" y="95.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,590,240,190 samples, 3.64%)</title><rect x="17.8640%" y="341" width="3.6387%" height="15" fill="rgb(230,99,41)" fg:x="7807225941" fg:w="1590240190"/><text x="18.1140%" y="351.50">&lt;all..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,454,712,308 samples, 3.33%)</title><rect x="18.1741%" y="325" width="3.3286%" height="15" fill="rgb(253,106,12)" fg:x="7942753823" fg:w="1454712308"/><text x="18.4241%" y="335.50">&lt;co..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,276,469,474 samples, 2.92%)</title><rect x="21.5121%" y="341" width="2.9207%" height="15" fill="rgb(213,46,41)" fg:x="9401604677" fg:w="1276469474"/><text x="21.7621%" y="351.50">co..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,152,905,593 samples, 4.93%)</title><rect x="24.4329%" y="341" width="4.9261%" height="15" fill="rgb(215,133,35)" fg:x="10678074151" fg:w="2152905593"/><text x="24.6829%" y="351.50">core::..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (2,152,905,593 samples, 4.93%)</title><rect x="24.4329%" y="325" width="4.9261%" height="15" fill="rgb(213,28,5)" fg:x="10678074151" fg:w="2152905593"/><text x="24.6829%" y="335.50">img::p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (779,998,867 samples, 1.78%)</title><rect x="27.5743%" y="309" width="1.7847%" height="15" fill="rgb(215,77,49)" fg:x="12050980877" fg:w="779998867"/><text x="27.8243%" y="319.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (779,998,867 samples, 1.78%)</title><rect x="27.5743%" y="293" width="1.7847%" height="15" fill="rgb(248,100,22)" fg:x="12050980877" fg:w="779998867"/><text x="27.8243%" y="303.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (779,998,867 samples, 1.78%)</title><rect x="27.5743%" y="277" width="1.7847%" height="15" fill="rgb(208,67,9)" fg:x="12050980877" fg:w="779998867"/><text x="27.8243%" y="287.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u16,u16)&gt;&gt; (44,791,985 samples, 0.10%)</title><rect x="29.3590%" y="341" width="0.1025%" height="15" fill="rgb(219,133,21)" fg:x="12830979744" fg:w="44791985"/><text x="29.6090%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44,791,985 samples, 0.10%)</title><rect x="29.3590%" y="325" width="0.1025%" height="15" fill="rgb(246,46,29)" fg:x="12830979744" fg:w="44791985"/><text x="29.6090%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u16,u16),alloc::alloc::Global&gt;&gt; (44,791,985 samples, 0.10%)</title><rect x="29.3590%" y="309" width="0.1025%" height="15" fill="rgb(246,185,52)" fg:x="12830979744" fg:w="44791985"/><text x="29.6090%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44,791,985 samples, 0.10%)</title><rect x="29.3590%" y="293" width="0.1025%" height="15" fill="rgb(252,136,11)" fg:x="12830979744" fg:w="44791985"/><text x="29.6090%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u16,u16)&gt;&gt; (44,791,985 samples, 0.10%)</title><rect x="29.3590%" y="277" width="0.1025%" height="15" fill="rgb(219,138,53)" fg:x="12830979744" fg:w="44791985"/><text x="29.6090%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44,791,985 samples, 0.10%)</title><rect x="29.3590%" y="261" width="0.1025%" height="15" fill="rgb(211,51,23)" fg:x="12830979744" fg:w="44791985"/><text x="29.6090%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (44,791,985 samples, 0.10%)</title><rect x="29.3590%" y="245" width="0.1025%" height="15" fill="rgb(247,221,28)" fg:x="12830979744" fg:w="44791985"/><text x="29.6090%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (44,791,985 samples, 0.10%)</title><rect x="29.3590%" y="229" width="0.1025%" height="15" fill="rgb(251,222,45)" fg:x="12830979744" fg:w="44791985"/><text x="29.6090%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (44,791,985 samples, 0.10%)</title><rect x="29.3590%" y="213" width="0.1025%" height="15" fill="rgb(217,162,53)" fg:x="12830979744" fg:w="44791985"/><text x="29.6090%" y="223.50"></text></g><g><title>cfree (32,475,271 samples, 0.07%)</title><rect x="29.3872%" y="197" width="0.0743%" height="15" fill="rgb(229,93,14)" fg:x="12843296458" fg:w="32475271"/><text x="29.6372%" y="207.50"></text></g><g><title>[libc.so.6] (12,165,222 samples, 0.03%)</title><rect x="29.4336%" y="181" width="0.0278%" height="15" fill="rgb(209,67,49)" fg:x="12863606507" fg:w="12165222"/><text x="29.6836%" y="191.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (14,847,255,362 samples, 33.97%)</title><rect x="1.7535%" y="373" width="33.9725%" height="15" fill="rgb(213,87,29)" fg:x="766336944" fg:w="14847255362"/><text x="2.0035%" y="383.50">img::png::deflate::lzss::encode_lzss_optimized</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (14,847,255,362 samples, 33.97%)</title><rect x="1.7535%" y="357" width="33.9725%" height="15" fill="rgb(205,151,52)" fg:x="766336944" fg:w="14847255362"/><text x="2.0035%" y="367.50">img::png::deflate::lzss::encode_lzss_iteration</text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (2,737,820,577 samples, 6.26%)</title><rect x="29.4615%" y="341" width="6.2645%" height="15" fill="rgb(253,215,39)" fg:x="12875771729" fg:w="2737820577"/><text x="29.7115%" y="351.50">img::png..</text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,243,486,987 samples, 5.13%)</title><rect x="51.3010%" y="357" width="5.1334%" height="15" fill="rgb(221,220,41)" fg:x="22420454619" fg:w="2243486987"/><text x="51.5510%" y="367.50">&lt;alloc..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,243,486,987 samples, 5.13%)</title><rect x="51.3010%" y="341" width="5.1334%" height="15" fill="rgb(218,133,21)" fg:x="22420454619" fg:w="2243486987"/><text x="51.5510%" y="351.50">&lt;core:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1,189,432,902 samples, 2.72%)</title><rect x="63.8225%" y="341" width="2.7216%" height="15" fill="rgb(221,193,43)" fg:x="27892813464" fg:w="1189432902"/><text x="64.0725%" y="351.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,189,432,902 samples, 2.72%)</title><rect x="63.8225%" y="325" width="2.7216%" height="15" fill="rgb(240,128,52)" fg:x="27892813464" fg:w="1189432902"/><text x="64.0725%" y="335.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,189,432,902 samples, 2.72%)</title><rect x="63.8225%" y="309" width="2.7216%" height="15" fill="rgb(253,114,12)" fg:x="27892813464" fg:w="1189432902"/><text x="64.0725%" y="319.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,189,432,902 samples, 2.72%)</title><rect x="63.8225%" y="293" width="2.7216%" height="15" fill="rgb(215,223,47)" fg:x="27892813464" fg:w="1189432902"/><text x="64.0725%" y="303.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6,622,808,134 samples, 15.15%)</title><rect x="56.4344%" y="357" width="15.1539%" height="15" fill="rgb(248,225,23)" fg:x="24663941606" fg:w="6622808134"/><text x="56.6844%" y="367.50">alloc::vec::Vec&lt;T,A&gt;::p..</text></g><g><title>core::ptr::write (2,204,503,374 samples, 5.04%)</title><rect x="66.5441%" y="341" width="5.0442%" height="15" fill="rgb(250,108,0)" fg:x="29082246366" fg:w="2204503374"/><text x="66.7941%" y="351.50">core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2,832,694,590 samples, 6.48%)</title><rect x="71.5978%" y="357" width="6.4816%" height="15" fill="rgb(228,208,7)" fg:x="31290900872" fg:w="2832694590"/><text x="71.8478%" y="367.50">core::cm..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (32,992,097 samples, 0.08%)</title><rect x="78.0793%" y="325" width="0.0755%" height="15" fill="rgb(244,45,10)" fg:x="34123595462" fg:w="32992097"/><text x="78.3293%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (863,252,209 samples, 1.98%)</title><rect x="78.0793%" y="357" width="1.9752%" height="15" fill="rgb(207,125,25)" fg:x="34123595462" fg:w="863252209"/><text x="78.3293%" y="367.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (863,252,209 samples, 1.98%)</title><rect x="78.0793%" y="341" width="1.9752%" height="15" fill="rgb(210,195,18)" fg:x="34123595462" fg:w="863252209"/><text x="78.3293%" y="351.50">&lt;..</text></g><g><title>core::slice::index::get_offset_len_noubcheck (830,260,112 samples, 1.90%)</title><rect x="78.1548%" y="325" width="1.8997%" height="15" fill="rgb(249,80,12)" fg:x="34156587559" fg:w="830260112"/><text x="78.4048%" y="335.50">c..</text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (81,878,292 samples, 0.19%)</title><rect x="81.9531%" y="341" width="0.1873%" height="15" fill="rgb(221,65,9)" fg:x="35816594369" fg:w="81878292"/><text x="82.2031%" y="351.50"></text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (81,878,292 samples, 0.19%)</title><rect x="81.9531%" y="325" width="0.1873%" height="15" fill="rgb(235,49,36)" fg:x="35816594369" fg:w="81878292"/><text x="82.2031%" y="335.50"></text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (81,878,292 samples, 0.19%)</title><rect x="81.9531%" y="309" width="0.1873%" height="15" fill="rgb(225,32,20)" fg:x="35816594369" fg:w="81878292"/><text x="82.2031%" y="319.50"></text></g><g><title>core::cmp::Ord::min (36,646,633 samples, 0.08%)</title><rect x="82.1405%" y="341" width="0.0839%" height="15" fill="rgb(215,141,46)" fg:x="35898472661" fg:w="36646633"/><text x="82.3905%" y="351.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::from_slice (123,611,911 samples, 0.28%)</title><rect x="82.2244%" y="341" width="0.2828%" height="15" fill="rgb(250,160,47)" fg:x="35935119294" fg:w="123611911"/><text x="82.4744%" y="351.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::load (123,611,911 samples, 0.28%)</title><rect x="82.2244%" y="325" width="0.2828%" height="15" fill="rgb(216,222,40)" fg:x="35935119294" fg:w="123611911"/><text x="82.4744%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (123,611,911 samples, 0.28%)</title><rect x="82.2244%" y="309" width="0.2828%" height="15" fill="rgb(234,217,39)" fg:x="35935119294" fg:w="123611911"/><text x="82.4744%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (656,527,303 samples, 1.50%)</title><rect x="82.5072%" y="341" width="1.5022%" height="15" fill="rgb(207,178,40)" fg:x="36058731205" fg:w="656527303"/><text x="82.7572%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (656,527,303 samples, 1.50%)</title><rect x="82.5072%" y="325" width="1.5022%" height="15" fill="rgb(221,136,13)" fg:x="36058731205" fg:w="656527303"/><text x="82.7572%" y="335.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (1,732,536,502 samples, 3.96%)</title><rect x="80.0546%" y="357" width="3.9643%" height="15" fill="rgb(249,199,10)" fg:x="34986847671" fg:w="1732536502"/><text x="80.3046%" y="367.50">img:..</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (21,109,887,975 samples, 48.30%)</title><rect x="35.7260%" y="373" width="48.3022%" height="15" fill="rgb(249,222,13)" fg:x="15613592306" fg:w="21109887975"/><text x="35.9760%" y="383.50">img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences</text></g><g><title>core::intrinsics::likely (12,323,965 samples, 0.03%)</title><rect x="84.0468%" y="261" width="0.0282%" height="15" fill="rgb(244,185,38)" fg:x="36731576643" fg:w="12323965"/><text x="84.2968%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (24,564,178 samples, 0.06%)</title><rect x="84.0282%" y="373" width="0.0562%" height="15" fill="rgb(236,202,9)" fg:x="36723480281" fg:w="24564178"/><text x="84.2782%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (16,467,816 samples, 0.04%)</title><rect x="84.0468%" y="357" width="0.0377%" height="15" fill="rgb(250,229,37)" fg:x="36731576643" fg:w="16467816"/><text x="84.2968%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (16,467,816 samples, 0.04%)</title><rect x="84.0468%" y="341" width="0.0377%" height="15" fill="rgb(206,174,23)" fg:x="36731576643" fg:w="16467816"/><text x="84.2968%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (16,467,816 samples, 0.04%)</title><rect x="84.0468%" y="325" width="0.0377%" height="15" fill="rgb(211,33,43)" fg:x="36731576643" fg:w="16467816"/><text x="84.2968%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (16,467,816 samples, 0.04%)</title><rect x="84.0468%" y="309" width="0.0377%" height="15" fill="rgb(245,58,50)" fg:x="36731576643" fg:w="16467816"/><text x="84.2968%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16,467,816 samples, 0.04%)</title><rect x="84.0468%" y="293" width="0.0377%" height="15" fill="rgb(244,68,36)" fg:x="36731576643" fg:w="16467816"/><text x="84.2968%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16,467,816 samples, 0.04%)</title><rect x="84.0468%" y="277" width="0.0377%" height="15" fill="rgb(232,229,15)" fg:x="36731576643" fg:w="16467816"/><text x="84.2968%" y="287.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (7,886,700 samples, 0.02%)</title><rect x="84.0844%" y="373" width="0.0180%" height="15" fill="rgb(254,30,23)" fg:x="36748044459" fg:w="7886700"/><text x="84.3344%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (7,886,700 samples, 0.02%)</title><rect x="84.0844%" y="357" width="0.0180%" height="15" fill="rgb(235,160,14)" fg:x="36748044459" fg:w="7886700"/><text x="84.3344%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (7,886,700 samples, 0.02%)</title><rect x="84.0844%" y="341" width="0.0180%" height="15" fill="rgb(212,155,44)" fg:x="36748044459" fg:w="7886700"/><text x="84.3344%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (7,886,700 samples, 0.02%)</title><rect x="84.0844%" y="325" width="0.0180%" height="15" fill="rgb(226,2,50)" fg:x="36748044459" fg:w="7886700"/><text x="84.3344%" y="335.50"></text></g><g><title>[unknown] (36,352,459,960 samples, 83.18%)</title><rect x="0.9513%" y="389" width="83.1793%" height="15" fill="rgb(234,177,6)" fg:x="415750724" fg:w="36352459960"/><text x="1.2013%" y="399.50">[unknown]</text></g><g><title>__rustc::__rdl_alloc (24,511,199 samples, 0.06%)</title><rect x="84.1306%" y="389" width="0.0561%" height="15" fill="rgb(217,24,9)" fg:x="36768210684" fg:w="24511199"/><text x="84.3806%" y="399.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (24,511,199 samples, 0.06%)</title><rect x="84.1306%" y="373" width="0.0561%" height="15" fill="rgb(220,13,46)" fg:x="36768210684" fg:w="24511199"/><text x="84.3806%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (65,782,517 samples, 0.15%)</title><rect x="84.2120%" y="389" width="0.1505%" height="15" fill="rgb(239,221,27)" fg:x="36803797228" fg:w="65782517"/><text x="84.4620%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (65,782,517 samples, 0.15%)</title><rect x="84.2120%" y="373" width="0.1505%" height="15" fill="rgb(222,198,25)" fg:x="36803797228" fg:w="65782517"/><text x="84.4620%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (65,782,517 samples, 0.15%)</title><rect x="84.2120%" y="357" width="0.1505%" height="15" fill="rgb(211,99,13)" fg:x="36803797228" fg:w="65782517"/><text x="84.4620%" y="367.50"></text></g><g><title>alloc::alloc::realloc (65,782,517 samples, 0.15%)</title><rect x="84.2120%" y="341" width="0.1505%" height="15" fill="rgb(232,111,31)" fg:x="36803797228" fg:w="65782517"/><text x="84.4620%" y="351.50"></text></g><g><title>realloc (65,782,517 samples, 0.15%)</title><rect x="84.2120%" y="325" width="0.1505%" height="15" fill="rgb(245,82,37)" fg:x="36803797228" fg:w="65782517"/><text x="84.4620%" y="335.50"></text></g><g><title>[libc.so.6] (61,654,423 samples, 0.14%)</title><rect x="84.2214%" y="309" width="0.1411%" height="15" fill="rgb(227,149,46)" fg:x="36807925322" fg:w="61654423"/><text x="84.4714%" y="319.50"></text></g><g><title>[libc.so.6] (61,654,423 samples, 0.14%)</title><rect x="84.2214%" y="293" width="0.1411%" height="15" fill="rgb(218,36,50)" fg:x="36807925322" fg:w="61654423"/><text x="84.4714%" y="303.50"></text></g><g><title>[libc.so.6] (28,865,039 samples, 0.07%)</title><rect x="84.2965%" y="277" width="0.0660%" height="15" fill="rgb(226,80,48)" fg:x="36840714706" fg:w="28865039"/><text x="84.5465%" y="287.50"></text></g><g><title>cfree (19,543,988 samples, 0.04%)</title><rect x="84.3645%" y="389" width="0.0447%" height="15" fill="rgb(238,224,15)" fg:x="36870465643" fg:w="19543988"/><text x="84.6145%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (24,536,418 samples, 0.06%)</title><rect x="84.4093%" y="373" width="0.0561%" height="15" fill="rgb(241,136,10)" fg:x="36890009631" fg:w="24536418"/><text x="84.6593%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (24,536,418 samples, 0.06%)</title><rect x="84.4093%" y="357" width="0.0561%" height="15" fill="rgb(208,32,45)" fg:x="36890009631" fg:w="24536418"/><text x="84.6593%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (24,536,418 samples, 0.06%)</title><rect x="84.4093%" y="341" width="0.0561%" height="15" fill="rgb(207,135,9)" fg:x="36890009631" fg:w="24536418"/><text x="84.6593%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16,299,000 samples, 0.04%)</title><rect x="84.4281%" y="325" width="0.0373%" height="15" fill="rgb(206,86,44)" fg:x="36898247049" fg:w="16299000"/><text x="84.6781%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,088,372 samples, 0.02%)</title><rect x="84.4469%" y="309" width="0.0185%" height="15" fill="rgb(245,177,15)" fg:x="36906457677" fg:w="8088372"/><text x="84.6969%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (32,575,342 samples, 0.07%)</title><rect x="84.4093%" y="389" width="0.0745%" height="15" fill="rgb(206,64,50)" fg:x="36890009631" fg:w="32575342"/><text x="84.6593%" y="399.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (8,038,924 samples, 0.02%)</title><rect x="84.4654%" y="373" width="0.0184%" height="15" fill="rgb(234,36,40)" fg:x="36914546049" fg:w="8038924"/><text x="84.7154%" y="383.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::from_slice (12,015,062 samples, 0.03%)</title><rect x="84.5299%" y="309" width="0.0275%" height="15" fill="rgb(213,64,8)" fg:x="36942750326" fg:w="12015062"/><text x="84.7799%" y="319.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::load (12,015,062 samples, 0.03%)</title><rect x="84.5299%" y="293" width="0.0275%" height="15" fill="rgb(210,75,36)" fg:x="36942750326" fg:w="12015062"/><text x="84.7799%" y="303.50"></text></g><g><title>core::ptr::copy_nonoverlapping (12,015,062 samples, 0.03%)</title><rect x="84.5299%" y="277" width="0.0275%" height="15" fill="rgb(229,88,21)" fg:x="36942750326" fg:w="12015062"/><text x="84.7799%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (36,158,242 samples, 0.08%)</title><rect x="84.4838%" y="389" width="0.0827%" height="15" fill="rgb(252,204,47)" fg:x="36922584973" fg:w="36158242"/><text x="84.7338%" y="399.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (36,158,242 samples, 0.08%)</title><rect x="84.4838%" y="373" width="0.0827%" height="15" fill="rgb(208,77,27)" fg:x="36922584973" fg:w="36158242"/><text x="84.7338%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (36,158,242 samples, 0.08%)</title><rect x="84.4838%" y="357" width="0.0827%" height="15" fill="rgb(221,76,26)" fg:x="36922584973" fg:w="36158242"/><text x="84.7338%" y="367.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (36,158,242 samples, 0.08%)</title><rect x="84.4838%" y="341" width="0.0827%" height="15" fill="rgb(225,139,18)" fg:x="36922584973" fg:w="36158242"/><text x="84.7338%" y="351.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (28,054,979 samples, 0.06%)</title><rect x="84.5023%" y="325" width="0.0642%" height="15" fill="rgb(230,137,11)" fg:x="36930688236" fg:w="28054979"/><text x="84.7523%" y="335.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (20,647,716 samples, 0.05%)</title><rect x="84.5855%" y="389" width="0.0472%" height="15" fill="rgb(212,28,1)" fg:x="36967019948" fg:w="20647716"/><text x="84.8355%" y="399.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (16,497,611 samples, 0.04%)</title><rect x="84.5950%" y="373" width="0.0377%" height="15" fill="rgb(248,164,17)" fg:x="36971170053" fg:w="16497611"/><text x="84.8450%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (12,395,392 samples, 0.03%)</title><rect x="84.6044%" y="357" width="0.0284%" height="15" fill="rgb(222,171,42)" fg:x="36975272272" fg:w="12395392"/><text x="84.8544%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8,268,377 samples, 0.02%)</title><rect x="84.6138%" y="341" width="0.0189%" height="15" fill="rgb(243,84,45)" fg:x="36979399287" fg:w="8268377"/><text x="84.8638%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9,406,243 samples, 0.02%)</title><rect x="84.6327%" y="389" width="0.0215%" height="15" fill="rgb(252,49,23)" fg:x="36987667664" fg:w="9406243"/><text x="84.8827%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (8,204,766 samples, 0.02%)</title><rect x="84.6355%" y="373" width="0.0188%" height="15" fill="rgb(215,19,7)" fg:x="36988869141" fg:w="8204766"/><text x="84.8855%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8,204,766 samples, 0.02%)</title><rect x="84.6355%" y="357" width="0.0188%" height="15" fill="rgb(238,81,41)" fg:x="36988869141" fg:w="8204766"/><text x="84.8855%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (8,204,766 samples, 0.02%)</title><rect x="84.6355%" y="341" width="0.0188%" height="15" fill="rgb(210,199,37)" fg:x="36988869141" fg:w="8204766"/><text x="84.8855%" y="351.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (12,120,752 samples, 0.03%)</title><rect x="84.6595%" y="389" width="0.0277%" height="15" fill="rgb(244,192,49)" fg:x="36999385328" fg:w="12120752"/><text x="84.9095%" y="399.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (8,244,866 samples, 0.02%)</title><rect x="84.6967%" y="357" width="0.0189%" height="15" fill="rgb(226,211,11)" fg:x="37015612579" fg:w="8244866"/><text x="84.9467%" y="367.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (8,244,866 samples, 0.02%)</title><rect x="84.6967%" y="341" width="0.0189%" height="15" fill="rgb(236,162,54)" fg:x="37015612579" fg:w="8244866"/><text x="84.9467%" y="351.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (32,447,056 samples, 0.07%)</title><rect x="84.6873%" y="389" width="0.0742%" height="15" fill="rgb(220,229,9)" fg:x="37011506080" fg:w="32447056"/><text x="84.9373%" y="399.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (32,447,056 samples, 0.07%)</title><rect x="84.6873%" y="373" width="0.0742%" height="15" fill="rgb(250,87,22)" fg:x="37011506080" fg:w="32447056"/><text x="84.9373%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (15,984,027 samples, 0.04%)</title><rect x="84.7249%" y="357" width="0.0366%" height="15" fill="rgb(239,43,17)" fg:x="37027969109" fg:w="15984027"/><text x="84.9749%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,984,027 samples, 0.04%)</title><rect x="84.7249%" y="341" width="0.0366%" height="15" fill="rgb(231,177,25)" fg:x="37027969109" fg:w="15984027"/><text x="84.9749%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (12,272,984 samples, 0.03%)</title><rect x="84.7334%" y="325" width="0.0281%" height="15" fill="rgb(219,179,1)" fg:x="37031680152" fg:w="12272984"/><text x="84.9834%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (12,272,984 samples, 0.03%)</title><rect x="84.7334%" y="309" width="0.0281%" height="15" fill="rgb(238,219,53)" fg:x="37031680152" fg:w="12272984"/><text x="84.9834%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (12,272,984 samples, 0.03%)</title><rect x="84.7334%" y="293" width="0.0281%" height="15" fill="rgb(232,167,36)" fg:x="37031680152" fg:w="12272984"/><text x="84.9834%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (12,272,984 samples, 0.03%)</title><rect x="84.7334%" y="277" width="0.0281%" height="15" fill="rgb(244,19,51)" fg:x="37031680152" fg:w="12272984"/><text x="84.9834%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,272,984 samples, 0.03%)</title><rect x="84.7334%" y="261" width="0.0281%" height="15" fill="rgb(224,6,22)" fg:x="37031680152" fg:w="12272984"/><text x="84.9834%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (12,272,984 samples, 0.03%)</title><rect x="84.7334%" y="245" width="0.0281%" height="15" fill="rgb(224,145,5)" fg:x="37031680152" fg:w="12272984"/><text x="84.9834%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,272,984 samples, 0.03%)</title><rect x="84.7334%" y="229" width="0.0281%" height="15" fill="rgb(234,130,49)" fg:x="37031680152" fg:w="12272984"/><text x="84.9834%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (12,272,984 samples, 0.03%)</title><rect x="84.7334%" y="213" width="0.0281%" height="15" fill="rgb(254,6,2)" fg:x="37031680152" fg:w="12272984"/><text x="84.9834%" y="223.50"></text></g><g><title>cfree (12,272,984 samples, 0.03%)</title><rect x="84.7334%" y="197" width="0.0281%" height="15" fill="rgb(208,96,46)" fg:x="37031680152" fg:w="12272984"/><text x="84.9834%" y="207.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (8,262,535 samples, 0.02%)</title><rect x="84.7710%" y="389" width="0.0189%" height="15" fill="rgb(239,3,39)" fg:x="37048084697" fg:w="8262535"/><text x="85.0210%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (177,125,614 samples, 0.41%)</title><rect x="84.7899%" y="357" width="0.4053%" height="15" fill="rgb(233,210,1)" fg:x="37056347232" fg:w="177125614"/><text x="85.0399%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (177,125,614 samples, 0.41%)</title><rect x="84.7899%" y="341" width="0.4053%" height="15" fill="rgb(244,137,37)" fg:x="37056347232" fg:w="177125614"/><text x="85.0399%" y="351.50"></text></g><g><title>core::ptr::read (177,125,614 samples, 0.41%)</title><rect x="84.7899%" y="325" width="0.4053%" height="15" fill="rgb(240,136,2)" fg:x="37056347232" fg:w="177125614"/><text x="85.0399%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (646,216,409 samples, 1.48%)</title><rect x="85.1952%" y="357" width="1.4786%" height="15" fill="rgb(239,18,37)" fg:x="37233472846" fg:w="646216409"/><text x="85.4452%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (19,770,495 samples, 0.05%)</title><rect x="86.6833%" y="261" width="0.0452%" height="15" fill="rgb(218,185,22)" fg:x="37883835862" fg:w="19770495"/><text x="86.9333%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (19,770,495 samples, 0.05%)</title><rect x="86.6833%" y="245" width="0.0452%" height="15" fill="rgb(225,218,4)" fg:x="37883835862" fg:w="19770495"/><text x="86.9333%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (16,101,968 samples, 0.04%)</title><rect x="86.6917%" y="229" width="0.0368%" height="15" fill="rgb(230,182,32)" fg:x="37887504389" fg:w="16101968"/><text x="86.9417%" y="239.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (855,159,057 samples, 1.96%)</title><rect x="84.7899%" y="389" width="1.9567%" height="15" fill="rgb(242,56,43)" fg:x="37056347232" fg:w="855159057"/><text x="85.0399%" y="399.50">i..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (855,159,057 samples, 1.96%)</title><rect x="84.7899%" y="373" width="1.9567%" height="15" fill="rgb(233,99,24)" fg:x="37056347232" fg:w="855159057"/><text x="85.0399%" y="383.50">i..</text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (27,670,427 samples, 0.06%)</title><rect x="86.6833%" y="357" width="0.0633%" height="15" fill="rgb(234,209,42)" fg:x="37883835862" fg:w="27670427"/><text x="86.9333%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (27,670,427 samples, 0.06%)</title><rect x="86.6833%" y="341" width="0.0633%" height="15" fill="rgb(227,7,12)" fg:x="37883835862" fg:w="27670427"/><text x="86.9333%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,670,427 samples, 0.06%)</title><rect x="86.6833%" y="325" width="0.0633%" height="15" fill="rgb(245,203,43)" fg:x="37883835862" fg:w="27670427"/><text x="86.9333%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27,670,427 samples, 0.06%)</title><rect x="86.6833%" y="309" width="0.0633%" height="15" fill="rgb(238,205,33)" fg:x="37883835862" fg:w="27670427"/><text x="86.9333%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27,670,427 samples, 0.06%)</title><rect x="86.6833%" y="293" width="0.0633%" height="15" fill="rgb(231,56,7)" fg:x="37883835862" fg:w="27670427"/><text x="86.9333%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (27,670,427 samples, 0.06%)</title><rect x="86.6833%" y="277" width="0.0633%" height="15" fill="rgb(244,186,29)" fg:x="37883835862" fg:w="27670427"/><text x="86.9333%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,899,932 samples, 0.02%)</title><rect x="86.7285%" y="261" width="0.0181%" height="15" fill="rgb(234,111,31)" fg:x="37903606357" fg:w="7899932"/><text x="86.9785%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,899,932 samples, 0.02%)</title><rect x="86.7285%" y="245" width="0.0181%" height="15" fill="rgb(241,149,10)" fg:x="37903606357" fg:w="7899932"/><text x="86.9785%" y="255.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (12,412,603 samples, 0.03%)</title><rect x="86.7655%" y="373" width="0.0284%" height="15" fill="rgb(249,206,44)" fg:x="37919775010" fg:w="12412603"/><text x="87.0155%" y="383.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (8,270,617 samples, 0.02%)</title><rect x="86.7750%" y="357" width="0.0189%" height="15" fill="rgb(251,153,30)" fg:x="37923916996" fg:w="8270617"/><text x="87.0250%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (8,270,617 samples, 0.02%)</title><rect x="86.7750%" y="341" width="0.0189%" height="15" fill="rgb(239,152,38)" fg:x="37923916996" fg:w="8270617"/><text x="87.0250%" y="351.50"></text></g><g><title>hashbrown::control::tag::Tag::full (8,124,024 samples, 0.02%)</title><rect x="86.8693%" y="277" width="0.0186%" height="15" fill="rgb(249,139,47)" fg:x="37965147325" fg:w="8124024"/><text x="87.1193%" y="287.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (65,872,410 samples, 0.15%)</title><rect x="86.7466%" y="389" width="0.1507%" height="15" fill="rgb(244,64,35)" fg:x="37911506289" fg:w="65872410"/><text x="86.9966%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (41,050,742 samples, 0.09%)</title><rect x="86.8034%" y="373" width="0.0939%" height="15" fill="rgb(216,46,15)" fg:x="37936327957" fg:w="41050742"/><text x="87.0534%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (41,050,742 samples, 0.09%)</title><rect x="86.8034%" y="357" width="0.0939%" height="15" fill="rgb(250,74,19)" fg:x="37936327957" fg:w="41050742"/><text x="87.0534%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (41,050,742 samples, 0.09%)</title><rect x="86.8034%" y="341" width="0.0939%" height="15" fill="rgb(249,42,33)" fg:x="37936327957" fg:w="41050742"/><text x="87.0534%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (28,707,719 samples, 0.07%)</title><rect x="86.8316%" y="325" width="0.0657%" height="15" fill="rgb(242,149,17)" fg:x="37948670980" fg:w="28707719"/><text x="87.0816%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (28,707,719 samples, 0.07%)</title><rect x="86.8316%" y="309" width="0.0657%" height="15" fill="rgb(244,29,21)" fg:x="37948670980" fg:w="28707719"/><text x="87.0816%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (28,707,719 samples, 0.07%)</title><rect x="86.8316%" y="293" width="0.0657%" height="15" fill="rgb(220,130,37)" fg:x="37948670980" fg:w="28707719"/><text x="87.0816%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,653,522,434 samples, 3.78%)</title><rect x="94.3522%" y="373" width="3.7835%" height="15" fill="rgb(211,67,2)" fg:x="41235446146" fg:w="1653522434"/><text x="94.6022%" y="383.50">&lt;all..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (730,250,962 samples, 1.67%)</title><rect x="96.4648%" y="357" width="1.6709%" height="15" fill="rgb(235,68,52)" fg:x="42158717618" fg:w="730250962"/><text x="96.7148%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (714,279,225 samples, 1.63%)</title><rect x="98.1357%" y="373" width="1.6344%" height="15" fill="rgb(246,142,3)" fg:x="42888968580" fg:w="714279225"/><text x="98.3857%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="373" width="0.0283%" height="15" fill="rgb(241,25,7)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="357" width="0.0283%" height="15" fill="rgb(242,119,39)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="341" width="0.0283%" height="15" fill="rgb(241,98,45)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="325" width="0.0283%" height="15" fill="rgb(254,28,30)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="309" width="0.0283%" height="15" fill="rgb(241,142,54)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="293" width="0.0283%" height="15" fill="rgb(222,85,15)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="277" width="0.0283%" height="15" fill="rgb(210,85,47)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="287.50"></text></g><g><title>alloc::alloc::alloc (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="261" width="0.0283%" height="15" fill="rgb(224,206,25)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="271.50"></text></g><g><title>malloc (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="245" width="0.0283%" height="15" fill="rgb(243,201,19)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="255.50"></text></g><g><title>[libc.so.6] (12,355,776 samples, 0.03%)</title><rect x="99.7701%" y="229" width="0.0283%" height="15" fill="rgb(236,59,4)" fg:x="43603247805" fg:w="12355776"/><text x="100.0201%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (8,224,797 samples, 0.02%)</title><rect x="99.7983%" y="373" width="0.0188%" height="15" fill="rgb(254,179,45)" fg:x="43615603581" fg:w="8224797"/><text x="100.0483%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (24,725,092 samples, 0.06%)</title><rect x="99.8171%" y="277" width="0.0566%" height="15" fill="rgb(226,14,10)" fg:x="43623828378" fg:w="24725092"/><text x="100.0671%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (16,504,575 samples, 0.04%)</title><rect x="99.8360%" y="261" width="0.0378%" height="15" fill="rgb(244,27,41)" fg:x="43632048895" fg:w="16504575"/><text x="100.0860%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (16,504,575 samples, 0.04%)</title><rect x="99.8360%" y="245" width="0.0378%" height="15" fill="rgb(235,35,32)" fg:x="43632048895" fg:w="16504575"/><text x="100.0860%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (28,865,796 samples, 0.07%)</title><rect x="99.8171%" y="373" width="0.0660%" height="15" fill="rgb(218,68,31)" fg:x="43623828378" fg:w="28865796"/><text x="100.0671%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (28,865,796 samples, 0.07%)</title><rect x="99.8171%" y="357" width="0.0660%" height="15" fill="rgb(207,120,37)" fg:x="43623828378" fg:w="28865796"/><text x="100.0671%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (28,865,796 samples, 0.07%)</title><rect x="99.8171%" y="341" width="0.0660%" height="15" fill="rgb(227,98,0)" fg:x="43623828378" fg:w="28865796"/><text x="100.0671%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (28,865,796 samples, 0.07%)</title><rect x="99.8171%" y="325" width="0.0660%" height="15" fill="rgb(207,7,3)" fg:x="43623828378" fg:w="28865796"/><text x="100.0671%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (28,865,796 samples, 0.07%)</title><rect x="99.8171%" y="309" width="0.0660%" height="15" fill="rgb(206,98,19)" fg:x="43623828378" fg:w="28865796"/><text x="100.0671%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (28,865,796 samples, 0.07%)</title><rect x="99.8171%" y="293" width="0.0660%" height="15" fill="rgb(217,5,26)" fg:x="43623828378" fg:w="28865796"/><text x="100.0671%" y="303.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (5,683,538,465 samples, 13.00%)</title><rect x="86.8973%" y="389" width="13.0047%" height="15" fill="rgb(235,190,38)" fg:x="37977378699" fg:w="5683538465"/><text x="87.1473%" y="399.50">img::png::deflate::l..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::convert::From&lt;[T: N]&gt;&gt;::from (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="373" width="0.0188%" height="15" fill="rgb(247,86,24)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::with_capacity (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="357" width="0.0188%" height="15" fill="rgb(205,101,16)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::with_capacity_in (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="341" width="0.0188%" height="15" fill="rgb(246,168,33)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="325" width="0.0188%" height="15" fill="rgb(231,114,1)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="309" width="0.0188%" height="15" fill="rgb(207,184,53)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="293" width="0.0188%" height="15" fill="rgb(224,95,51)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="277" width="0.0188%" height="15" fill="rgb(212,188,45)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="261" width="0.0188%" height="15" fill="rgb(223,154,38)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="271.50"></text></g><g><title>alloc::alloc::alloc (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="245" width="0.0188%" height="15" fill="rgb(251,22,52)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="255.50"></text></g><g><title>malloc (8,202,650 samples, 0.02%)</title><rect x="99.9020%" y="229" width="0.0188%" height="15" fill="rgb(229,209,22)" fg:x="43660917164" fg:w="8202650"/><text x="100.1520%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (16,338,596 samples, 0.04%)</title><rect x="99.9020%" y="389" width="0.0374%" height="15" fill="rgb(234,138,34)" fg:x="43660917164" fg:w="16338596"/><text x="100.1520%" y="399.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (8,202,988 samples, 0.02%)</title><rect x="99.9394%" y="389" width="0.0188%" height="15" fill="rgb(212,95,11)" fg:x="43677255760" fg:w="8202988"/><text x="100.1894%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (8,202,988 samples, 0.02%)</title><rect x="99.9394%" y="373" width="0.0188%" height="15" fill="rgb(240,179,47)" fg:x="43677255760" fg:w="8202988"/><text x="100.1894%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (8,202,988 samples, 0.02%)</title><rect x="99.9394%" y="357" width="0.0188%" height="15" fill="rgb(240,163,11)" fg:x="43677255760" fg:w="8202988"/><text x="100.1894%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (8,202,988 samples, 0.02%)</title><rect x="99.9394%" y="341" width="0.0188%" height="15" fill="rgb(236,37,12)" fg:x="43677255760" fg:w="8202988"/><text x="100.1894%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,202,988 samples, 0.02%)</title><rect x="99.9394%" y="325" width="0.0188%" height="15" fill="rgb(232,164,16)" fg:x="43677255760" fg:w="8202988"/><text x="100.1894%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,202,988 samples, 0.02%)</title><rect x="99.9394%" y="309" width="0.0188%" height="15" fill="rgb(244,205,15)" fg:x="43677255760" fg:w="8202988"/><text x="100.1894%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,202,988 samples, 0.02%)</title><rect x="99.9394%" y="293" width="0.0188%" height="15" fill="rgb(223,117,47)" fg:x="43677255760" fg:w="8202988"/><text x="100.1894%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,202,988 samples, 0.02%)</title><rect x="99.9394%" y="277" width="0.0188%" height="15" fill="rgb(244,107,35)" fg:x="43677255760" fg:w="8202988"/><text x="100.1894%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,202,988 samples, 0.02%)</title><rect x="99.9394%" y="261" width="0.0188%" height="15" fill="rgb(205,140,8)" fg:x="43677255760" fg:w="8202988"/><text x="100.1894%" y="271.50"></text></g><g><title>img::png::deflate::prefix_table::get_cl_codes_for_code_lengths (6,659,852 samples, 0.02%)</title><rect x="99.9675%" y="389" width="0.0152%" height="15" fill="rgb(228,84,46)" fg:x="43689544366" fg:w="6659852"/><text x="100.2175%" y="399.50"></text></g><g><title>all (43,703,743,746 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="43703743746"/><text x="0.2500%" y="431.50"></text></g><g><title>img (43,703,743,746 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="43703743746"/><text x="0.2500%" y="415.50">img</text></g></svg></svg>