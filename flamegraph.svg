<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="103460074689"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31,342,228 samples, 0.03%)</title><rect x="0.0112%" y="165" width="0.0303%" height="15" fill="rgb(227,0,7)" fg:x="11552162" fg:w="31342228"/><text x="0.2612%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31,342,228 samples, 0.03%)</title><rect x="0.0112%" y="149" width="0.0303%" height="15" fill="rgb(217,0,24)" fg:x="11552162" fg:w="31342228"/><text x="0.2612%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (31,342,228 samples, 0.03%)</title><rect x="0.0112%" y="133" width="0.0303%" height="15" fill="rgb(221,193,54)" fg:x="11552162" fg:w="31342228"/><text x="0.2612%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (31,342,228 samples, 0.03%)</title><rect x="0.0112%" y="117" width="0.0303%" height="15" fill="rgb(248,212,6)" fg:x="11552162" fg:w="31342228"/><text x="0.2612%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31,342,228 samples, 0.03%)</title><rect x="0.0112%" y="101" width="0.0303%" height="15" fill="rgb(208,68,35)" fg:x="11552162" fg:w="31342228"/><text x="0.2612%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31,342,228 samples, 0.03%)</title><rect x="0.0112%" y="85" width="0.0303%" height="15" fill="rgb(232,128,0)" fg:x="11552162" fg:w="31342228"/><text x="0.2612%" y="95.50"></text></g><g><title>alloc::alloc::alloc (31,342,228 samples, 0.03%)</title><rect x="0.0112%" y="69" width="0.0303%" height="15" fill="rgb(207,160,47)" fg:x="11552162" fg:w="31342228"/><text x="0.2612%" y="79.50"></text></g><g><title>malloc (31,342,228 samples, 0.03%)</title><rect x="0.0112%" y="53" width="0.0303%" height="15" fill="rgb(228,23,34)" fg:x="11552162" fg:w="31342228"/><text x="0.2612%" y="63.50"></text></g><g><title>[libc.so.6] (23,335,843 samples, 0.02%)</title><rect x="0.0189%" y="37" width="0.0226%" height="15" fill="rgb(218,30,26)" fg:x="19558547" fg:w="23335843"/><text x="0.2689%" y="47.50"></text></g><g><title>[libc.so.6] (15,748,413 samples, 0.02%)</title><rect x="0.0415%" y="133" width="0.0152%" height="15" fill="rgb(220,122,19)" fg:x="42894390" fg:w="15748413"/><text x="0.2915%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (62,601,805 samples, 0.06%)</title><rect x="0.0000%" y="373" width="0.0605%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="62601805"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (62,601,805 samples, 0.06%)</title><rect x="0.0000%" y="357" width="0.0605%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="62601805"/><text x="0.2500%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (62,601,805 samples, 0.06%)</title><rect x="0.0000%" y="341" width="0.0605%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="62601805"/><text x="0.2500%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (58,757,971 samples, 0.06%)</title><rect x="0.0037%" y="325" width="0.0568%" height="15" fill="rgb(206,188,39)" fg:x="3843834" fg:w="58757971"/><text x="0.2537%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58,757,971 samples, 0.06%)</title><rect x="0.0037%" y="309" width="0.0568%" height="15" fill="rgb(217,207,13)" fg:x="3843834" fg:w="58757971"/><text x="0.2537%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58,757,971 samples, 0.06%)</title><rect x="0.0037%" y="293" width="0.0568%" height="15" fill="rgb(231,73,38)" fg:x="3843834" fg:w="58757971"/><text x="0.2537%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58,757,971 samples, 0.06%)</title><rect x="0.0037%" y="277" width="0.0568%" height="15" fill="rgb(225,20,46)" fg:x="3843834" fg:w="58757971"/><text x="0.2537%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (58,757,971 samples, 0.06%)</title><rect x="0.0037%" y="261" width="0.0568%" height="15" fill="rgb(210,31,41)" fg:x="3843834" fg:w="58757971"/><text x="0.2537%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (51,049,643 samples, 0.05%)</title><rect x="0.0112%" y="245" width="0.0493%" height="15" fill="rgb(221,200,47)" fg:x="11552162" fg:w="51049643"/><text x="0.2612%" y="255.50"></text></g><g><title>core::clone::Clone::clone (51,049,643 samples, 0.05%)</title><rect x="0.0112%" y="229" width="0.0493%" height="15" fill="rgb(226,26,5)" fg:x="11552162" fg:w="51049643"/><text x="0.2612%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (51,049,643 samples, 0.05%)</title><rect x="0.0112%" y="213" width="0.0493%" height="15" fill="rgb(249,33,26)" fg:x="11552162" fg:w="51049643"/><text x="0.2612%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (51,049,643 samples, 0.05%)</title><rect x="0.0112%" y="197" width="0.0493%" height="15" fill="rgb(235,183,28)" fg:x="11552162" fg:w="51049643"/><text x="0.2612%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (51,049,643 samples, 0.05%)</title><rect x="0.0112%" y="181" width="0.0493%" height="15" fill="rgb(221,5,38)" fg:x="11552162" fg:w="51049643"/><text x="0.2612%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19,707,415 samples, 0.02%)</title><rect x="0.0415%" y="165" width="0.0190%" height="15" fill="rgb(247,18,42)" fg:x="42894390" fg:w="19707415"/><text x="0.2915%" y="175.50"></text></g><g><title>core::ptr::copy_nonoverlapping (19,707,415 samples, 0.02%)</title><rect x="0.0415%" y="149" width="0.0190%" height="15" fill="rgb(241,131,45)" fg:x="42894390" fg:w="19707415"/><text x="0.2915%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="325" width="0.0151%" height="15" fill="rgb(249,31,29)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="309" width="0.0151%" height="15" fill="rgb(225,111,53)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="293" width="0.0151%" height="15" fill="rgb(238,160,17)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="277" width="0.0151%" height="15" fill="rgb(214,148,48)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="261" width="0.0151%" height="15" fill="rgb(232,36,49)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="245" width="0.0151%" height="15" fill="rgb(209,103,24)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="255.50"></text></g><g><title>alloc::alloc::alloc (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="229" width="0.0151%" height="15" fill="rgb(229,88,8)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="239.50"></text></g><g><title>malloc (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="213" width="0.0151%" height="15" fill="rgb(213,181,19)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="223.50"></text></g><g><title>[libc.so.6] (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="197" width="0.0151%" height="15" fill="rgb(254,191,54)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="207.50"></text></g><g><title>[libc.so.6] (15,629,623 samples, 0.02%)</title><rect x="0.0605%" y="181" width="0.0151%" height="15" fill="rgb(241,83,37)" fg:x="62601805" fg:w="15629623"/><text x="0.3105%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (42,257,378 samples, 0.04%)</title><rect x="0.0756%" y="261" width="0.0408%" height="15" fill="rgb(233,36,39)" fg:x="78231428" fg:w="42257378"/><text x="0.3256%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42,257,378 samples, 0.04%)</title><rect x="0.0756%" y="245" width="0.0408%" height="15" fill="rgb(226,3,54)" fg:x="78231428" fg:w="42257378"/><text x="0.3256%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (42,257,378 samples, 0.04%)</title><rect x="0.0756%" y="229" width="0.0408%" height="15" fill="rgb(245,192,40)" fg:x="78231428" fg:w="42257378"/><text x="0.3256%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (42,257,378 samples, 0.04%)</title><rect x="0.0756%" y="213" width="0.0408%" height="15" fill="rgb(238,167,29)" fg:x="78231428" fg:w="42257378"/><text x="0.3256%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42,257,378 samples, 0.04%)</title><rect x="0.0756%" y="197" width="0.0408%" height="15" fill="rgb(232,182,51)" fg:x="78231428" fg:w="42257378"/><text x="0.3256%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42,257,378 samples, 0.04%)</title><rect x="0.0756%" y="181" width="0.0408%" height="15" fill="rgb(231,60,39)" fg:x="78231428" fg:w="42257378"/><text x="0.3256%" y="191.50"></text></g><g><title>alloc::alloc::alloc (42,257,378 samples, 0.04%)</title><rect x="0.0756%" y="165" width="0.0408%" height="15" fill="rgb(208,69,12)" fg:x="78231428" fg:w="42257378"/><text x="0.3256%" y="175.50"></text></g><g><title>malloc (42,257,378 samples, 0.04%)</title><rect x="0.0756%" y="149" width="0.0408%" height="15" fill="rgb(235,93,37)" fg:x="78231428" fg:w="42257378"/><text x="0.3256%" y="159.50"></text></g><g><title>[libc.so.6] (15,485,547 samples, 0.01%)</title><rect x="0.1015%" y="133" width="0.0150%" height="15" fill="rgb(213,116,39)" fg:x="105003259" fg:w="15485547"/><text x="0.3515%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (65,525,991 samples, 0.06%)</title><rect x="0.0605%" y="373" width="0.0633%" height="15" fill="rgb(222,207,29)" fg:x="62601805" fg:w="65525991"/><text x="0.3105%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (65,525,991 samples, 0.06%)</title><rect x="0.0605%" y="357" width="0.0633%" height="15" fill="rgb(206,96,30)" fg:x="62601805" fg:w="65525991"/><text x="0.3105%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (65,525,991 samples, 0.06%)</title><rect x="0.0605%" y="341" width="0.0633%" height="15" fill="rgb(218,138,4)" fg:x="62601805" fg:w="65525991"/><text x="0.3105%" y="351.50"></text></g><g><title>core::clone::Clone::clone (49,896,368 samples, 0.05%)</title><rect x="0.0756%" y="325" width="0.0482%" height="15" fill="rgb(250,191,14)" fg:x="78231428" fg:w="49896368"/><text x="0.3256%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (49,896,368 samples, 0.05%)</title><rect x="0.0756%" y="309" width="0.0482%" height="15" fill="rgb(239,60,40)" fg:x="78231428" fg:w="49896368"/><text x="0.3256%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49,896,368 samples, 0.05%)</title><rect x="0.0756%" y="293" width="0.0482%" height="15" fill="rgb(206,27,48)" fg:x="78231428" fg:w="49896368"/><text x="0.3256%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (49,896,368 samples, 0.05%)</title><rect x="0.0756%" y="277" width="0.0482%" height="15" fill="rgb(225,35,8)" fg:x="78231428" fg:w="49896368"/><text x="0.3256%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (289,528,207 samples, 0.28%)</title><rect x="0.1386%" y="325" width="0.2798%" height="15" fill="rgb(250,213,24)" fg:x="143400169" fg:w="289528207"/><text x="0.3886%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (39,168,817 samples, 0.04%)</title><rect x="0.4222%" y="261" width="0.0379%" height="15" fill="rgb(247,123,22)" fg:x="436852255" fg:w="39168817"/><text x="0.6722%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39,168,817 samples, 0.04%)</title><rect x="0.4222%" y="245" width="0.0379%" height="15" fill="rgb(231,138,38)" fg:x="436852255" fg:w="39168817"/><text x="0.6722%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (39,168,817 samples, 0.04%)</title><rect x="0.4222%" y="229" width="0.0379%" height="15" fill="rgb(231,145,46)" fg:x="436852255" fg:w="39168817"/><text x="0.6722%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39,168,817 samples, 0.04%)</title><rect x="0.4222%" y="213" width="0.0379%" height="15" fill="rgb(251,118,11)" fg:x="436852255" fg:w="39168817"/><text x="0.6722%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (39,168,817 samples, 0.04%)</title><rect x="0.4222%" y="197" width="0.0379%" height="15" fill="rgb(217,147,25)" fg:x="436852255" fg:w="39168817"/><text x="0.6722%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39,168,817 samples, 0.04%)</title><rect x="0.4222%" y="181" width="0.0379%" height="15" fill="rgb(247,81,37)" fg:x="436852255" fg:w="39168817"/><text x="0.6722%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (39,168,817 samples, 0.04%)</title><rect x="0.4222%" y="165" width="0.0379%" height="15" fill="rgb(209,12,38)" fg:x="436852255" fg:w="39168817"/><text x="0.6722%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39,168,817 samples, 0.04%)</title><rect x="0.4222%" y="149" width="0.0379%" height="15" fill="rgb(227,1,9)" fg:x="436852255" fg:w="39168817"/><text x="0.6722%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (39,168,817 samples, 0.04%)</title><rect x="0.4222%" y="133" width="0.0379%" height="15" fill="rgb(248,47,43)" fg:x="436852255" fg:w="39168817"/><text x="0.6722%" y="143.50"></text></g><g><title>cfree (35,350,118 samples, 0.03%)</title><rect x="0.4259%" y="117" width="0.0342%" height="15" fill="rgb(221,10,30)" fg:x="440670954" fg:w="35350118"/><text x="0.6759%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46,873,651 samples, 0.05%)</title><rect x="0.4222%" y="293" width="0.0453%" height="15" fill="rgb(210,229,1)" fg:x="436852255" fg:w="46873651"/><text x="0.6722%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46,873,651 samples, 0.05%)</title><rect x="0.4222%" y="277" width="0.0453%" height="15" fill="rgb(222,148,37)" fg:x="436852255" fg:w="46873651"/><text x="0.6722%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,710,454 samples, 0.01%)</title><rect x="0.4675%" y="293" width="0.0113%" height="15" fill="rgb(234,67,33)" fg:x="483725906" fg:w="11710454"/><text x="0.7175%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (11,838,317 samples, 0.01%)</title><rect x="0.4903%" y="277" width="0.0114%" height="15" fill="rgb(247,98,35)" fg:x="507282507" fg:w="11838317"/><text x="0.7403%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (11,838,317 samples, 0.01%)</title><rect x="0.4903%" y="261" width="0.0114%" height="15" fill="rgb(247,138,52)" fg:x="507282507" fg:w="11838317"/><text x="0.7403%" y="271.50"></text></g><g><title>core::ptr::write (11,838,317 samples, 0.01%)</title><rect x="0.4903%" y="245" width="0.0114%" height="15" fill="rgb(213,79,30)" fg:x="507282507" fg:w="11838317"/><text x="0.7403%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (112,454,886 samples, 0.11%)</title><rect x="0.5018%" y="277" width="0.1087%" height="15" fill="rgb(246,177,23)" fg:x="519120824" fg:w="112454886"/><text x="0.7518%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112,454,886 samples, 0.11%)</title><rect x="0.5018%" y="261" width="0.1087%" height="15" fill="rgb(230,62,27)" fg:x="519120824" fg:w="112454886"/><text x="0.7518%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (112,454,886 samples, 0.11%)</title><rect x="0.5018%" y="245" width="0.1087%" height="15" fill="rgb(216,154,8)" fg:x="519120824" fg:w="112454886"/><text x="0.7518%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112,454,886 samples, 0.11%)</title><rect x="0.5018%" y="229" width="0.1087%" height="15" fill="rgb(244,35,45)" fg:x="519120824" fg:w="112454886"/><text x="0.7518%" y="239.50"></text></g><g><title>core::ptr::copy (108,596,315 samples, 0.10%)</title><rect x="0.5055%" y="213" width="0.1050%" height="15" fill="rgb(251,115,12)" fg:x="522979395" fg:w="108596315"/><text x="0.7555%" y="223.50"></text></g><g><title>[libc.so.6] (108,596,315 samples, 0.10%)</title><rect x="0.5055%" y="197" width="0.1050%" height="15" fill="rgb(240,54,50)" fg:x="522979395" fg:w="108596315"/><text x="0.7555%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (492,081,829 samples, 0.48%)</title><rect x="0.1386%" y="341" width="0.4756%" height="15" fill="rgb(233,84,52)" fg:x="143400169" fg:w="492081829"/><text x="0.3886%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (202,553,622 samples, 0.20%)</title><rect x="0.4184%" y="325" width="0.1958%" height="15" fill="rgb(207,117,47)" fg:x="432928376" fg:w="202553622"/><text x="0.6684%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (198,629,743 samples, 0.19%)</title><rect x="0.4222%" y="309" width="0.1920%" height="15" fill="rgb(249,43,39)" fg:x="436852255" fg:w="198629743"/><text x="0.6722%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (140,045,638 samples, 0.14%)</title><rect x="0.4789%" y="293" width="0.1354%" height="15" fill="rgb(209,38,44)" fg:x="495436360" fg:w="140045638"/><text x="0.7289%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (589,411,397 samples, 0.57%)</title><rect x="0.1238%" y="373" width="0.5697%" height="15" fill="rgb(236,212,23)" fg:x="128127796" fg:w="589411397"/><text x="0.3738%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (585,663,827 samples, 0.57%)</title><rect x="0.1275%" y="357" width="0.5661%" height="15" fill="rgb(242,79,21)" fg:x="131875366" fg:w="585663827"/><text x="0.3775%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (78,146,632 samples, 0.08%)</title><rect x="0.6180%" y="341" width="0.0755%" height="15" fill="rgb(211,96,35)" fg:x="639392561" fg:w="78146632"/><text x="0.8680%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (78,146,632 samples, 0.08%)</title><rect x="0.6180%" y="325" width="0.0755%" height="15" fill="rgb(253,215,40)" fg:x="639392561" fg:w="78146632"/><text x="0.8680%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (74,312,076 samples, 0.07%)</title><rect x="0.6217%" y="309" width="0.0718%" height="15" fill="rgb(211,81,21)" fg:x="643227117" fg:w="74312076"/><text x="0.8717%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (74,312,076 samples, 0.07%)</title><rect x="0.6217%" y="293" width="0.0718%" height="15" fill="rgb(208,190,38)" fg:x="643227117" fg:w="74312076"/><text x="0.8717%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (74,312,076 samples, 0.07%)</title><rect x="0.6217%" y="277" width="0.0718%" height="15" fill="rgb(235,213,38)" fg:x="643227117" fg:w="74312076"/><text x="0.8717%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (74,312,076 samples, 0.07%)</title><rect x="0.6217%" y="261" width="0.0718%" height="15" fill="rgb(237,122,38)" fg:x="643227117" fg:w="74312076"/><text x="0.8717%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (74,312,076 samples, 0.07%)</title><rect x="0.6217%" y="245" width="0.0718%" height="15" fill="rgb(244,218,35)" fg:x="643227117" fg:w="74312076"/><text x="0.8717%" y="255.50"></text></g><g><title>alloc::alloc::alloc (74,312,076 samples, 0.07%)</title><rect x="0.6217%" y="229" width="0.0718%" height="15" fill="rgb(240,68,47)" fg:x="643227117" fg:w="74312076"/><text x="0.8717%" y="239.50"></text></g><g><title>malloc (70,383,373 samples, 0.07%)</title><rect x="0.6255%" y="213" width="0.0680%" height="15" fill="rgb(210,16,53)" fg:x="647155820" fg:w="70383373"/><text x="0.8755%" y="223.50"></text></g><g><title>[libc.so.6] (19,499,334 samples, 0.02%)</title><rect x="0.6747%" y="197" width="0.0188%" height="15" fill="rgb(235,124,12)" fg:x="698039859" fg:w="19499334"/><text x="0.9247%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,075,301,917 samples, 2.01%)</title><rect x="0.6935%" y="373" width="2.0059%" height="15" fill="rgb(224,169,11)" fg:x="717539193" fg:w="2075301917"/><text x="0.9435%" y="383.50">&lt;..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,075,301,917 samples, 2.01%)</title><rect x="0.6935%" y="357" width="2.0059%" height="15" fill="rgb(250,166,2)" fg:x="717539193" fg:w="2075301917"/><text x="0.9435%" y="367.50">c..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (2,075,301,917 samples, 2.01%)</title><rect x="0.6935%" y="341" width="2.0059%" height="15" fill="rgb(242,216,29)" fg:x="717539193" fg:w="2075301917"/><text x="0.9435%" y="351.50">i..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,135,313,743 samples, 4.00%)</title><rect x="9.4609%" y="293" width="3.9970%" height="15" fill="rgb(230,116,27)" fg:x="9788260993" fg:w="4135313743"/><text x="9.7109%" y="303.50">&lt;cor..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (368,466,373 samples, 0.36%)</title><rect x="13.1018%" y="277" width="0.3561%" height="15" fill="rgb(228,99,48)" fg:x="13555108363" fg:w="368466373"/><text x="13.3518%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,654,894,604 samples, 6.43%)</title><rect x="9.4609%" y="357" width="6.4323%" height="15" fill="rgb(253,11,6)" fg:x="9788260993" fg:w="6654894604"/><text x="9.7109%" y="367.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::find (6,654,894,604 samples, 6.43%)</title><rect x="9.4609%" y="341" width="6.4323%" height="15" fill="rgb(247,143,39)" fg:x="9788260993" fg:w="6654894604"/><text x="9.7109%" y="351.50">core::it..</text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6,654,894,604 samples, 6.43%)</title><rect x="9.4609%" y="325" width="6.4323%" height="15" fill="rgb(236,97,10)" fg:x="9788260993" fg:w="6654894604"/><text x="9.7109%" y="335.50">&lt;alloc::..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6,654,894,604 samples, 6.43%)</title><rect x="9.4609%" y="309" width="6.4323%" height="15" fill="rgb(233,208,19)" fg:x="9788260993" fg:w="6654894604"/><text x="9.7109%" y="319.50">core::it..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,519,580,861 samples, 2.44%)</title><rect x="13.4579%" y="293" width="2.4353%" height="15" fill="rgb(216,164,2)" fg:x="13923574736" fg:w="2519580861"/><text x="13.7079%" y="303.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (2,519,580,861 samples, 2.44%)</title><rect x="13.4579%" y="277" width="2.4353%" height="15" fill="rgb(220,129,5)" fg:x="13923574736" fg:w="2519580861"/><text x="13.7079%" y="287.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,519,580,861 samples, 2.44%)</title><rect x="13.4579%" y="261" width="2.4353%" height="15" fill="rgb(242,17,10)" fg:x="13923574736" fg:w="2519580861"/><text x="13.7079%" y="271.50">co..</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (2,519,580,861 samples, 2.44%)</title><rect x="13.4579%" y="245" width="2.4353%" height="15" fill="rgb(242,107,0)" fg:x="13923574736" fg:w="2519580861"/><text x="13.7079%" y="255.50">im..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (3,350,212,579 samples, 3.24%)</title><rect x="22.0689%" y="309" width="3.2382%" height="15" fill="rgb(251,28,31)" fg:x="22832477475" fg:w="3350212579"/><text x="22.3189%" y="319.50">cor..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (771,329,914 samples, 0.75%)</title><rect x="25.6659%" y="277" width="0.7455%" height="15" fill="rgb(233,223,10)" fg:x="26553913235" fg:w="771329914"/><text x="25.9159%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,471,259,841 samples, 1.42%)</title><rect x="25.3070%" y="309" width="1.4221%" height="15" fill="rgb(215,21,27)" fg:x="26182690054" fg:w="1471259841"/><text x="25.5570%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,471,259,841 samples, 1.42%)</title><rect x="25.3070%" y="293" width="1.4221%" height="15" fill="rgb(232,23,21)" fg:x="26182690054" fg:w="1471259841"/><text x="25.5570%" y="303.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (328,706,746 samples, 0.32%)</title><rect x="26.4114%" y="277" width="0.3177%" height="15" fill="rgb(244,5,23)" fg:x="27325243149" fg:w="328706746"/><text x="26.6614%" y="287.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (108,921,012 samples, 0.11%)</title><rect x="27.2309%" y="293" width="0.1053%" height="15" fill="rgb(226,81,46)" fg:x="28173115373" fg:w="108921012"/><text x="27.4809%" y="303.50"></text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (108,921,012 samples, 0.11%)</title><rect x="27.2309%" y="277" width="0.1053%" height="15" fill="rgb(247,70,30)" fg:x="28173115373" fg:w="108921012"/><text x="27.4809%" y="287.50"></text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (108,921,012 samples, 0.11%)</title><rect x="27.2309%" y="261" width="0.1053%" height="15" fill="rgb(212,68,19)" fg:x="28173115373" fg:w="108921012"/><text x="27.4809%" y="271.50"></text></g><g><title>core::cmp::Ord::min (359,074,278 samples, 0.35%)</title><rect x="27.3362%" y="293" width="0.3471%" height="15" fill="rgb(240,187,13)" fg:x="28282036385" fg:w="359074278"/><text x="27.5862%" y="303.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::from_slice (112,396,074 samples, 0.11%)</title><rect x="27.6832%" y="293" width="0.1086%" height="15" fill="rgb(223,113,26)" fg:x="28641110663" fg:w="112396074"/><text x="27.9332%" y="303.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::load (112,396,074 samples, 0.11%)</title><rect x="27.6832%" y="277" width="0.1086%" height="15" fill="rgb(206,192,2)" fg:x="28641110663" fg:w="112396074"/><text x="27.9332%" y="287.50"></text></g><g><title>core::ptr::copy_nonoverlapping (112,396,074 samples, 0.11%)</title><rect x="27.6832%" y="261" width="0.1086%" height="15" fill="rgb(241,108,4)" fg:x="28641110663" fg:w="112396074"/><text x="27.9332%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (428,653,712 samples, 0.41%)</title><rect x="27.7919%" y="293" width="0.4143%" height="15" fill="rgb(247,173,49)" fg:x="28753506737" fg:w="428653712"/><text x="28.0419%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (428,653,712 samples, 0.41%)</title><rect x="27.7919%" y="277" width="0.4143%" height="15" fill="rgb(224,114,35)" fg:x="28753506737" fg:w="428653712"/><text x="28.0419%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (19,178,298 samples, 0.02%)</title><rect x="28.1877%" y="261" width="0.0185%" height="15" fill="rgb(245,159,27)" fg:x="29162982151" fg:w="19178298"/><text x="28.4377%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26,392,271,986 samples, 25.51%)</title><rect x="2.7004%" y="373" width="25.5096%" height="15" fill="rgb(245,172,44)" fg:x="2793844118" fg:w="26392271986"/><text x="2.9504%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as c..</text></g><g><title>core::option::Option&lt;T&gt;::map (12,742,960,507 samples, 12.32%)</title><rect x="15.8932%" y="357" width="12.3168%" height="15" fill="rgb(236,23,11)" fg:x="16443155597" fg:w="12742960507"/><text x="16.1432%" y="367.50">core::option::Opti..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (12,742,960,507 samples, 12.32%)</title><rect x="15.8932%" y="341" width="12.3168%" height="15" fill="rgb(205,117,38)" fg:x="16443155597" fg:w="12742960507"/><text x="16.1432%" y="351.50">core::ops::functio..</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (11,980,389,152 samples, 11.58%)</title><rect x="16.6303%" y="325" width="11.5797%" height="15" fill="rgb(237,72,25)" fg:x="17205726952" fg:w="11980389152"/><text x="16.8803%" y="335.50">img::png::deflate..</text></g><g><title>img::simd_utils::number_of_matching_bytes (1,532,166,209 samples, 1.48%)</title><rect x="26.7291%" y="309" width="1.4809%" height="15" fill="rgb(244,70,9)" fg:x="27653949895" fg:w="1532166209"/><text x="26.9791%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (22,563,633 samples, 0.02%)</title><rect x="28.2100%" y="373" width="0.0218%" height="15" fill="rgb(217,125,39)" fg:x="29186116104" fg:w="22563633"/><text x="28.4600%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (22,563,633 samples, 0.02%)</title><rect x="28.2100%" y="357" width="0.0218%" height="15" fill="rgb(235,36,10)" fg:x="29186116104" fg:w="22563633"/><text x="28.4600%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22,563,633 samples, 0.02%)</title><rect x="28.2100%" y="341" width="0.0218%" height="15" fill="rgb(251,123,47)" fg:x="29186116104" fg:w="22563633"/><text x="28.4600%" y="351.50"></text></g><g><title>[libc.so.6] (23,226,192 samples, 0.02%)</title><rect x="28.2409%" y="373" width="0.0224%" height="15" fill="rgb(221,13,13)" fg:x="29218069784" fg:w="23226192"/><text x="28.4909%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (814,155,283 samples, 0.79%)</title><rect x="28.2710%" y="309" width="0.7869%" height="15" fill="rgb(238,131,9)" fg:x="29249199271" fg:w="814155283"/><text x="28.5210%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (821,830,914 samples, 0.79%)</title><rect x="28.2710%" y="325" width="0.7943%" height="15" fill="rgb(211,50,8)" fg:x="29249199271" fg:w="821830914"/><text x="28.5210%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (829,689,861 samples, 0.80%)</title><rect x="28.2672%" y="357" width="0.8019%" height="15" fill="rgb(245,182,24)" fg:x="29245251197" fg:w="829689861"/><text x="28.5172%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (829,689,861 samples, 0.80%)</title><rect x="28.2672%" y="341" width="0.8019%" height="15" fill="rgb(242,14,37)" fg:x="29245251197" fg:w="829689861"/><text x="28.5172%" y="351.50"></text></g><g><title>core::cmp::PartialEq::ne (1,713,203,028 samples, 1.66%)</title><rect x="32.7463%" y="341" width="1.6559%" height="15" fill="rgb(246,228,12)" fg:x="33879387859" fg:w="1713203028"/><text x="32.9963%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,713,203,028 samples, 1.66%)</title><rect x="32.7463%" y="325" width="1.6559%" height="15" fill="rgb(213,55,15)" fg:x="33879387859" fg:w="1713203028"/><text x="32.9963%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6,908,673,438 samples, 6.68%)</title><rect x="34.4022%" y="325" width="6.6776%" height="15" fill="rgb(209,9,3)" fg:x="35592590887" fg:w="6908673438"/><text x="34.6522%" y="335.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (2,403,005,038 samples, 2.32%)</title><rect x="38.7572%" y="309" width="2.3226%" height="15" fill="rgb(230,59,30)" fg:x="40098259287" fg:w="2403005038"/><text x="39.0072%" y="319.50">c..</text></g><g><title>core::cmp::min_by (2,403,005,038 samples, 2.32%)</title><rect x="38.7572%" y="293" width="2.3226%" height="15" fill="rgb(209,121,21)" fg:x="40098259287" fg:w="2403005038"/><text x="39.0072%" y="303.50">c..</text></g><g><title>core::cmp::Ordering::is_lt (38,589,690 samples, 0.04%)</title><rect x="41.0426%" y="277" width="0.0373%" height="15" fill="rgb(220,109,13)" fg:x="42462674635" fg:w="38589690"/><text x="41.2926%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,061,593,132 samples, 2.96%)</title><rect x="51.6090%" y="309" width="2.9592%" height="15" fill="rgb(232,18,1)" fg:x="53394712938" fg:w="3061593132"/><text x="51.8590%" y="319.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,061,593,132 samples, 2.96%)</title><rect x="51.6090%" y="293" width="2.9592%" height="15" fill="rgb(215,41,42)" fg:x="53394712938" fg:w="3061593132"/><text x="51.8590%" y="303.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (894,536,940 samples, 0.86%)</title><rect x="53.7036%" y="277" width="0.8646%" height="15" fill="rgb(224,123,36)" fg:x="55561769130" fg:w="894536940"/><text x="53.9536%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (894,536,940 samples, 0.86%)</title><rect x="53.7036%" y="261" width="0.8646%" height="15" fill="rgb(240,125,3)" fg:x="55561769130" fg:w="894536940"/><text x="53.9536%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (894,536,940 samples, 0.86%)</title><rect x="53.7036%" y="245" width="0.8646%" height="15" fill="rgb(205,98,50)" fg:x="55561769130" fg:w="894536940"/><text x="53.9536%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (894,536,940 samples, 0.86%)</title><rect x="53.7036%" y="229" width="0.8646%" height="15" fill="rgb(205,185,37)" fg:x="55561769130" fg:w="894536940"/><text x="53.9536%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (81,748,927 samples, 0.08%)</title><rect x="54.5682%" y="309" width="0.0790%" height="15" fill="rgb(238,207,15)" fg:x="56456306070" fg:w="81748927"/><text x="54.8182%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (866,655,039 samples, 0.84%)</title><rect x="55.7084%" y="261" width="0.8377%" height="15" fill="rgb(213,199,42)" fg:x="57635916291" fg:w="866655039"/><text x="55.9584%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (866,655,039 samples, 0.84%)</title><rect x="55.7084%" y="245" width="0.8377%" height="15" fill="rgb(235,201,11)" fg:x="57635916291" fg:w="866655039"/><text x="55.9584%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (62,221,711 samples, 0.06%)</title><rect x="56.4859%" y="229" width="0.0601%" height="15" fill="rgb(207,46,11)" fg:x="58440349619" fg:w="62221711"/><text x="56.7359%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (62,221,711 samples, 0.06%)</title><rect x="56.4859%" y="213" width="0.0601%" height="15" fill="rgb(241,35,35)" fg:x="58440349619" fg:w="62221711"/><text x="56.7359%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (62,221,711 samples, 0.06%)</title><rect x="56.4859%" y="197" width="0.0601%" height="15" fill="rgb(243,32,47)" fg:x="58440349619" fg:w="62221711"/><text x="56.7359%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (62,221,711 samples, 0.06%)</title><rect x="56.4859%" y="181" width="0.0601%" height="15" fill="rgb(247,202,23)" fg:x="58440349619" fg:w="62221711"/><text x="56.7359%" y="191.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (24,378,182,678 samples, 23.56%)</title><rect x="34.4022%" y="341" width="23.5629%" height="15" fill="rgb(219,102,11)" fg:x="35592590887" fg:w="24378182678"/><text x="34.6522%" y="351.50">core::iter::adapters::map::map_fold::..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (17,469,509,240 samples, 16.89%)</title><rect x="41.0799%" y="325" width="16.8853%" height="15" fill="rgb(243,110,44)" fg:x="42501264325" fg:w="17469509240"/><text x="41.3299%" y="335.50">img::png::deflate::lzss::e..</text></g><g><title>core::option::Option&lt;T&gt;::map (3,432,718,568 samples, 3.32%)</title><rect x="54.6472%" y="309" width="3.3179%" height="15" fill="rgb(222,74,54)" fg:x="56538054997" fg:w="3432718568"/><text x="54.8972%" y="319.50">cor..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}}::_{{closure}} (3,432,718,568 samples, 3.32%)</title><rect x="54.6472%" y="293" width="3.3179%" height="15" fill="rgb(216,99,12)" fg:x="56538054997" fg:w="3432718568"/><text x="54.8972%" y="303.50">img..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,334,857,274 samples, 2.26%)</title><rect x="55.7084%" y="277" width="2.2568%" height="15" fill="rgb(226,22,26)" fg:x="57635916291" fg:w="2334857274"/><text x="55.9584%" y="287.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,468,202,235 samples, 1.42%)</title><rect x="56.5460%" y="261" width="1.4191%" height="15" fill="rgb(217,163,10)" fg:x="58502571330" fg:w="1468202235"/><text x="56.7960%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,468,202,235 samples, 1.42%)</title><rect x="56.5460%" y="245" width="1.4191%" height="15" fill="rgb(213,25,53)" fg:x="58502571330" fg:w="1468202235"/><text x="56.7960%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u16,u16)&gt;&gt; (42,839,231 samples, 0.04%)</title><rect x="57.9651%" y="341" width="0.0414%" height="15" fill="rgb(252,105,26)" fg:x="59970773565" fg:w="42839231"/><text x="58.2151%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42,839,231 samples, 0.04%)</title><rect x="57.9651%" y="325" width="0.0414%" height="15" fill="rgb(220,39,43)" fg:x="59970773565" fg:w="42839231"/><text x="58.2151%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u16,u16),alloc::alloc::Global&gt;&gt; (42,839,231 samples, 0.04%)</title><rect x="57.9651%" y="309" width="0.0414%" height="15" fill="rgb(229,68,48)" fg:x="59970773565" fg:w="42839231"/><text x="58.2151%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42,839,231 samples, 0.04%)</title><rect x="57.9651%" y="293" width="0.0414%" height="15" fill="rgb(252,8,32)" fg:x="59970773565" fg:w="42839231"/><text x="58.2151%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u16,u16)&gt;&gt; (42,839,231 samples, 0.04%)</title><rect x="57.9651%" y="277" width="0.0414%" height="15" fill="rgb(223,20,43)" fg:x="59970773565" fg:w="42839231"/><text x="58.2151%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42,839,231 samples, 0.04%)</title><rect x="57.9651%" y="261" width="0.0414%" height="15" fill="rgb(229,81,49)" fg:x="59970773565" fg:w="42839231"/><text x="58.2151%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (42,839,231 samples, 0.04%)</title><rect x="57.9651%" y="245" width="0.0414%" height="15" fill="rgb(236,28,36)" fg:x="59970773565" fg:w="42839231"/><text x="58.2151%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42,839,231 samples, 0.04%)</title><rect x="57.9651%" y="229" width="0.0414%" height="15" fill="rgb(249,185,26)" fg:x="59970773565" fg:w="42839231"/><text x="58.2151%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (42,839,231 samples, 0.04%)</title><rect x="57.9651%" y="213" width="0.0414%" height="15" fill="rgb(249,174,33)" fg:x="59970773565" fg:w="42839231"/><text x="58.2151%" y="223.50"></text></g><g><title>cfree (34,914,243 samples, 0.03%)</title><rect x="57.9728%" y="197" width="0.0337%" height="15" fill="rgb(233,201,37)" fg:x="59978698553" fg:w="34914243"/><text x="58.2228%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31,229,513,398 samples, 30.19%)</title><rect x="29.0691%" y="357" width="30.1851%" height="15" fill="rgb(221,78,26)" fg:x="30074941058" fg:w="31229513398"/><text x="29.3191%" y="367.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::it..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1,290,841,660 samples, 1.25%)</title><rect x="58.0065%" y="341" width="1.2477%" height="15" fill="rgb(250,127,30)" fg:x="60013612796" fg:w="1290841660"/><text x="58.2565%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (19,363,059 samples, 0.02%)</title><rect x="59.2542%" y="357" width="0.0187%" height="15" fill="rgb(230,49,44)" fg:x="61304454456" fg:w="19363059"/><text x="59.5042%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (19,363,059 samples, 0.02%)</title><rect x="59.2542%" y="341" width="0.0187%" height="15" fill="rgb(229,67,23)" fg:x="61304454456" fg:w="19363059"/><text x="59.5042%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19,363,059 samples, 0.02%)</title><rect x="59.2542%" y="325" width="0.0187%" height="15" fill="rgb(249,83,47)" fg:x="61304454456" fg:w="19363059"/><text x="59.5042%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (11,737,743 samples, 0.01%)</title><rect x="59.2616%" y="309" width="0.0113%" height="15" fill="rgb(215,43,3)" fg:x="61312079772" fg:w="11737743"/><text x="59.5116%" y="319.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2,287,591,405 samples, 2.21%)</title><rect x="62.9526%" y="325" width="2.2111%" height="15" fill="rgb(238,154,13)" fg:x="65130852208" fg:w="2287591405"/><text x="63.2026%" y="335.50">&lt;..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (2,287,591,405 samples, 2.21%)</title><rect x="62.9526%" y="309" width="2.2111%" height="15" fill="rgb(219,56,2)" fg:x="65130852208" fg:w="2287591405"/><text x="63.2026%" y="319.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,287,591,405 samples, 2.21%)</title><rect x="62.9526%" y="293" width="2.2111%" height="15" fill="rgb(233,0,4)" fg:x="65130852208" fg:w="2287591405"/><text x="63.2026%" y="303.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,287,591,405 samples, 2.21%)</title><rect x="62.9526%" y="277" width="2.2111%" height="15" fill="rgb(235,30,7)" fg:x="65130852208" fg:w="2287591405"/><text x="63.2026%" y="287.50">a..</text></g><g><title>alloc::collections::vec_deque::wrap_index (2,287,591,405 samples, 2.21%)</title><rect x="62.9526%" y="261" width="2.2111%" height="15" fill="rgb(250,79,13)" fg:x="65130852208" fg:w="2287591405"/><text x="63.2026%" y="271.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (621,700,120 samples, 0.60%)</title><rect x="65.1637%" y="325" width="0.6009%" height="15" fill="rgb(211,146,34)" fg:x="67418443613" fg:w="621700120"/><text x="65.4137%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert::_{{closure}} (621,700,120 samples, 0.60%)</title><rect x="65.1637%" y="309" width="0.6009%" height="15" fill="rgb(228,22,38)" fg:x="67418443613" fg:w="621700120"/><text x="65.4137%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (1,095,863,364 samples, 1.06%)</title><rect x="65.7723%" y="277" width="1.0592%" height="15" fill="rgb(235,168,5)" fg:x="68048028815" fg:w="1095863364"/><text x="66.0223%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (2,188,533,233 samples, 2.12%)</title><rect x="65.7723%" y="309" width="2.1153%" height="15" fill="rgb(221,155,16)" fg:x="68048028815" fg:w="2188533233"/><text x="66.0223%" y="319.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2,188,533,233 samples, 2.12%)</title><rect x="65.7723%" y="293" width="2.1153%" height="15" fill="rgb(215,215,53)" fg:x="68048028815" fg:w="2188533233"/><text x="66.0223%" y="303.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1,092,669,869 samples, 1.06%)</title><rect x="66.8315%" y="277" width="1.0561%" height="15" fill="rgb(223,4,10)" fg:x="69143892179" fg:w="1092669869"/><text x="67.0815%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (15,487,320 samples, 0.01%)</title><rect x="67.8876%" y="309" width="0.0150%" height="15" fill="rgb(234,103,6)" fg:x="70236562048" fg:w="15487320"/><text x="68.1376%" y="319.50"></text></g><g><title>core::ptr::copy (956,522,476 samples, 0.92%)</title><rect x="67.9026%" y="293" width="0.9245%" height="15" fill="rgb(227,97,0)" fg:x="70252049368" fg:w="956522476"/><text x="68.1526%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (13,222,480,856 samples, 12.78%)</title><rect x="59.2956%" y="357" width="12.7803%" height="15" fill="rgb(234,150,53)" fg:x="61347261780" fg:w="13222480856"/><text x="59.5456%" y="367.50">alloc::collections:..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (13,222,480,856 samples, 12.78%)</title><rect x="59.2956%" y="341" width="12.7803%" height="15" fill="rgb(228,201,54)" fg:x="61347261780" fg:w="13222480856"/><text x="59.5456%" y="351.50">alloc::collections:..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::swap (6,529,598,903 samples, 6.31%)</title><rect x="65.7646%" y="325" width="6.3112%" height="15" fill="rgb(222,22,37)" fg:x="68040143733" fg:w="6529598903"/><text x="66.0146%" y="335.50">alloc::c..</text></g><g><title>core::ptr::swap (4,317,693,268 samples, 4.17%)</title><rect x="67.9026%" y="309" width="4.1733%" height="15" fill="rgb(237,53,32)" fg:x="70252049368" fg:w="4317693268"/><text x="68.1526%" y="319.50">core:..</text></g><g><title>core::ptr::copy_nonoverlapping (3,361,170,792 samples, 3.25%)</title><rect x="68.8271%" y="293" width="3.2488%" height="15" fill="rgb(233,25,53)" fg:x="71208571844" fg:w="3361170792"/><text x="69.0771%" y="303.50">cor..</text></g><g><title>__rustc::__rdl_realloc (23,306,705 samples, 0.02%)</title><rect x="72.0822%" y="293" width="0.0225%" height="15" fill="rgb(210,40,34)" fg:x="74576301339" fg:w="23306705"/><text x="72.3322%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (547,781,069 samples, 0.53%)</title><rect x="72.0785%" y="357" width="0.5295%" height="15" fill="rgb(241,220,44)" fg:x="74572419859" fg:w="547781069"/><text x="72.3285%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (543,899,589 samples, 0.53%)</title><rect x="72.0822%" y="341" width="0.5257%" height="15" fill="rgb(235,28,35)" fg:x="74576301339" fg:w="543899589"/><text x="72.3322%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (543,899,589 samples, 0.53%)</title><rect x="72.0822%" y="325" width="0.5257%" height="15" fill="rgb(210,56,17)" fg:x="74576301339" fg:w="543899589"/><text x="72.3322%" y="335.50"></text></g><g><title>alloc::alloc::realloc (543,899,589 samples, 0.53%)</title><rect x="72.0822%" y="309" width="0.5257%" height="15" fill="rgb(224,130,29)" fg:x="74576301339" fg:w="543899589"/><text x="72.3322%" y="319.50"></text></g><g><title>realloc (520,592,884 samples, 0.50%)</title><rect x="72.1047%" y="293" width="0.5032%" height="15" fill="rgb(235,212,8)" fg:x="74599608044" fg:w="520592884"/><text x="72.3547%" y="303.50"></text></g><g><title>[libc.so.6] (477,971,768 samples, 0.46%)</title><rect x="72.1459%" y="277" width="0.4620%" height="15" fill="rgb(223,33,50)" fg:x="74642229160" fg:w="477971768"/><text x="72.3959%" y="287.50"></text></g><g><title>[libc.so.6] (373,467,784 samples, 0.36%)</title><rect x="72.2469%" y="261" width="0.3610%" height="15" fill="rgb(219,149,13)" fg:x="74746733144" fg:w="373467784"/><text x="72.4969%" y="271.50"></text></g><g><title>[libc.so.6] (57,788,607 samples, 0.06%)</title><rect x="72.5521%" y="245" width="0.0559%" height="15" fill="rgb(250,156,29)" fg:x="75062412321" fg:w="57788607"/><text x="72.8021%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (26,764,603 samples, 0.03%)</title><rect x="72.6116%" y="293" width="0.0259%" height="15" fill="rgb(216,193,19)" fg:x="75123970781" fg:w="26764603"/><text x="72.8616%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (19,110,700 samples, 0.02%)</title><rect x="72.6190%" y="277" width="0.0185%" height="15" fill="rgb(216,135,14)" fg:x="75131624684" fg:w="19110700"/><text x="72.8690%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (23,230,779 samples, 0.02%)</title><rect x="72.6411%" y="277" width="0.0225%" height="15" fill="rgb(241,47,5)" fg:x="75154550127" fg:w="23230779"/><text x="72.8911%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (61,512,520 samples, 0.06%)</title><rect x="72.6116%" y="341" width="0.0595%" height="15" fill="rgb(233,42,35)" fg:x="75123970781" fg:w="61512520"/><text x="72.8616%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (61,512,520 samples, 0.06%)</title><rect x="72.6116%" y="325" width="0.0595%" height="15" fill="rgb(231,13,6)" fg:x="75123970781" fg:w="61512520"/><text x="72.8616%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (61,512,520 samples, 0.06%)</title><rect x="72.6116%" y="309" width="0.0595%" height="15" fill="rgb(207,181,40)" fg:x="75123970781" fg:w="61512520"/><text x="72.8616%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (34,747,917 samples, 0.03%)</title><rect x="72.6374%" y="293" width="0.0336%" height="15" fill="rgb(254,173,49)" fg:x="75150735384" fg:w="34747917"/><text x="72.8874%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (77,183,334 samples, 0.07%)</title><rect x="72.6116%" y="357" width="0.0746%" height="15" fill="rgb(221,1,38)" fg:x="75123970781" fg:w="77183334"/><text x="72.8616%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (23,432,199 samples, 0.02%)</title><rect x="72.6862%" y="357" width="0.0226%" height="15" fill="rgb(206,124,46)" fg:x="75201154115" fg:w="23432199"/><text x="72.9362%" y="367.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (15,570,875 samples, 0.02%)</title><rect x="72.6938%" y="341" width="0.0151%" height="15" fill="rgb(249,21,11)" fg:x="75209015439" fg:w="15570875"/><text x="72.9438%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (11,701,769 samples, 0.01%)</title><rect x="72.6975%" y="325" width="0.0113%" height="15" fill="rgb(222,201,40)" fg:x="75212884545" fg:w="11701769"/><text x="72.9475%" y="335.50"></text></g><g><title>core::slice::sort::stable::drift::sort (11,615,433 samples, 0.01%)</title><rect x="72.7240%" y="357" width="0.0112%" height="15" fill="rgb(235,61,29)" fg:x="75240310833" fg:w="11615433"/><text x="72.9740%" y="367.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (18,827,473 samples, 0.02%)</title><rect x="72.7352%" y="341" width="0.0182%" height="15" fill="rgb(219,207,3)" fg:x="75251926266" fg:w="18827473"/><text x="72.9852%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (18,827,473 samples, 0.02%)</title><rect x="72.7352%" y="325" width="0.0182%" height="15" fill="rgb(222,56,46)" fg:x="75251926266" fg:w="18827473"/><text x="72.9852%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (11,850,433 samples, 0.01%)</title><rect x="72.7420%" y="309" width="0.0115%" height="15" fill="rgb(239,76,54)" fg:x="75258903306" fg:w="11850433"/><text x="72.9920%" y="319.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (34,417,803 samples, 0.03%)</title><rect x="72.7352%" y="357" width="0.0333%" height="15" fill="rgb(231,124,27)" fg:x="75251926266" fg:w="34417803"/><text x="72.9852%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (15,590,330 samples, 0.02%)</title><rect x="72.7534%" y="341" width="0.0151%" height="15" fill="rgb(249,195,6)" fg:x="75270753739" fg:w="15590330"/><text x="73.0034%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (11,579,183 samples, 0.01%)</title><rect x="72.7573%" y="325" width="0.0112%" height="15" fill="rgb(237,174,47)" fg:x="75274764886" fg:w="11579183"/><text x="73.0073%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (11,495,819 samples, 0.01%)</title><rect x="72.7722%" y="325" width="0.0111%" height="15" fill="rgb(206,201,31)" fg:x="75290199408" fg:w="11495819"/><text x="73.0222%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (11,495,819 samples, 0.01%)</title><rect x="72.7722%" y="309" width="0.0111%" height="15" fill="rgb(231,57,52)" fg:x="75290199408" fg:w="11495819"/><text x="73.0222%" y="319.50"></text></g><g><title>core::ptr::write (11,495,819 samples, 0.01%)</title><rect x="72.7722%" y="293" width="0.0111%" height="15" fill="rgb(248,177,22)" fg:x="75290199408" fg:w="11495819"/><text x="73.0222%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (27,259,790 samples, 0.03%)</title><rect x="72.7685%" y="357" width="0.0263%" height="15" fill="rgb(215,211,37)" fg:x="75286344069" fg:w="27259790"/><text x="73.0185%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (23,404,451 samples, 0.02%)</title><rect x="72.7722%" y="341" width="0.0226%" height="15" fill="rgb(241,128,51)" fg:x="75290199408" fg:w="23404451"/><text x="73.0222%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (11,908,632 samples, 0.01%)</title><rect x="72.7833%" y="325" width="0.0115%" height="15" fill="rgb(227,165,31)" fg:x="75301695227" fg:w="11908632"/><text x="73.0333%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15,629,573 samples, 0.02%)</title><rect x="72.7948%" y="357" width="0.0151%" height="15" fill="rgb(228,167,24)" fg:x="75313603859" fg:w="15629573"/><text x="73.0448%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (15,629,573 samples, 0.02%)</title><rect x="72.7948%" y="341" width="0.0151%" height="15" fill="rgb(228,143,12)" fg:x="75313603859" fg:w="15629573"/><text x="73.0448%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (15,629,573 samples, 0.02%)</title><rect x="72.7948%" y="325" width="0.0151%" height="15" fill="rgb(249,149,8)" fg:x="75313603859" fg:w="15629573"/><text x="73.0448%" y="335.50"></text></g><g><title>img::png::deflate::encode_block_type_two (18,977,761 samples, 0.02%)</title><rect x="72.8211%" y="357" width="0.0183%" height="15" fill="rgb(243,35,44)" fg:x="75340739308" fg:w="18977761"/><text x="73.0711%" y="367.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (23,180,327 samples, 0.02%)</title><rect x="72.8394%" y="357" width="0.0224%" height="15" fill="rgb(246,89,9)" fg:x="75359717069" fg:w="23180327"/><text x="73.0894%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (15,467,892 samples, 0.01%)</title><rect x="72.8469%" y="341" width="0.0150%" height="15" fill="rgb(233,213,13)" fg:x="75367429504" fg:w="15467892"/><text x="73.0969%" y="351.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (11,803,922 samples, 0.01%)</title><rect x="72.8656%" y="357" width="0.0114%" height="15" fill="rgb(233,141,41)" fg:x="75386785657" fg:w="11803922"/><text x="73.1156%" y="367.50"></text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (2,511,545,123 samples, 2.43%)</title><rect x="72.8770%" y="357" width="2.4276%" height="15" fill="rgb(239,167,4)" fg:x="75398589579" fg:w="2511545123"/><text x="73.1270%" y="367.50">im..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (15,811,993 samples, 0.02%)</title><rect x="75.2893%" y="341" width="0.0153%" height="15" fill="rgb(209,217,16)" fg:x="77894322709" fg:w="15811993"/><text x="75.5393%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by_key (15,621,738,187 samples, 15.10%)</title><rect x="75.3226%" y="325" width="15.0993%" height="15" fill="rgb(219,88,35)" fg:x="77928825481" fg:w="15621738187"/><text x="75.5726%" y="335.50">core::iter::traits::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (15,621,738,187 samples, 15.10%)</title><rect x="75.3226%" y="309" width="15.0993%" height="15" fill="rgb(220,193,23)" fg:x="77928825481" fg:w="15621738187"/><text x="75.5726%" y="319.50">core::iter::traits::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (15,621,738,187 samples, 15.10%)</title><rect x="75.3226%" y="293" width="15.0993%" height="15" fill="rgb(230,90,52)" fg:x="77928825481" fg:w="15621738187"/><text x="75.5726%" y="303.50">core::iter::traits::ite..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,621,738,187 samples, 15.10%)</title><rect x="75.3226%" y="277" width="15.0993%" height="15" fill="rgb(252,106,19)" fg:x="77928825481" fg:w="15621738187"/><text x="75.5726%" y="287.50">&lt;core::iter::adapters::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15,621,738,187 samples, 15.10%)</title><rect x="75.3226%" y="261" width="15.0993%" height="15" fill="rgb(206,74,20)" fg:x="77928825481" fg:w="15621738187"/><text x="75.5726%" y="271.50">&lt;core::iter::adapters::..</text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (15,621,738,187 samples, 15.10%)</title><rect x="75.3226%" y="245" width="15.0993%" height="15" fill="rgb(230,138,44)" fg:x="77928825481" fg:w="15621738187"/><text x="75.5726%" y="255.50">img::png::deflate::lzss..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (4,389,992,763 samples, 4.24%)</title><rect x="86.1787%" y="229" width="4.2432%" height="15" fill="rgb(235,182,43)" fg:x="89160570905" fg:w="4389992763"/><text x="86.4287%" y="239.50">core:..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (19,380,972 samples, 0.02%)</title><rect x="90.4256%" y="229" width="0.0187%" height="15" fill="rgb(242,16,51)" fg:x="93554386341" fg:w="19380972"/><text x="90.6756%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (11,734,953 samples, 0.01%)</title><rect x="90.4330%" y="213" width="0.0113%" height="15" fill="rgb(248,9,4)" fg:x="93562032360" fg:w="11734953"/><text x="90.6830%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (11,734,953 samples, 0.01%)</title><rect x="90.4330%" y="197" width="0.0113%" height="15" fill="rgb(210,31,22)" fg:x="93562032360" fg:w="11734953"/><text x="90.6830%" y="207.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (15,671,426,783 samples, 15.15%)</title><rect x="75.3120%" y="357" width="15.1473%" height="15" fill="rgb(239,54,39)" fg:x="77917899292" fg:w="15671426783"/><text x="75.5620%" y="367.50">img::png::deflate::lzss..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (15,671,426,783 samples, 15.15%)</title><rect x="75.3120%" y="341" width="15.1473%" height="15" fill="rgb(230,99,41)" fg:x="77917899292" fg:w="15671426783"/><text x="75.5620%" y="351.50">img::png::deflate::lzss..</text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (38,762,407 samples, 0.04%)</title><rect x="90.4219%" y="325" width="0.0375%" height="15" fill="rgb(253,106,12)" fg:x="93550563668" fg:w="38762407"/><text x="90.6719%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (34,939,734 samples, 0.03%)</title><rect x="90.4256%" y="309" width="0.0338%" height="15" fill="rgb(213,46,41)" fg:x="93554386341" fg:w="34939734"/><text x="90.6756%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34,939,734 samples, 0.03%)</title><rect x="90.4256%" y="293" width="0.0338%" height="15" fill="rgb(215,133,35)" fg:x="93554386341" fg:w="34939734"/><text x="90.6756%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34,939,734 samples, 0.03%)</title><rect x="90.4256%" y="277" width="0.0338%" height="15" fill="rgb(213,28,5)" fg:x="93554386341" fg:w="34939734"/><text x="90.6756%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34,939,734 samples, 0.03%)</title><rect x="90.4256%" y="261" width="0.0338%" height="15" fill="rgb(215,77,49)" fg:x="93554386341" fg:w="34939734"/><text x="90.6756%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (34,939,734 samples, 0.03%)</title><rect x="90.4256%" y="245" width="0.0338%" height="15" fill="rgb(248,100,22)" fg:x="93554386341" fg:w="34939734"/><text x="90.6756%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,558,762 samples, 0.02%)</title><rect x="90.4443%" y="229" width="0.0150%" height="15" fill="rgb(208,67,9)" fg:x="93573767313" fg:w="15558762"/><text x="90.6943%" y="239.50"></text></g><g><title>core::intrinsics::likely (15,324,580 samples, 0.01%)</title><rect x="90.4705%" y="245" width="0.0148%" height="15" fill="rgb(219,133,21)" fg:x="93600807873" fg:w="15324580"/><text x="90.7205%" y="255.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (42,173,831 samples, 0.04%)</title><rect x="90.4594%" y="357" width="0.0408%" height="15" fill="rgb(246,46,29)" fg:x="93589326075" fg:w="42173831"/><text x="90.7094%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (34,524,838 samples, 0.03%)</title><rect x="90.4668%" y="341" width="0.0334%" height="15" fill="rgb(246,185,52)" fg:x="93596975068" fg:w="34524838"/><text x="90.7168%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (34,524,838 samples, 0.03%)</title><rect x="90.4668%" y="325" width="0.0334%" height="15" fill="rgb(252,136,11)" fg:x="93596975068" fg:w="34524838"/><text x="90.7168%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (34,524,838 samples, 0.03%)</title><rect x="90.4668%" y="309" width="0.0334%" height="15" fill="rgb(219,138,53)" fg:x="93596975068" fg:w="34524838"/><text x="90.7168%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (34,524,838 samples, 0.03%)</title><rect x="90.4668%" y="293" width="0.0334%" height="15" fill="rgb(211,51,23)" fg:x="93596975068" fg:w="34524838"/><text x="90.7168%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (34,524,838 samples, 0.03%)</title><rect x="90.4668%" y="277" width="0.0334%" height="15" fill="rgb(247,221,28)" fg:x="93596975068" fg:w="34524838"/><text x="90.7168%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (34,524,838 samples, 0.03%)</title><rect x="90.4668%" y="261" width="0.0334%" height="15" fill="rgb(251,222,45)" fg:x="93596975068" fg:w="34524838"/><text x="90.7168%" y="271.50"></text></g><g><title>hashbrown::control::tag::Tag::full (11,511,279 samples, 0.01%)</title><rect x="90.4890%" y="245" width="0.0111%" height="15" fill="rgb(217,162,53)" fg:x="93619988627" fg:w="11511279"/><text x="90.7390%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (11,853,052 samples, 0.01%)</title><rect x="90.5001%" y="357" width="0.0115%" height="15" fill="rgb(229,93,14)" fg:x="93631499906" fg:w="11853052"/><text x="90.7501%" y="367.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (46,147,369 samples, 0.04%)</title><rect x="90.5116%" y="357" width="0.0446%" height="15" fill="rgb(209,67,49)" fg:x="93643352958" fg:w="46147369"/><text x="90.7616%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (22,897,943 samples, 0.02%)</title><rect x="90.5341%" y="341" width="0.0221%" height="15" fill="rgb(213,87,29)" fg:x="93666602384" fg:w="22897943"/><text x="90.7841%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (22,897,943 samples, 0.02%)</title><rect x="90.5341%" y="325" width="0.0221%" height="15" fill="rgb(205,151,52)" fg:x="93666602384" fg:w="22897943"/><text x="90.7841%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (22,897,943 samples, 0.02%)</title><rect x="90.5341%" y="309" width="0.0221%" height="15" fill="rgb(253,215,39)" fg:x="93666602384" fg:w="22897943"/><text x="90.7841%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (22,897,943 samples, 0.02%)</title><rect x="90.5341%" y="293" width="0.0221%" height="15" fill="rgb(221,220,41)" fg:x="93666602384" fg:w="22897943"/><text x="90.7841%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (22,897,943 samples, 0.02%)</title><rect x="90.5341%" y="277" width="0.0221%" height="15" fill="rgb(218,133,21)" fg:x="93666602384" fg:w="22897943"/><text x="90.7841%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (22,897,943 samples, 0.02%)</title><rect x="90.5341%" y="261" width="0.0221%" height="15" fill="rgb(221,193,43)" fg:x="93666602384" fg:w="22897943"/><text x="90.7841%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (11,734,980 samples, 0.01%)</title><rect x="90.5562%" y="357" width="0.0113%" height="15" fill="rgb(240,128,52)" fg:x="93689500327" fg:w="11734980"/><text x="90.8062%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (11,734,980 samples, 0.01%)</title><rect x="90.5562%" y="341" width="0.0113%" height="15" fill="rgb(253,114,12)" fg:x="93689500327" fg:w="11734980"/><text x="90.8062%" y="351.50"></text></g><g><title>[unknown] (64,474,624,599 samples, 62.32%)</title><rect x="28.2634%" y="373" width="62.3184%" height="15" fill="rgb(215,223,47)" fg:x="29241295976" fg:w="64474624599"/><text x="28.5134%" y="383.50">[unknown]</text></g><g><title>__rustc::__rdl_alloc (15,516,869 samples, 0.01%)</title><rect x="90.5817%" y="373" width="0.0150%" height="15" fill="rgb(248,225,23)" fg:x="93715920575" fg:w="15516869"/><text x="90.8317%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15,516,869 samples, 0.01%)</title><rect x="90.5817%" y="357" width="0.0150%" height="15" fill="rgb(250,108,0)" fg:x="93715920575" fg:w="15516869"/><text x="90.8317%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (2,131,055,505 samples, 2.06%)</title><rect x="90.6042%" y="373" width="2.0598%" height="15" fill="rgb(228,208,7)" fg:x="93739148106" fg:w="2131055505"/><text x="90.8542%" y="383.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (2,127,012,406 samples, 2.06%)</title><rect x="90.6081%" y="357" width="2.0559%" height="15" fill="rgb(244,45,10)" fg:x="93743191205" fg:w="2127012406"/><text x="90.8581%" y="367.50">a..</text></g><g><title>alloc::raw_vec::layout_array (15,569,691 samples, 0.02%)</title><rect x="92.6975%" y="341" width="0.0150%" height="15" fill="rgb(207,125,25)" fg:x="95904864695" fg:w="15569691"/><text x="92.9475%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::repeat (15,569,691 samples, 0.02%)</title><rect x="92.6975%" y="325" width="0.0150%" height="15" fill="rgb(210,195,18)" fg:x="95904864695" fg:w="15569691"/><text x="92.9475%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (61,870,818 samples, 0.06%)</title><rect x="92.6677%" y="373" width="0.0598%" height="15" fill="rgb(249,80,12)" fg:x="95874109275" fg:w="61870818"/><text x="92.9177%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (61,870,818 samples, 0.06%)</title><rect x="92.6677%" y="357" width="0.0598%" height="15" fill="rgb(221,65,9)" fg:x="95874109275" fg:w="61870818"/><text x="92.9177%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (108,609,670 samples, 0.10%)</title><rect x="92.7275%" y="373" width="0.1050%" height="15" fill="rgb(235,49,36)" fg:x="95935980093" fg:w="108609670"/><text x="92.9775%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (104,890,470 samples, 0.10%)</title><rect x="92.7311%" y="357" width="0.1014%" height="15" fill="rgb(225,32,20)" fg:x="95939699293" fg:w="104890470"/><text x="92.9811%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (104,890,470 samples, 0.10%)</title><rect x="92.7311%" y="341" width="0.1014%" height="15" fill="rgb(215,141,46)" fg:x="95939699293" fg:w="104890470"/><text x="92.9811%" y="351.50"></text></g><g><title>alloc::alloc::realloc (104,890,470 samples, 0.10%)</title><rect x="92.7311%" y="325" width="0.1014%" height="15" fill="rgb(250,160,47)" fg:x="95939699293" fg:w="104890470"/><text x="92.9811%" y="335.50"></text></g><g><title>realloc (85,345,526 samples, 0.08%)</title><rect x="92.7500%" y="309" width="0.0825%" height="15" fill="rgb(216,222,40)" fg:x="95959244237" fg:w="85345526"/><text x="93.0000%" y="319.50"></text></g><g><title>[libc.so.6] (81,513,875 samples, 0.08%)</title><rect x="92.7537%" y="293" width="0.0788%" height="15" fill="rgb(234,217,39)" fg:x="95963075888" fg:w="81513875"/><text x="93.0037%" y="303.50"></text></g><g><title>[libc.so.6] (69,862,942 samples, 0.07%)</title><rect x="92.7650%" y="277" width="0.0675%" height="15" fill="rgb(207,178,40)" fg:x="95974726821" fg:w="69862942"/><text x="93.0150%" y="287.50"></text></g><g><title>[libc.so.6] (30,805,005 samples, 0.03%)</title><rect x="92.8027%" y="261" width="0.0298%" height="15" fill="rgb(221,136,13)" fg:x="96013784758" fg:w="30805005"/><text x="93.0527%" y="271.50"></text></g><g><title>cfree (11,689,032 samples, 0.01%)</title><rect x="92.8334%" y="373" width="0.0113%" height="15" fill="rgb(249,199,10)" fg:x="96045456497" fg:w="11689032"/><text x="93.0834%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (15,901,880 samples, 0.02%)</title><rect x="92.8447%" y="357" width="0.0154%" height="15" fill="rgb(249,222,13)" fg:x="96057145529" fg:w="15901880"/><text x="93.0947%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15,901,880 samples, 0.02%)</title><rect x="92.8447%" y="341" width="0.0154%" height="15" fill="rgb(244,185,38)" fg:x="96057145529" fg:w="15901880"/><text x="93.0947%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15,901,880 samples, 0.02%)</title><rect x="92.8447%" y="325" width="0.0154%" height="15" fill="rgb(236,202,9)" fg:x="96057145529" fg:w="15901880"/><text x="93.0947%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11,917,497 samples, 0.01%)</title><rect x="92.8485%" y="309" width="0.0115%" height="15" fill="rgb(250,229,37)" fg:x="96061129912" fg:w="11917497"/><text x="93.0985%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19,839,789 samples, 0.02%)</title><rect x="92.8447%" y="373" width="0.0192%" height="15" fill="rgb(206,174,23)" fg:x="96057145529" fg:w="19839789"/><text x="93.0947%" y="383.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (11,681,758 samples, 0.01%)</title><rect x="92.8789%" y="357" width="0.0113%" height="15" fill="rgb(211,33,43)" fg:x="96092576288" fg:w="11681758"/><text x="93.1289%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (11,681,758 samples, 0.01%)</title><rect x="92.8789%" y="341" width="0.0113%" height="15" fill="rgb(245,58,50)" fg:x="96092576288" fg:w="11681758"/><text x="93.1289%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (23,387,047 samples, 0.02%)</title><rect x="92.8789%" y="373" width="0.0226%" height="15" fill="rgb(244,68,36)" fg:x="96092576288" fg:w="23387047"/><text x="93.1289%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (11,705,289 samples, 0.01%)</title><rect x="92.8902%" y="357" width="0.0113%" height="15" fill="rgb(232,229,15)" fg:x="96104258046" fg:w="11705289"/><text x="93.1402%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (23,576,045 samples, 0.02%)</title><rect x="92.9447%" y="133" width="0.0228%" height="15" fill="rgb(254,30,23)" fg:x="96160634155" fg:w="23576045"/><text x="93.1947%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (23,576,045 samples, 0.02%)</title><rect x="92.9447%" y="117" width="0.0228%" height="15" fill="rgb(235,160,14)" fg:x="96160634155" fg:w="23576045"/><text x="93.1947%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23,576,045 samples, 0.02%)</title><rect x="92.9447%" y="101" width="0.0228%" height="15" fill="rgb(212,155,44)" fg:x="96160634155" fg:w="23576045"/><text x="93.1947%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (23,576,045 samples, 0.02%)</title><rect x="92.9447%" y="85" width="0.0228%" height="15" fill="rgb(226,2,50)" fg:x="96160634155" fg:w="23576045"/><text x="93.1947%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23,576,045 samples, 0.02%)</title><rect x="92.9447%" y="69" width="0.0228%" height="15" fill="rgb(234,177,6)" fg:x="96160634155" fg:w="23576045"/><text x="93.1947%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (23,576,045 samples, 0.02%)</title><rect x="92.9447%" y="53" width="0.0228%" height="15" fill="rgb(217,24,9)" fg:x="96160634155" fg:w="23576045"/><text x="93.1947%" y="63.50"></text></g><g><title>cfree (19,611,010 samples, 0.02%)</title><rect x="92.9485%" y="37" width="0.0190%" height="15" fill="rgb(220,13,46)" fg:x="96164599190" fg:w="19611010"/><text x="93.1985%" y="47.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (27,559,896 samples, 0.03%)</title><rect x="92.9447%" y="165" width="0.0266%" height="15" fill="rgb(239,221,27)" fg:x="96160634155" fg:w="27559896"/><text x="93.1947%" y="175.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (27,559,896 samples, 0.03%)</title><rect x="92.9447%" y="149" width="0.0266%" height="15" fill="rgb(222,198,25)" fg:x="96160634155" fg:w="27559896"/><text x="93.1947%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (11,943,147 samples, 0.01%)</title><rect x="92.9713%" y="165" width="0.0115%" height="15" fill="rgb(211,99,13)" fg:x="96188194051" fg:w="11943147"/><text x="93.2213%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11,943,147 samples, 0.01%)</title><rect x="92.9713%" y="149" width="0.0115%" height="15" fill="rgb(232,111,31)" fg:x="96188194051" fg:w="11943147"/><text x="93.2213%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;img::png::deflate::lzss::hash::LzssHashTable&gt; (66,332,541 samples, 0.06%)</title><rect x="92.9371%" y="357" width="0.0641%" height="15" fill="rgb(245,82,37)" fg:x="96152798001" fg:w="66332541"/><text x="93.1871%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;&gt;&gt; (66,332,541 samples, 0.06%)</title><rect x="92.9371%" y="341" width="0.0641%" height="15" fill="rgb(227,149,46)" fg:x="96152798001" fg:w="66332541"/><text x="93.1871%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;,std::hash::random::RandomState&gt;&gt; (66,332,541 samples, 0.06%)</title><rect x="92.9371%" y="325" width="0.0641%" height="15" fill="rgb(218,36,50)" fg:x="96152798001" fg:w="66332541"/><text x="93.1871%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,alloc::collections::vec_deque::VecDeque&lt;(usize,usize)&gt;)&gt;&gt; (66,332,541 samples, 0.06%)</title><rect x="92.9371%" y="309" width="0.0641%" height="15" fill="rgb(226,80,48)" fg:x="96152798001" fg:w="66332541"/><text x="93.1871%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (66,332,541 samples, 0.06%)</title><rect x="92.9371%" y="293" width="0.0641%" height="15" fill="rgb(238,224,15)" fg:x="96152798001" fg:w="66332541"/><text x="93.1871%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (66,332,541 samples, 0.06%)</title><rect x="92.9371%" y="277" width="0.0641%" height="15" fill="rgb(241,136,10)" fg:x="96152798001" fg:w="66332541"/><text x="93.1871%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (58,496,387 samples, 0.06%)</title><rect x="92.9447%" y="261" width="0.0565%" height="15" fill="rgb(208,32,45)" fg:x="96160634155" fg:w="58496387"/><text x="93.1947%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (58,496,387 samples, 0.06%)</title><rect x="92.9447%" y="245" width="0.0565%" height="15" fill="rgb(207,135,9)" fg:x="96160634155" fg:w="58496387"/><text x="93.1947%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (58,496,387 samples, 0.06%)</title><rect x="92.9447%" y="229" width="0.0565%" height="15" fill="rgb(206,86,44)" fg:x="96160634155" fg:w="58496387"/><text x="93.1947%" y="239.50"></text></g><g><title>cfree (58,496,387 samples, 0.06%)</title><rect x="92.9447%" y="213" width="0.0565%" height="15" fill="rgb(245,177,15)" fg:x="96160634155" fg:w="58496387"/><text x="93.1947%" y="223.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (58,496,387 samples, 0.06%)</title><rect x="92.9447%" y="197" width="0.0565%" height="15" fill="rgb(206,64,50)" fg:x="96160634155" fg:w="58496387"/><text x="93.1947%" y="207.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (58,496,387 samples, 0.06%)</title><rect x="92.9447%" y="181" width="0.0565%" height="15" fill="rgb(234,36,40)" fg:x="96160634155" fg:w="58496387"/><text x="93.1947%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (18,993,344 samples, 0.02%)</title><rect x="92.9829%" y="165" width="0.0184%" height="15" fill="rgb(213,64,8)" fg:x="96200137198" fg:w="18993344"/><text x="93.2329%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (11,122,036 samples, 0.01%)</title><rect x="92.9905%" y="149" width="0.0108%" height="15" fill="rgb(210,75,36)" fg:x="96208008506" fg:w="11122036"/><text x="93.2405%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,122,036 samples, 0.01%)</title><rect x="92.9905%" y="133" width="0.0108%" height="15" fill="rgb(229,88,21)" fg:x="96208008506" fg:w="11122036"/><text x="93.2405%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (11,122,036 samples, 0.01%)</title><rect x="92.9905%" y="117" width="0.0108%" height="15" fill="rgb(252,204,47)" fg:x="96208008506" fg:w="11122036"/><text x="93.2405%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,122,036 samples, 0.01%)</title><rect x="92.9905%" y="101" width="0.0108%" height="15" fill="rgb(208,77,27)" fg:x="96208008506" fg:w="11122036"/><text x="93.2405%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (11,122,036 samples, 0.01%)</title><rect x="92.9905%" y="85" width="0.0108%" height="15" fill="rgb(221,76,26)" fg:x="96208008506" fg:w="11122036"/><text x="93.2405%" y="95.50"></text></g><g><title>cfree (11,122,036 samples, 0.01%)</title><rect x="92.9905%" y="69" width="0.0108%" height="15" fill="rgb(225,139,18)" fg:x="96208008506" fg:w="11122036"/><text x="93.2405%" y="79.50"></text></g><g><title>[libc.so.6] (11,122,036 samples, 0.01%)</title><rect x="92.9905%" y="53" width="0.0108%" height="15" fill="rgb(230,137,11)" fg:x="96208008506" fg:w="11122036"/><text x="93.2405%" y="63.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_greedy (74,018,102 samples, 0.07%)</title><rect x="92.9371%" y="373" width="0.0715%" height="15" fill="rgb(212,28,1)" fg:x="96152798001" fg:w="74018102"/><text x="93.1871%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (15,826,693 samples, 0.02%)</title><rect x="93.0276%" y="341" width="0.0153%" height="15" fill="rgb(248,164,17)" fg:x="96246413404" fg:w="15826693"/><text x="93.2776%" y="351.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (43,334,250 samples, 0.04%)</title><rect x="93.0086%" y="373" width="0.0419%" height="15" fill="rgb(222,171,42)" fg:x="96226816103" fg:w="43334250"/><text x="93.2586%" y="383.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (43,334,250 samples, 0.04%)</title><rect x="93.0086%" y="357" width="0.0419%" height="15" fill="rgb(243,84,45)" fg:x="96226816103" fg:w="43334250"/><text x="93.2586%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::iter (15,477,626 samples, 0.01%)</title><rect x="93.0505%" y="357" width="0.0150%" height="15" fill="rgb(252,49,23)" fg:x="96270150353" fg:w="15477626"/><text x="93.3005%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_slices (15,477,626 samples, 0.01%)</title><rect x="93.0505%" y="341" width="0.0150%" height="15" fill="rgb(215,19,7)" fg:x="96270150353" fg:w="15477626"/><text x="93.3005%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (35,284,309 samples, 0.03%)</title><rect x="97.9439%" y="261" width="0.0341%" height="15" fill="rgb(238,81,41)" fg:x="101332863892" fg:w="35284309"/><text x="98.1939%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (35,284,309 samples, 0.03%)</title><rect x="97.9439%" y="245" width="0.0341%" height="15" fill="rgb(210,199,37)" fg:x="101332863892" fg:w="35284309"/><text x="98.1939%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (35,284,309 samples, 0.03%)</title><rect x="97.9439%" y="229" width="0.0341%" height="15" fill="rgb(244,192,49)" fg:x="101332863892" fg:w="35284309"/><text x="98.1939%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (616,335,259 samples, 0.60%)</title><rect x="97.9780%" y="261" width="0.5957%" height="15" fill="rgb(226,211,11)" fg:x="101368148201" fg:w="616335259"/><text x="98.2280%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7,139,448,911 samples, 6.90%)</title><rect x="93.0655%" y="357" width="6.9007%" height="15" fill="rgb(236,162,54)" fg:x="96285627979" fg:w="7139448911"/><text x="93.3155%" y="367.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7,139,448,911 samples, 6.90%)</title><rect x="93.0655%" y="341" width="6.9007%" height="15" fill="rgb(220,229,9)" fg:x="96285627979" fg:w="7139448911"/><text x="93.3155%" y="351.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7,139,448,911 samples, 6.90%)</title><rect x="93.0655%" y="325" width="6.9007%" height="15" fill="rgb(250,87,22)" fg:x="96285627979" fg:w="7139448911"/><text x="93.3155%" y="335.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7,139,448,911 samples, 6.90%)</title><rect x="93.0655%" y="309" width="6.9007%" height="15" fill="rgb(239,43,17)" fg:x="96285627979" fg:w="7139448911"/><text x="93.3155%" y="319.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7,135,455,450 samples, 6.90%)</title><rect x="93.0694%" y="293" width="6.8968%" height="15" fill="rgb(231,177,25)" fg:x="96289621440" fg:w="7135455450"/><text x="93.3194%" y="303.50">&lt;alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (7,135,455,450 samples, 6.90%)</title><rect x="93.0694%" y="277" width="6.8968%" height="15" fill="rgb(219,179,1)" fg:x="96289621440" fg:w="7135455450"/><text x="93.3194%" y="287.50">alloc::ve..</text></g><g><title>core::ptr::write (1,440,593,430 samples, 1.39%)</title><rect x="98.5738%" y="261" width="1.3924%" height="15" fill="rgb(238,219,53)" fg:x="101984483460" fg:w="1440593430"/><text x="98.8238%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (19,352,360 samples, 0.02%)</title><rect x="99.9662%" y="357" width="0.0187%" height="15" fill="rgb(232,167,36)" fg:x="103425076890" fg:w="19352360"/><text x="100.2162%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (19,352,360 samples, 0.02%)</title><rect x="99.9662%" y="341" width="0.0187%" height="15" fill="rgb(244,19,51)" fg:x="103425076890" fg:w="19352360"/><text x="100.2162%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19,352,360 samples, 0.02%)</title><rect x="99.9662%" y="325" width="0.0187%" height="15" fill="rgb(224,6,22)" fg:x="103425076890" fg:w="19352360"/><text x="100.2162%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19,352,360 samples, 0.02%)</title><rect x="99.9662%" y="309" width="0.0187%" height="15" fill="rgb(224,145,5)" fg:x="103425076890" fg:w="19352360"/><text x="100.2162%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19,352,360 samples, 0.02%)</title><rect x="99.9662%" y="293" width="0.0187%" height="15" fill="rgb(234,130,49)" fg:x="103425076890" fg:w="19352360"/><text x="100.2162%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (19,352,360 samples, 0.02%)</title><rect x="99.9662%" y="277" width="0.0187%" height="15" fill="rgb(254,6,2)" fg:x="103425076890" fg:w="19352360"/><text x="100.2162%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,607,991 samples, 0.01%)</title><rect x="99.9737%" y="261" width="0.0112%" height="15" fill="rgb(208,96,46)" fg:x="103432821259" fg:w="11607991"/><text x="100.2237%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (11,607,991 samples, 0.01%)</title><rect x="99.9737%" y="245" width="0.0112%" height="15" fill="rgb(239,3,39)" fg:x="103432821259" fg:w="11607991"/><text x="100.2237%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (7,182,135,536 samples, 6.94%)</title><rect x="93.0505%" y="373" width="6.9419%" height="15" fill="rgb(233,210,1)" fg:x="96270150353" fg:w="7182135536"/><text x="93.3005%" y="383.50">img::png:..</text></g><g><title>all (103,460,074,689 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="103460074689"/><text x="0.2500%" y="415.50"></text></g><g><title>img (103,460,074,689 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="103460074689"/><text x="0.2500%" y="399.50">img</text></g></svg></svg>