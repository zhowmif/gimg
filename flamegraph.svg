<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="35879496180"><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0105%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="309" width="0.0105%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0105%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="303.50"></text></g><g><title>[unknown] (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0105%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0105%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0105%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0105%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="239.50"></text></g><g><title>alloc::alloc::realloc (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0105%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="223.50"></text></g><g><title>realloc (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0105%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="207.50"></text></g><g><title>[libc.so.6] (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="181" width="0.0105%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="191.50"></text></g><g><title>[libc.so.6] (3,776,144 samples, 0.01%)</title><rect x="0.0000%" y="165" width="0.0105%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3776144"/><text x="0.2500%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7,546,252 samples, 0.02%)</title><rect x="0.0105%" y="245" width="0.0210%" height="15" fill="rgb(240,193,28)" fg:x="3776144" fg:w="7546252"/><text x="0.2605%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (7,546,252 samples, 0.02%)</title><rect x="0.0105%" y="229" width="0.0210%" height="15" fill="rgb(216,20,37)" fg:x="3776144" fg:w="7546252"/><text x="0.2605%" y="239.50"></text></g><g><title>core::ptr::write (7,546,252 samples, 0.02%)</title><rect x="0.0105%" y="213" width="0.0210%" height="15" fill="rgb(206,188,39)" fg:x="3776144" fg:w="7546252"/><text x="0.2605%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (52,098,561 samples, 0.15%)</title><rect x="0.0316%" y="165" width="0.1452%" height="15" fill="rgb(217,207,13)" fg:x="11322396" fg:w="52098561"/><text x="0.2816%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (52,098,561 samples, 0.15%)</title><rect x="0.0316%" y="149" width="0.1452%" height="15" fill="rgb(231,73,38)" fg:x="11322396" fg:w="52098561"/><text x="0.2816%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (52,098,561 samples, 0.15%)</title><rect x="0.0316%" y="133" width="0.1452%" height="15" fill="rgb(225,20,46)" fg:x="11322396" fg:w="52098561"/><text x="0.2816%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (52,098,561 samples, 0.15%)</title><rect x="0.0316%" y="117" width="0.1452%" height="15" fill="rgb(210,31,41)" fg:x="11322396" fg:w="52098561"/><text x="0.2816%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52,098,561 samples, 0.15%)</title><rect x="0.0316%" y="101" width="0.1452%" height="15" fill="rgb(221,200,47)" fg:x="11322396" fg:w="52098561"/><text x="0.2816%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52,098,561 samples, 0.15%)</title><rect x="0.0316%" y="85" width="0.1452%" height="15" fill="rgb(226,26,5)" fg:x="11322396" fg:w="52098561"/><text x="0.2816%" y="95.50"></text></g><g><title>alloc::alloc::alloc (52,098,561 samples, 0.15%)</title><rect x="0.0316%" y="69" width="0.1452%" height="15" fill="rgb(249,33,26)" fg:x="11322396" fg:w="52098561"/><text x="0.2816%" y="79.50"></text></g><g><title>malloc (52,098,561 samples, 0.15%)</title><rect x="0.0316%" y="53" width="0.1452%" height="15" fill="rgb(235,183,28)" fg:x="11322396" fg:w="52098561"/><text x="0.2816%" y="63.50"></text></g><g><title>[libc.so.6] (48,323,905 samples, 0.13%)</title><rect x="0.0421%" y="37" width="0.1347%" height="15" fill="rgb(221,5,38)" fg:x="15097052" fg:w="48323905"/><text x="0.2921%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (67,240,124 samples, 0.19%)</title><rect x="0.0000%" y="373" width="0.1874%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="67240124"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (67,240,124 samples, 0.19%)</title><rect x="0.0000%" y="357" width="0.1874%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="67240124"/><text x="0.2500%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (67,240,124 samples, 0.19%)</title><rect x="0.0000%" y="341" width="0.1874%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="67240124"/><text x="0.2500%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (63,463,980 samples, 0.18%)</title><rect x="0.0105%" y="325" width="0.1769%" height="15" fill="rgb(225,111,53)" fg:x="3776144" fg:w="63463980"/><text x="0.2605%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (63,463,980 samples, 0.18%)</title><rect x="0.0105%" y="309" width="0.1769%" height="15" fill="rgb(238,160,17)" fg:x="3776144" fg:w="63463980"/><text x="0.2605%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (63,463,980 samples, 0.18%)</title><rect x="0.0105%" y="293" width="0.1769%" height="15" fill="rgb(214,148,48)" fg:x="3776144" fg:w="63463980"/><text x="0.2605%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (63,463,980 samples, 0.18%)</title><rect x="0.0105%" y="277" width="0.1769%" height="15" fill="rgb(232,36,49)" fg:x="3776144" fg:w="63463980"/><text x="0.2605%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (63,463,980 samples, 0.18%)</title><rect x="0.0105%" y="261" width="0.1769%" height="15" fill="rgb(209,103,24)" fg:x="3776144" fg:w="63463980"/><text x="0.2605%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (55,917,728 samples, 0.16%)</title><rect x="0.0316%" y="245" width="0.1558%" height="15" fill="rgb(229,88,8)" fg:x="11322396" fg:w="55917728"/><text x="0.2816%" y="255.50"></text></g><g><title>core::clone::Clone::clone (55,917,728 samples, 0.16%)</title><rect x="0.0316%" y="229" width="0.1558%" height="15" fill="rgb(213,181,19)" fg:x="11322396" fg:w="55917728"/><text x="0.2816%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (55,917,728 samples, 0.16%)</title><rect x="0.0316%" y="213" width="0.1558%" height="15" fill="rgb(254,191,54)" fg:x="11322396" fg:w="55917728"/><text x="0.2816%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (55,917,728 samples, 0.16%)</title><rect x="0.0316%" y="197" width="0.1558%" height="15" fill="rgb(241,83,37)" fg:x="11322396" fg:w="55917728"/><text x="0.2816%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (55,917,728 samples, 0.16%)</title><rect x="0.0316%" y="181" width="0.1558%" height="15" fill="rgb(233,36,39)" fg:x="11322396" fg:w="55917728"/><text x="0.2816%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,819,167 samples, 0.01%)</title><rect x="0.1768%" y="165" width="0.0106%" height="15" fill="rgb(226,3,54)" fg:x="63420957" fg:w="3819167"/><text x="0.4268%" y="175.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,819,167 samples, 0.01%)</title><rect x="0.1768%" y="149" width="0.0106%" height="15" fill="rgb(245,192,40)" fg:x="63420957" fg:w="3819167"/><text x="0.4268%" y="159.50"></text></g><g><title>[libc.so.6] (3,819,167 samples, 0.01%)</title><rect x="0.1768%" y="133" width="0.0106%" height="15" fill="rgb(238,167,29)" fg:x="63420957" fg:w="3819167"/><text x="0.4268%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="325" width="0.0103%" height="15" fill="rgb(232,182,51)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="309" width="0.0103%" height="15" fill="rgb(231,60,39)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="293" width="0.0103%" height="15" fill="rgb(208,69,12)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="277" width="0.0103%" height="15" fill="rgb(235,93,37)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="261" width="0.0103%" height="15" fill="rgb(213,116,39)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="245" width="0.0103%" height="15" fill="rgb(222,207,29)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="255.50"></text></g><g><title>alloc::alloc::alloc (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="229" width="0.0103%" height="15" fill="rgb(206,96,30)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="239.50"></text></g><g><title>malloc (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="213" width="0.0103%" height="15" fill="rgb(218,138,4)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="223.50"></text></g><g><title>[libc.so.6] (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="197" width="0.0103%" height="15" fill="rgb(250,191,14)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="207.50"></text></g><g><title>[libc.so.6] (3,683,050 samples, 0.01%)</title><rect x="0.1978%" y="181" width="0.0103%" height="15" fill="rgb(239,60,40)" fg:x="70959686" fg:w="3683050"/><text x="0.4478%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (55,300,673 samples, 0.15%)</title><rect x="0.2185%" y="261" width="0.1541%" height="15" fill="rgb(206,27,48)" fg:x="78396891" fg:w="55300673"/><text x="0.4685%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (55,300,673 samples, 0.15%)</title><rect x="0.2185%" y="245" width="0.1541%" height="15" fill="rgb(225,35,8)" fg:x="78396891" fg:w="55300673"/><text x="0.4685%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (55,300,673 samples, 0.15%)</title><rect x="0.2185%" y="229" width="0.1541%" height="15" fill="rgb(250,213,24)" fg:x="78396891" fg:w="55300673"/><text x="0.4685%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (55,300,673 samples, 0.15%)</title><rect x="0.2185%" y="213" width="0.1541%" height="15" fill="rgb(247,123,22)" fg:x="78396891" fg:w="55300673"/><text x="0.4685%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55,300,673 samples, 0.15%)</title><rect x="0.2185%" y="197" width="0.1541%" height="15" fill="rgb(231,138,38)" fg:x="78396891" fg:w="55300673"/><text x="0.4685%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55,300,673 samples, 0.15%)</title><rect x="0.2185%" y="181" width="0.1541%" height="15" fill="rgb(231,145,46)" fg:x="78396891" fg:w="55300673"/><text x="0.4685%" y="191.50"></text></g><g><title>alloc::alloc::alloc (55,300,673 samples, 0.15%)</title><rect x="0.2185%" y="165" width="0.1541%" height="15" fill="rgb(251,118,11)" fg:x="78396891" fg:w="55300673"/><text x="0.4685%" y="175.50"></text></g><g><title>malloc (55,300,673 samples, 0.15%)</title><rect x="0.2185%" y="149" width="0.1541%" height="15" fill="rgb(217,147,25)" fg:x="78396891" fg:w="55300673"/><text x="0.4685%" y="159.50"></text></g><g><title>[libc.so.6] (40,382,574 samples, 0.11%)</title><rect x="0.2601%" y="133" width="0.1126%" height="15" fill="rgb(247,81,37)" fg:x="93314990" fg:w="40382574"/><text x="0.5101%" y="143.50"></text></g><g><title>core::clone::Clone::clone (62,798,672 samples, 0.18%)</title><rect x="0.2080%" y="325" width="0.1750%" height="15" fill="rgb(209,12,38)" fg:x="74642736" fg:w="62798672"/><text x="0.4580%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (59,044,517 samples, 0.16%)</title><rect x="0.2185%" y="309" width="0.1646%" height="15" fill="rgb(227,1,9)" fg:x="78396891" fg:w="59044517"/><text x="0.4685%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (59,044,517 samples, 0.16%)</title><rect x="0.2185%" y="293" width="0.1646%" height="15" fill="rgb(248,47,43)" fg:x="78396891" fg:w="59044517"/><text x="0.4685%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (59,044,517 samples, 0.16%)</title><rect x="0.2185%" y="277" width="0.1646%" height="15" fill="rgb(221,10,30)" fg:x="78396891" fg:w="59044517"/><text x="0.4685%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,743,844 samples, 0.01%)</title><rect x="0.3726%" y="261" width="0.0104%" height="15" fill="rgb(210,229,1)" fg:x="133697564" fg:w="3743844"/><text x="0.6226%" y="271.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,743,844 samples, 0.01%)</title><rect x="0.3726%" y="245" width="0.0104%" height="15" fill="rgb(222,148,37)" fg:x="133697564" fg:w="3743844"/><text x="0.6226%" y="255.50"></text></g><g><title>[libc.so.6] (3,743,844 samples, 0.01%)</title><rect x="0.3726%" y="229" width="0.0104%" height="15" fill="rgb(234,67,33)" fg:x="133697564" fg:w="3743844"/><text x="0.6226%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (73,983,138 samples, 0.21%)</title><rect x="0.1874%" y="373" width="0.2062%" height="15" fill="rgb(247,98,35)" fg:x="67240124" fg:w="73983138"/><text x="0.4374%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (73,983,138 samples, 0.21%)</title><rect x="0.1874%" y="357" width="0.2062%" height="15" fill="rgb(247,138,52)" fg:x="67240124" fg:w="73983138"/><text x="0.4374%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (73,983,138 samples, 0.21%)</title><rect x="0.1874%" y="341" width="0.2062%" height="15" fill="rgb(213,79,30)" fg:x="67240124" fg:w="73983138"/><text x="0.4374%" y="351.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3,781,854 samples, 0.01%)</title><rect x="0.3831%" y="325" width="0.0105%" height="15" fill="rgb(246,177,23)" fg:x="137441408" fg:w="3781854"/><text x="0.6331%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (7,540,114 samples, 0.02%)</title><rect x="0.4879%" y="309" width="0.0210%" height="15" fill="rgb(230,62,27)" fg:x="175064667" fg:w="7540114"/><text x="0.7379%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (3,773,919 samples, 0.01%)</title><rect x="0.4984%" y="293" width="0.0105%" height="15" fill="rgb(216,154,8)" fg:x="178830862" fg:w="3773919"/><text x="0.7484%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,765,366 samples, 0.01%)</title><rect x="0.5302%" y="261" width="0.0105%" height="15" fill="rgb(244,35,45)" fg:x="190216777" fg:w="3765366"/><text x="0.7802%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (3,765,366 samples, 0.01%)</title><rect x="0.5302%" y="245" width="0.0105%" height="15" fill="rgb(251,115,12)" fg:x="190216777" fg:w="3765366"/><text x="0.7802%" y="255.50"></text></g><g><title>core::ptr::write (3,765,366 samples, 0.01%)</title><rect x="0.5302%" y="229" width="0.0105%" height="15" fill="rgb(240,54,50)" fg:x="190216777" fg:w="3765366"/><text x="0.7802%" y="239.50"></text></g><g><title>[libc.so.6] (7,492,627 samples, 0.02%)</title><rect x="0.5406%" y="117" width="0.0209%" height="15" fill="rgb(233,84,52)" fg:x="193982143" fg:w="7492627"/><text x="0.7906%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (67,353,747 samples, 0.19%)</title><rect x="0.5406%" y="261" width="0.1877%" height="15" fill="rgb(207,117,47)" fg:x="193982143" fg:w="67353747"/><text x="0.7906%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67,353,747 samples, 0.19%)</title><rect x="0.5406%" y="245" width="0.1877%" height="15" fill="rgb(249,43,39)" fg:x="193982143" fg:w="67353747"/><text x="0.7906%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (67,353,747 samples, 0.19%)</title><rect x="0.5406%" y="229" width="0.1877%" height="15" fill="rgb(209,38,44)" fg:x="193982143" fg:w="67353747"/><text x="0.7906%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67,353,747 samples, 0.19%)</title><rect x="0.5406%" y="213" width="0.1877%" height="15" fill="rgb(236,212,23)" fg:x="193982143" fg:w="67353747"/><text x="0.7906%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (67,353,747 samples, 0.19%)</title><rect x="0.5406%" y="197" width="0.1877%" height="15" fill="rgb(242,79,21)" fg:x="193982143" fg:w="67353747"/><text x="0.7906%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67,353,747 samples, 0.19%)</title><rect x="0.5406%" y="181" width="0.1877%" height="15" fill="rgb(211,96,35)" fg:x="193982143" fg:w="67353747"/><text x="0.7906%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (67,353,747 samples, 0.19%)</title><rect x="0.5406%" y="165" width="0.1877%" height="15" fill="rgb(253,215,40)" fg:x="193982143" fg:w="67353747"/><text x="0.7906%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (67,353,747 samples, 0.19%)</title><rect x="0.5406%" y="149" width="0.1877%" height="15" fill="rgb(211,81,21)" fg:x="193982143" fg:w="67353747"/><text x="0.7906%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (67,353,747 samples, 0.19%)</title><rect x="0.5406%" y="133" width="0.1877%" height="15" fill="rgb(208,190,38)" fg:x="193982143" fg:w="67353747"/><text x="0.7906%" y="143.50"></text></g><g><title>cfree (59,861,120 samples, 0.17%)</title><rect x="0.5615%" y="117" width="0.1668%" height="15" fill="rgb(235,213,38)" fg:x="201474770" fg:w="59861120"/><text x="0.8115%" y="127.50"></text></g><g><title>[libc.so.6] (11,162,042 samples, 0.03%)</title><rect x="0.6973%" y="101" width="0.0311%" height="15" fill="rgb(237,122,38)" fg:x="250173848" fg:w="11162042"/><text x="0.9473%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (85,056,201 samples, 0.24%)</title><rect x="0.5089%" y="293" width="0.2371%" height="15" fill="rgb(244,218,35)" fg:x="182604781" fg:w="85056201"/><text x="0.7589%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (85,056,201 samples, 0.24%)</title><rect x="0.5089%" y="277" width="0.2371%" height="15" fill="rgb(240,68,47)" fg:x="182604781" fg:w="85056201"/><text x="0.7589%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;u16,alloc::vec::Vec&lt;u16&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;,alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (3,778,783 samples, 0.01%)</title><rect x="0.7355%" y="261" width="0.0105%" height="15" fill="rgb(210,16,53)" fg:x="263882199" fg:w="3778783"/><text x="0.9855%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;,alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt;&gt;::{{closure}}&gt; (3,778,783 samples, 0.01%)</title><rect x="0.7355%" y="245" width="0.0105%" height="15" fill="rgb(235,124,12)" fg:x="263882199" fg:w="3778783"/><text x="0.9855%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (3,778,783 samples, 0.01%)</title><rect x="0.7355%" y="229" width="0.0105%" height="15" fill="rgb(224,169,11)" fg:x="263882199" fg:w="3778783"/><text x="0.9855%" y="239.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (3,778,783 samples, 0.01%)</title><rect x="0.7355%" y="213" width="0.0105%" height="15" fill="rgb(250,166,2)" fg:x="263882199" fg:w="3778783"/><text x="0.9855%" y="223.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3,687,993 samples, 0.01%)</title><rect x="0.7460%" y="133" width="0.0103%" height="15" fill="rgb(242,216,29)" fg:x="267660982" fg:w="3687993"/><text x="0.9960%" y="143.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (3,687,993 samples, 0.01%)</title><rect x="0.7460%" y="117" width="0.0103%" height="15" fill="rgb(230,116,27)" fg:x="267660982" fg:w="3687993"/><text x="0.9960%" y="127.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (3,687,993 samples, 0.01%)</title><rect x="0.7460%" y="101" width="0.0103%" height="15" fill="rgb(228,99,48)" fg:x="267660982" fg:w="3687993"/><text x="0.9960%" y="111.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (3,687,993 samples, 0.01%)</title><rect x="0.7460%" y="85" width="0.0103%" height="15" fill="rgb(253,11,6)" fg:x="267660982" fg:w="3687993"/><text x="0.9960%" y="95.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (3,687,993 samples, 0.01%)</title><rect x="0.7460%" y="69" width="0.0103%" height="15" fill="rgb(247,143,39)" fg:x="267660982" fg:w="3687993"/><text x="0.9960%" y="79.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (3,763,940 samples, 0.01%)</title><rect x="0.7563%" y="133" width="0.0105%" height="15" fill="rgb(236,97,10)" fg:x="271348975" fg:w="3763940"/><text x="1.0063%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3,763,940 samples, 0.01%)</title><rect x="0.7563%" y="117" width="0.0105%" height="15" fill="rgb(233,208,19)" fg:x="271348975" fg:w="3763940"/><text x="1.0063%" y="127.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,763,940 samples, 0.01%)</title><rect x="0.7563%" y="101" width="0.0105%" height="15" fill="rgb(216,164,2)" fg:x="271348975" fg:w="3763940"/><text x="1.0063%" y="111.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,680,465 samples, 0.01%)</title><rect x="0.7668%" y="133" width="0.0103%" height="15" fill="rgb(220,129,5)" fg:x="275112915" fg:w="3680465"/><text x="1.0168%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,680,465 samples, 0.01%)</title><rect x="0.7668%" y="117" width="0.0103%" height="15" fill="rgb(242,17,10)" fg:x="275112915" fg:w="3680465"/><text x="1.0168%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="293" width="0.0520%" height="15" fill="rgb(242,107,0)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="277" width="0.0520%" height="15" fill="rgb(251,28,31)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="261" width="0.0520%" height="15" fill="rgb(233,223,10)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="271.50"></text></g><g><title>img::png::deflate::prefix_table::get_cl_codes_for_code_lengths::_{{closure}} (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="245" width="0.0520%" height="15" fill="rgb(215,21,27)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="229" width="0.0520%" height="15" fill="rgb(232,23,21)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="213" width="0.0520%" height="15" fill="rgb(244,5,23)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="197" width="0.0520%" height="15" fill="rgb(226,81,46)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="181" width="0.0520%" height="15" fill="rgb(247,70,30)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="165" width="0.0520%" height="15" fill="rgb(212,68,19)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (18,655,842 samples, 0.05%)</title><rect x="0.7460%" y="149" width="0.0520%" height="15" fill="rgb(240,187,13)" fg:x="267660982" fg:w="18655842"/><text x="0.9960%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (7,523,444 samples, 0.02%)</title><rect x="0.7770%" y="133" width="0.0210%" height="15" fill="rgb(223,113,26)" fg:x="278793380" fg:w="7523444"/><text x="1.0270%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,778,242 samples, 0.01%)</title><rect x="0.8083%" y="277" width="0.0105%" height="15" fill="rgb(206,192,2)" fg:x="290001904" fg:w="3778242"/><text x="1.0583%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (3,778,242 samples, 0.01%)</title><rect x="0.8083%" y="261" width="0.0105%" height="15" fill="rgb(241,108,4)" fg:x="290001904" fg:w="3778242"/><text x="1.0583%" y="271.50"></text></g><g><title>core::ptr::write (3,778,242 samples, 0.01%)</title><rect x="0.8083%" y="245" width="0.0105%" height="15" fill="rgb(247,173,49)" fg:x="290001904" fg:w="3778242"/><text x="1.0583%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (63,809,001 samples, 0.18%)</title><rect x="0.8188%" y="277" width="0.1778%" height="15" fill="rgb(224,114,35)" fg:x="293780146" fg:w="63809001"/><text x="1.0688%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63,809,001 samples, 0.18%)</title><rect x="0.8188%" y="261" width="0.1778%" height="15" fill="rgb(245,159,27)" fg:x="293780146" fg:w="63809001"/><text x="1.0688%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (63,809,001 samples, 0.18%)</title><rect x="0.8188%" y="245" width="0.1778%" height="15" fill="rgb(245,172,44)" fg:x="293780146" fg:w="63809001"/><text x="1.0688%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63,809,001 samples, 0.18%)</title><rect x="0.8188%" y="229" width="0.1778%" height="15" fill="rgb(236,23,11)" fg:x="293780146" fg:w="63809001"/><text x="1.0688%" y="239.50"></text></g><g><title>core::ptr::copy (63,809,001 samples, 0.18%)</title><rect x="0.8188%" y="213" width="0.1778%" height="15" fill="rgb(205,117,38)" fg:x="293780146" fg:w="63809001"/><text x="1.0688%" y="223.50"></text></g><g><title>[libc.so.6] (63,809,001 samples, 0.18%)</title><rect x="0.8188%" y="197" width="0.1778%" height="15" fill="rgb(237,72,25)" fg:x="293780146" fg:w="63809001"/><text x="1.0688%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (205,047,503 samples, 0.57%)</title><rect x="0.4357%" y="341" width="0.5715%" height="15" fill="rgb(244,70,9)" fg:x="156320864" fg:w="205047503"/><text x="0.6857%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (205,047,503 samples, 0.57%)</title><rect x="0.4357%" y="325" width="0.5715%" height="15" fill="rgb(217,125,39)" fg:x="156320864" fg:w="205047503"/><text x="0.6857%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (178,763,586 samples, 0.50%)</title><rect x="0.5089%" y="309" width="0.4982%" height="15" fill="rgb(235,36,10)" fg:x="182604781" fg:w="178763586"/><text x="0.7589%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (75,051,543 samples, 0.21%)</title><rect x="0.7980%" y="293" width="0.2092%" height="15" fill="rgb(251,123,47)" fg:x="286316824" fg:w="75051543"/><text x="1.0480%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (3,779,220 samples, 0.01%)</title><rect x="0.9966%" y="277" width="0.0105%" height="15" fill="rgb(221,13,13)" fg:x="357589147" fg:w="3779220"/><text x="1.2466%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,779,220 samples, 0.01%)</title><rect x="0.9966%" y="261" width="0.0105%" height="15" fill="rgb(238,131,9)" fg:x="357589147" fg:w="3779220"/><text x="1.2466%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u32&gt;,u32),alloc::alloc::Global&gt;&gt; (3,779,220 samples, 0.01%)</title><rect x="0.9966%" y="245" width="0.0105%" height="15" fill="rgb(211,50,8)" fg:x="357589147" fg:w="3779220"/><text x="1.2466%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,779,220 samples, 0.01%)</title><rect x="0.9966%" y="229" width="0.0105%" height="15" fill="rgb(245,182,24)" fg:x="357589147" fg:w="3779220"/><text x="1.2466%" y="239.50"></text></g><g><title>core::ptr::copy (3,779,220 samples, 0.01%)</title><rect x="0.9966%" y="213" width="0.0105%" height="15" fill="rgb(242,14,37)" fg:x="357589147" fg:w="3779220"/><text x="1.2466%" y="223.50"></text></g><g><title>[libc.so.6] (3,779,220 samples, 0.01%)</title><rect x="0.9966%" y="197" width="0.0105%" height="15" fill="rgb(246,228,12)" fg:x="357589147" fg:w="3779220"/><text x="1.2466%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11,244,881 samples, 0.03%)</title><rect x="1.0489%" y="261" width="0.0313%" height="15" fill="rgb(213,55,15)" fg:x="376337278" fg:w="11244881"/><text x="1.2989%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11,244,881 samples, 0.03%)</title><rect x="1.0489%" y="245" width="0.0313%" height="15" fill="rgb(209,9,3)" fg:x="376337278" fg:w="11244881"/><text x="1.2989%" y="255.50"></text></g><g><title>alloc::alloc::alloc (11,244,881 samples, 0.03%)</title><rect x="1.0489%" y="229" width="0.0313%" height="15" fill="rgb(230,59,30)" fg:x="376337278" fg:w="11244881"/><text x="1.2989%" y="239.50"></text></g><g><title>malloc (7,465,302 samples, 0.02%)</title><rect x="1.0594%" y="213" width="0.0208%" height="15" fill="rgb(209,121,21)" fg:x="380116857" fg:w="7465302"/><text x="1.3094%" y="223.50"></text></g><g><title>[libc.so.6] (3,682,403 samples, 0.01%)</title><rect x="1.0700%" y="197" width="0.0103%" height="15" fill="rgb(220,109,13)" fg:x="383899756" fg:w="3682403"/><text x="1.3200%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (250,125,899 samples, 0.70%)</title><rect x="0.3936%" y="373" width="0.6971%" height="15" fill="rgb(232,18,1)" fg:x="141223262" fg:w="250125899"/><text x="0.6436%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (242,573,712 samples, 0.68%)</title><rect x="0.4147%" y="357" width="0.6761%" height="15" fill="rgb(215,41,42)" fg:x="148775449" fg:w="242573712"/><text x="0.6647%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (29,980,794 samples, 0.08%)</title><rect x="1.0072%" y="341" width="0.0836%" height="15" fill="rgb(224,123,36)" fg:x="361368367" fg:w="29980794"/><text x="1.2572%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29,980,794 samples, 0.08%)</title><rect x="1.0072%" y="325" width="0.0836%" height="15" fill="rgb(240,125,3)" fg:x="361368367" fg:w="29980794"/><text x="1.2572%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26,242,265 samples, 0.07%)</title><rect x="1.0176%" y="309" width="0.0731%" height="15" fill="rgb(205,98,50)" fg:x="365106896" fg:w="26242265"/><text x="1.2676%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (26,242,265 samples, 0.07%)</title><rect x="1.0176%" y="293" width="0.0731%" height="15" fill="rgb(205,185,37)" fg:x="365106896" fg:w="26242265"/><text x="1.2676%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (26,242,265 samples, 0.07%)</title><rect x="1.0176%" y="277" width="0.0731%" height="15" fill="rgb(238,207,15)" fg:x="365106896" fg:w="26242265"/><text x="1.2676%" y="287.50"></text></g><g><title>alloc::raw_vec::layout_array (3,767,002 samples, 0.01%)</title><rect x="1.0802%" y="261" width="0.0105%" height="15" fill="rgb(213,199,42)" fg:x="387582159" fg:w="3767002"/><text x="1.3302%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3,767,002 samples, 0.01%)</title><rect x="1.0802%" y="245" width="0.0105%" height="15" fill="rgb(235,201,11)" fg:x="387582159" fg:w="3767002"/><text x="1.3302%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (3,767,002 samples, 0.01%)</title><rect x="1.0802%" y="229" width="0.0105%" height="15" fill="rgb(207,46,11)" fg:x="387582159" fg:w="3767002"/><text x="1.3302%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3,767,002 samples, 0.01%)</title><rect x="1.0802%" y="213" width="0.0105%" height="15" fill="rgb(241,35,35)" fg:x="387582159" fg:w="3767002"/><text x="1.3302%" y="223.50"></text></g><g><title>core::intrinsics::unlikely (3,767,002 samples, 0.01%)</title><rect x="1.0802%" y="197" width="0.0105%" height="15" fill="rgb(243,32,47)" fg:x="387582159" fg:w="3767002"/><text x="1.3302%" y="207.50"></text></g><g><title>[img] (8,397,378 samples, 0.02%)</title><rect x="1.1004%" y="373" width="0.0234%" height="15" fill="rgb(247,202,23)" fg:x="394815789" fg:w="8397378"/><text x="1.3504%" y="383.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (7,394,370 samples, 0.02%)</title><rect x="1.1032%" y="357" width="0.0206%" height="15" fill="rgb(219,102,11)" fg:x="395818797" fg:w="7394370"/><text x="1.3532%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (7,394,370 samples, 0.02%)</title><rect x="1.1032%" y="341" width="0.0206%" height="15" fill="rgb(243,110,44)" fg:x="395818797" fg:w="7394370"/><text x="1.3532%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (7,394,370 samples, 0.02%)</title><rect x="1.1032%" y="325" width="0.0206%" height="15" fill="rgb(222,74,54)" fg:x="395818797" fg:w="7394370"/><text x="1.3532%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (7,394,370 samples, 0.02%)</title><rect x="1.1032%" y="309" width="0.0206%" height="15" fill="rgb(216,99,12)" fg:x="395818797" fg:w="7394370"/><text x="1.3532%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,711,115 samples, 0.01%)</title><rect x="1.1135%" y="293" width="0.0103%" height="15" fill="rgb(226,22,26)" fg:x="399502052" fg:w="3711115"/><text x="1.3635%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,711,115 samples, 0.01%)</title><rect x="1.1135%" y="277" width="0.0103%" height="15" fill="rgb(217,163,10)" fg:x="399502052" fg:w="3711115"/><text x="1.3635%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,711,115 samples, 0.01%)</title><rect x="1.1135%" y="261" width="0.0103%" height="15" fill="rgb(213,25,53)" fg:x="399502052" fg:w="3711115"/><text x="1.3635%" y="271.50"></text></g><g><title>[libc.so.6] (11,402,209 samples, 0.03%)</title><rect x="1.1238%" y="373" width="0.0318%" height="15" fill="rgb(252,105,26)" fg:x="403213167" fg:w="11402209"/><text x="1.3738%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,645,093 samples, 0.01%)</title><rect x="1.1556%" y="277" width="0.0102%" height="15" fill="rgb(220,39,43)" fg:x="414615376" fg:w="3645093"/><text x="1.4056%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (3,645,093 samples, 0.01%)</title><rect x="1.1556%" y="261" width="0.0102%" height="15" fill="rgb(229,68,48)" fg:x="414615376" fg:w="3645093"/><text x="1.4056%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7,411,092 samples, 0.02%)</title><rect x="1.1556%" y="357" width="0.0207%" height="15" fill="rgb(252,8,32)" fg:x="414615376" fg:w="7411092"/><text x="1.4056%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7,411,092 samples, 0.02%)</title><rect x="1.1556%" y="341" width="0.0207%" height="15" fill="rgb(223,20,43)" fg:x="414615376" fg:w="7411092"/><text x="1.4056%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (7,411,092 samples, 0.02%)</title><rect x="1.1556%" y="325" width="0.0207%" height="15" fill="rgb(229,81,49)" fg:x="414615376" fg:w="7411092"/><text x="1.4056%" y="335.50"></text></g><g><title>core::clone::Clone::clone (7,411,092 samples, 0.02%)</title><rect x="1.1556%" y="309" width="0.0207%" height="15" fill="rgb(236,28,36)" fg:x="414615376" fg:w="7411092"/><text x="1.4056%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7,411,092 samples, 0.02%)</title><rect x="1.1556%" y="293" width="0.0207%" height="15" fill="rgb(249,185,26)" fg:x="414615376" fg:w="7411092"/><text x="1.4056%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,765,999 samples, 0.01%)</title><rect x="1.1657%" y="277" width="0.0105%" height="15" fill="rgb(249,174,33)" fg:x="418260469" fg:w="3765999"/><text x="1.4157%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,765,999 samples, 0.01%)</title><rect x="1.1657%" y="261" width="0.0105%" height="15" fill="rgb(233,201,37)" fg:x="418260469" fg:w="3765999"/><text x="1.4157%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,765,999 samples, 0.01%)</title><rect x="1.1657%" y="245" width="0.0105%" height="15" fill="rgb(221,78,26)" fg:x="418260469" fg:w="3765999"/><text x="1.4157%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,765,999 samples, 0.01%)</title><rect x="1.1657%" y="229" width="0.0105%" height="15" fill="rgb(250,127,30)" fg:x="418260469" fg:w="3765999"/><text x="1.4157%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,765,999 samples, 0.01%)</title><rect x="1.1657%" y="213" width="0.0105%" height="15" fill="rgb(230,49,44)" fg:x="418260469" fg:w="3765999"/><text x="1.4157%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,765,999 samples, 0.01%)</title><rect x="1.1657%" y="197" width="0.0105%" height="15" fill="rgb(229,67,23)" fg:x="418260469" fg:w="3765999"/><text x="1.4157%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,781,208 samples, 0.01%)</title><rect x="1.2285%" y="309" width="0.0105%" height="15" fill="rgb(249,83,47)" fg:x="440773221" fg:w="3781208"/><text x="1.4785%" y="319.50"></text></g><g><title>core::ptr::write (3,781,208 samples, 0.01%)</title><rect x="1.2285%" y="293" width="0.0105%" height="15" fill="rgb(215,43,3)" fg:x="440773221" fg:w="3781208"/><text x="1.4785%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="245" width="0.0210%" height="15" fill="rgb(238,154,13)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="229" width="0.0210%" height="15" fill="rgb(219,56,2)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="213" width="0.0210%" height="15" fill="rgb(233,0,4)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="197" width="0.0210%" height="15" fill="rgb(235,30,7)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="181" width="0.0210%" height="15" fill="rgb(250,79,13)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="165" width="0.0210%" height="15" fill="rgb(211,146,34)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="149" width="0.0210%" height="15" fill="rgb(228,22,38)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="133" width="0.0210%" height="15" fill="rgb(235,168,5)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="117" width="0.0210%" height="15" fill="rgb(221,155,16)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="127.50"></text></g><g><title>cfree (7,533,927 samples, 0.02%)</title><rect x="1.2600%" y="101" width="0.0210%" height="15" fill="rgb(215,215,53)" fg:x="452092748" fg:w="7533927"/><text x="1.5100%" y="111.50"></text></g><g><title>[libc.so.6] (3,754,550 samples, 0.01%)</title><rect x="1.2706%" y="85" width="0.0105%" height="15" fill="rgb(223,4,10)" fg:x="455872125" fg:w="3754550"/><text x="1.5206%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;u16,alloc::vec::Vec&lt;u16&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;,alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (3,763,482 samples, 0.01%)</title><rect x="1.2810%" y="245" width="0.0105%" height="15" fill="rgb(234,103,6)" fg:x="459626675" fg:w="3763482"/><text x="1.5310%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;,alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt;&gt;::{{closure}}&gt; (3,763,482 samples, 0.01%)</title><rect x="1.2810%" y="229" width="0.0105%" height="15" fill="rgb(227,97,0)" fg:x="459626675" fg:w="3763482"/><text x="1.5310%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (3,763,482 samples, 0.01%)</title><rect x="1.2810%" y="213" width="0.0105%" height="15" fill="rgb(234,150,53)" fg:x="459626675" fg:w="3763482"/><text x="1.5310%" y="223.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (3,763,482 samples, 0.01%)</title><rect x="1.2810%" y="197" width="0.0105%" height="15" fill="rgb(228,201,54)" fg:x="459626675" fg:w="3763482"/><text x="1.5310%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3,733,861 samples, 0.01%)</title><rect x="1.2915%" y="245" width="0.0104%" height="15" fill="rgb(222,22,37)" fg:x="463390157" fg:w="3733861"/><text x="1.5415%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48,858,757 samples, 0.14%)</title><rect x="1.1762%" y="357" width="0.1362%" height="15" fill="rgb(237,53,32)" fg:x="422026468" fg:w="48858757"/><text x="1.4262%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (45,177,242 samples, 0.13%)</title><rect x="1.1865%" y="341" width="0.1259%" height="15" fill="rgb(233,25,53)" fg:x="425707983" fg:w="45177242"/><text x="1.4365%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (30,112,004 samples, 0.08%)</title><rect x="1.2285%" y="325" width="0.0839%" height="15" fill="rgb(210,40,34)" fg:x="440773221" fg:w="30112004"/><text x="1.4785%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (26,330,796 samples, 0.07%)</title><rect x="1.2390%" y="309" width="0.0734%" height="15" fill="rgb(241,220,44)" fg:x="444554429" fg:w="26330796"/><text x="1.4890%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (26,330,796 samples, 0.07%)</title><rect x="1.2390%" y="293" width="0.0734%" height="15" fill="rgb(235,28,35)" fg:x="444554429" fg:w="26330796"/><text x="1.4890%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26,330,796 samples, 0.07%)</title><rect x="1.2390%" y="277" width="0.0734%" height="15" fill="rgb(210,56,17)" fg:x="444554429" fg:w="26330796"/><text x="1.4890%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26,330,796 samples, 0.07%)</title><rect x="1.2390%" y="261" width="0.0734%" height="15" fill="rgb(224,130,29)" fg:x="444554429" fg:w="26330796"/><text x="1.4890%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (3,761,207 samples, 0.01%)</title><rect x="1.3019%" y="245" width="0.0105%" height="15" fill="rgb(235,212,8)" fg:x="467124018" fg:w="3761207"/><text x="1.5519%" y="255.50"></text></g><g><title>core::ptr::read (3,761,207 samples, 0.01%)</title><rect x="1.3019%" y="229" width="0.0105%" height="15" fill="rgb(223,33,50)" fg:x="467124018" fg:w="3761207"/><text x="1.5519%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by_key::key::_{{closure}} (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="325" width="0.0105%" height="15" fill="rgb(219,149,13)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="335.50"></text></g><g><title>img::png::filter::filter_scanlines::_{{closure}} (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="309" width="0.0105%" height="15" fill="rgb(250,156,29)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;img::png::deflate::bitstream::WriteBitStream&gt; (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="293" width="0.0105%" height="15" fill="rgb(216,193,19)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="277" width="0.0105%" height="15" fill="rgb(216,135,14)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="261" width="0.0105%" height="15" fill="rgb(241,47,5)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="245" width="0.0105%" height="15" fill="rgb(233,42,35)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="229" width="0.0105%" height="15" fill="rgb(231,13,6)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="213" width="0.0105%" height="15" fill="rgb(207,181,40)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="197" width="0.0105%" height="15" fill="rgb(254,173,49)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="207.50"></text></g><g><title>cfree (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="181" width="0.0105%" height="15" fill="rgb(221,1,38)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="191.50"></text></g><g><title>[libc.so.6] (3,775,748 samples, 0.01%)</title><rect x="1.3124%" y="165" width="0.0105%" height="15" fill="rgb(206,124,46)" fg:x="470885225" fg:w="3775748"/><text x="1.5624%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,715,298 samples, 0.05%)</title><rect x="1.3124%" y="357" width="0.0522%" height="15" fill="rgb(249,21,11)" fg:x="470885225" fg:w="18715298"/><text x="1.5624%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (18,715,298 samples, 0.05%)</title><rect x="1.3124%" y="341" width="0.0522%" height="15" fill="rgb(222,201,40)" fg:x="470885225" fg:w="18715298"/><text x="1.5624%" y="351.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths::_{{closure}} (14,939,550 samples, 0.04%)</title><rect x="1.3229%" y="325" width="0.0416%" height="15" fill="rgb(235,61,29)" fg:x="474660973" fg:w="14939550"/><text x="1.5729%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (14,939,550 samples, 0.04%)</title><rect x="1.3229%" y="309" width="0.0416%" height="15" fill="rgb(219,207,3)" fg:x="474660973" fg:w="14939550"/><text x="1.5729%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (14,939,550 samples, 0.04%)</title><rect x="1.3229%" y="293" width="0.0416%" height="15" fill="rgb(222,56,46)" fg:x="474660973" fg:w="14939550"/><text x="1.5729%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (14,939,550 samples, 0.04%)</title><rect x="1.3229%" y="277" width="0.0416%" height="15" fill="rgb(239,76,54)" fg:x="474660973" fg:w="14939550"/><text x="1.5729%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14,939,550 samples, 0.04%)</title><rect x="1.3229%" y="261" width="0.0416%" height="15" fill="rgb(231,124,27)" fg:x="474660973" fg:w="14939550"/><text x="1.5729%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14,939,550 samples, 0.04%)</title><rect x="1.3229%" y="245" width="0.0416%" height="15" fill="rgb(249,195,6)" fg:x="474660973" fg:w="14939550"/><text x="1.5729%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7,484,385 samples, 0.02%)</title><rect x="1.3437%" y="229" width="0.0209%" height="15" fill="rgb(237,174,47)" fg:x="482116138" fg:w="7484385"/><text x="1.5937%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (7,484,385 samples, 0.02%)</title><rect x="1.3437%" y="213" width="0.0209%" height="15" fill="rgb(206,201,31)" fg:x="482116138" fg:w="7484385"/><text x="1.5937%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (22,150,627 samples, 0.06%)</title><rect x="1.3646%" y="357" width="0.0617%" height="15" fill="rgb(231,57,52)" fg:x="489600523" fg:w="22150627"/><text x="1.6146%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (22,150,627 samples, 0.06%)</title><rect x="1.3646%" y="341" width="0.0617%" height="15" fill="rgb(248,177,22)" fg:x="489600523" fg:w="22150627"/><text x="1.6146%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22,150,627 samples, 0.06%)</title><rect x="1.3646%" y="325" width="0.0617%" height="15" fill="rgb(215,211,37)" fg:x="489600523" fg:w="22150627"/><text x="1.6146%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (18,466,418 samples, 0.05%)</title><rect x="1.3748%" y="309" width="0.0515%" height="15" fill="rgb(241,128,51)" fg:x="493284732" fg:w="18466418"/><text x="1.6248%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,682,253 samples, 0.01%)</title><rect x="1.4263%" y="309" width="0.0103%" height="15" fill="rgb(227,165,31)" fg:x="511751150" fg:w="3682253"/><text x="1.6763%" y="319.50"></text></g><g><title>[libc.so.6] (3,682,253 samples, 0.01%)</title><rect x="1.4263%" y="293" width="0.0103%" height="15" fill="rgb(228,167,24)" fg:x="511751150" fg:w="3682253"/><text x="1.6763%" y="303.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (7,443,323 samples, 0.02%)</title><rect x="1.4263%" y="341" width="0.0207%" height="15" fill="rgb(228,143,12)" fg:x="511751150" fg:w="7443323"/><text x="1.6763%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (7,443,323 samples, 0.02%)</title><rect x="1.4263%" y="325" width="0.0207%" height="15" fill="rgb(249,149,8)" fg:x="511751150" fg:w="7443323"/><text x="1.6763%" y="335.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (3,761,070 samples, 0.01%)</title><rect x="1.4366%" y="309" width="0.0105%" height="15" fill="rgb(243,35,44)" fg:x="515433403" fg:w="3761070"/><text x="1.6866%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,761,070 samples, 0.01%)</title><rect x="1.4366%" y="293" width="0.0105%" height="15" fill="rgb(246,89,9)" fg:x="515433403" fg:w="3761070"/><text x="1.6866%" y="303.50"></text></g><g><title>[unknown] (14,991,270 samples, 0.04%)</title><rect x="1.4263%" y="357" width="0.0418%" height="15" fill="rgb(233,213,13)" fg:x="511751150" fg:w="14991270"/><text x="1.6763%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (7,547,947 samples, 0.02%)</title><rect x="1.4471%" y="341" width="0.0210%" height="15" fill="rgb(233,141,41)" fg:x="519194473" fg:w="7547947"/><text x="1.6971%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="325" width="0.0104%" height="15" fill="rgb(239,167,4)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="309" width="0.0104%" height="15" fill="rgb(209,217,16)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="293" width="0.0104%" height="15" fill="rgb(219,88,35)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="277" width="0.0104%" height="15" fill="rgb(220,193,23)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="261" width="0.0104%" height="15" fill="rgb(230,90,52)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="245" width="0.0104%" height="15" fill="rgb(252,106,19)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="229" width="0.0104%" height="15" fill="rgb(206,74,20)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="213" width="0.0104%" height="15" fill="rgb(230,138,44)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="197" width="0.0104%" height="15" fill="rgb(235,182,43)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="207.50"></text></g><g><title>alloc::alloc::alloc (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="181" width="0.0104%" height="15" fill="rgb(242,16,51)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="191.50"></text></g><g><title>malloc (3,744,986 samples, 0.01%)</title><rect x="1.4576%" y="165" width="0.0104%" height="15" fill="rgb(248,9,4)" fg:x="522997434" fg:w="3744986"/><text x="1.7076%" y="175.50"></text></g><g><title>__rustc::__rust_alloc (11,285,531 samples, 0.03%)</title><rect x="1.4681%" y="357" width="0.0315%" height="15" fill="rgb(210,31,22)" fg:x="526742420" fg:w="11285531"/><text x="1.7181%" y="367.50"></text></g><g><title>__rustc::__rust_dealloc (3,754,395 samples, 0.01%)</title><rect x="1.4995%" y="357" width="0.0105%" height="15" fill="rgb(239,54,39)" fg:x="538027951" fg:w="3754395"/><text x="1.7495%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (3,780,358 samples, 0.01%)</title><rect x="1.5100%" y="357" width="0.0105%" height="15" fill="rgb(230,99,41)" fg:x="541782346" fg:w="3780358"/><text x="1.7600%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,780,358 samples, 0.01%)</title><rect x="1.5100%" y="341" width="0.0105%" height="15" fill="rgb(253,106,12)" fg:x="541782346" fg:w="3780358"/><text x="1.7600%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,780,358 samples, 0.01%)</title><rect x="1.5100%" y="325" width="0.0105%" height="15" fill="rgb(213,46,41)" fg:x="541782346" fg:w="3780358"/><text x="1.7600%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,780,358 samples, 0.01%)</title><rect x="1.5100%" y="309" width="0.0105%" height="15" fill="rgb(215,133,35)" fg:x="541782346" fg:w="3780358"/><text x="1.7600%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,780,358 samples, 0.01%)</title><rect x="1.5100%" y="293" width="0.0105%" height="15" fill="rgb(213,28,5)" fg:x="541782346" fg:w="3780358"/><text x="1.7600%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,780,358 samples, 0.01%)</title><rect x="1.5100%" y="277" width="0.0105%" height="15" fill="rgb(215,77,49)" fg:x="541782346" fg:w="3780358"/><text x="1.7600%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,780,358 samples, 0.01%)</title><rect x="1.5100%" y="261" width="0.0105%" height="15" fill="rgb(248,100,22)" fg:x="541782346" fg:w="3780358"/><text x="1.7600%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11,256,135 samples, 0.03%)</title><rect x="1.5205%" y="357" width="0.0314%" height="15" fill="rgb(208,67,9)" fg:x="545562704" fg:w="11256135"/><text x="1.7705%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,681,408 samples, 0.01%)</title><rect x="1.5417%" y="341" width="0.0103%" height="15" fill="rgb(219,133,21)" fg:x="553137431" fg:w="3681408"/><text x="1.7917%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,681,408 samples, 0.01%)</title><rect x="1.5417%" y="325" width="0.0103%" height="15" fill="rgb(246,46,29)" fg:x="553137431" fg:w="3681408"/><text x="1.7917%" y="335.50"></text></g><g><title>core::cmp::max (3,681,408 samples, 0.01%)</title><rect x="1.5417%" y="309" width="0.0103%" height="15" fill="rgb(246,185,52)" fg:x="553137431" fg:w="3681408"/><text x="1.7917%" y="319.50"></text></g><g><title>core::cmp::Ord::max (3,681,408 samples, 0.01%)</title><rect x="1.5417%" y="293" width="0.0103%" height="15" fill="rgb(252,136,11)" fg:x="553137431" fg:w="3681408"/><text x="1.7917%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (7,479,399 samples, 0.02%)</title><rect x="1.5519%" y="357" width="0.0208%" height="15" fill="rgb(219,138,53)" fg:x="556818839" fg:w="7479399"/><text x="1.8019%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7,479,399 samples, 0.02%)</title><rect x="1.5519%" y="341" width="0.0208%" height="15" fill="rgb(211,51,23)" fg:x="556818839" fg:w="7479399"/><text x="1.8019%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7,479,399 samples, 0.02%)</title><rect x="1.5519%" y="325" width="0.0208%" height="15" fill="rgb(247,221,28)" fg:x="556818839" fg:w="7479399"/><text x="1.8019%" y="335.50"></text></g><g><title>alloc::alloc::realloc (7,479,399 samples, 0.02%)</title><rect x="1.5519%" y="309" width="0.0208%" height="15" fill="rgb(251,222,45)" fg:x="556818839" fg:w="7479399"/><text x="1.8019%" y="319.50"></text></g><g><title>realloc (7,479,399 samples, 0.02%)</title><rect x="1.5519%" y="293" width="0.0208%" height="15" fill="rgb(217,162,53)" fg:x="556818839" fg:w="7479399"/><text x="1.8019%" y="303.50"></text></g><g><title>[libc.so.6] (7,479,399 samples, 0.02%)</title><rect x="1.5519%" y="277" width="0.0208%" height="15" fill="rgb(229,93,14)" fg:x="556818839" fg:w="7479399"/><text x="1.8019%" y="287.50"></text></g><g><title>[libc.so.6] (7,479,399 samples, 0.02%)</title><rect x="1.5519%" y="261" width="0.0208%" height="15" fill="rgb(209,67,49)" fg:x="556818839" fg:w="7479399"/><text x="1.8019%" y="271.50"></text></g><g><title>[libc.so.6] (7,479,399 samples, 0.02%)</title><rect x="1.5519%" y="245" width="0.0208%" height="15" fill="rgb(213,87,29)" fg:x="556818839" fg:w="7479399"/><text x="1.8019%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,760,956 samples, 0.01%)</title><rect x="1.6352%" y="277" width="0.0105%" height="15" fill="rgb(205,151,52)" fg:x="586692644" fg:w="3760956"/><text x="1.8852%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11,217,366 samples, 0.03%)</title><rect x="1.6249%" y="293" width="0.0313%" height="15" fill="rgb(253,215,39)" fg:x="583008621" fg:w="11217366"/><text x="1.8749%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,772,387 samples, 0.01%)</title><rect x="1.6457%" y="277" width="0.0105%" height="15" fill="rgb(221,220,41)" fg:x="590453600" fg:w="3772387"/><text x="1.8957%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (22,479,083 samples, 0.06%)</title><rect x="1.6980%" y="277" width="0.0627%" height="15" fill="rgb(218,133,21)" fg:x="609233243" fg:w="22479083"/><text x="1.9480%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (59,852,215 samples, 0.17%)</title><rect x="1.6041%" y="341" width="0.1668%" height="15" fill="rgb(221,193,43)" fg:x="575552069" fg:w="59852215"/><text x="1.8541%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (59,852,215 samples, 0.17%)</title><rect x="1.6041%" y="325" width="0.1668%" height="15" fill="rgb(240,128,52)" fg:x="575552069" fg:w="59852215"/><text x="1.8541%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (59,852,215 samples, 0.17%)</title><rect x="1.6041%" y="309" width="0.1668%" height="15" fill="rgb(253,114,12)" fg:x="575552069" fg:w="59852215"/><text x="1.8541%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (41,178,297 samples, 0.11%)</title><rect x="1.6562%" y="293" width="0.1148%" height="15" fill="rgb(215,223,47)" fg:x="594225987" fg:w="41178297"/><text x="1.9062%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,691,958 samples, 0.01%)</title><rect x="1.7606%" y="277" width="0.0103%" height="15" fill="rgb(248,225,23)" fg:x="631712326" fg:w="3691958"/><text x="2.0106%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (18,857,341 samples, 0.05%)</title><rect x="1.7709%" y="341" width="0.0526%" height="15" fill="rgb(250,108,0)" fg:x="635404284" fg:w="18857341"/><text x="2.0209%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (15,075,267 samples, 0.04%)</title><rect x="1.7815%" y="325" width="0.0420%" height="15" fill="rgb(228,208,7)" fg:x="639186358" fg:w="15075267"/><text x="2.0315%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (15,075,267 samples, 0.04%)</title><rect x="1.7815%" y="309" width="0.0420%" height="15" fill="rgb(244,45,10)" fg:x="639186358" fg:w="15075267"/><text x="2.0315%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (15,075,267 samples, 0.04%)</title><rect x="1.7815%" y="293" width="0.0420%" height="15" fill="rgb(207,125,25)" fg:x="639186358" fg:w="15075267"/><text x="2.0315%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (93,745,148 samples, 0.26%)</title><rect x="1.5728%" y="357" width="0.2613%" height="15" fill="rgb(210,195,18)" fg:x="564298238" fg:w="93745148"/><text x="1.8228%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,781,761 samples, 0.01%)</title><rect x="1.8235%" y="341" width="0.0105%" height="15" fill="rgb(249,80,12)" fg:x="654261625" fg:w="3781761"/><text x="2.0735%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (3,781,761 samples, 0.01%)</title><rect x="1.8235%" y="325" width="0.0105%" height="15" fill="rgb(221,65,9)" fg:x="654261625" fg:w="3781761"/><text x="2.0735%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u32 (3,781,761 samples, 0.01%)</title><rect x="1.8235%" y="309" width="0.0105%" height="15" fill="rgb(235,49,36)" fg:x="654261625" fg:w="3781761"/><text x="2.0735%" y="319.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (3,781,761 samples, 0.01%)</title><rect x="1.8235%" y="293" width="0.0105%" height="15" fill="rgb(225,32,20)" fg:x="654261625" fg:w="3781761"/><text x="2.0735%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (11,068,397 samples, 0.03%)</title><rect x="1.8444%" y="293" width="0.0308%" height="15" fill="rgb(215,141,46)" fg:x="661745964" fg:w="11068397"/><text x="2.0944%" y="303.50"></text></g><g><title>core::cmp::max_by (11,068,397 samples, 0.03%)</title><rect x="1.8444%" y="277" width="0.0308%" height="15" fill="rgb(250,160,47)" fg:x="661745964" fg:w="11068397"/><text x="2.0944%" y="287.50"></text></g><g><title>core::cmp::Ordering::is_lt (3,718,648 samples, 0.01%)</title><rect x="1.8648%" y="261" width="0.0104%" height="15" fill="rgb(216,222,40)" fg:x="669095713" fg:w="3718648"/><text x="2.1148%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (18,510,729 samples, 0.05%)</title><rect x="1.8340%" y="309" width="0.0516%" height="15" fill="rgb(234,217,39)" fg:x="658043386" fg:w="18510729"/><text x="2.0840%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::_{{closure}} (3,739,754 samples, 0.01%)</title><rect x="1.8752%" y="293" width="0.0104%" height="15" fill="rgb(207,178,40)" fg:x="672814361" fg:w="3739754"/><text x="2.1252%" y="303.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (3,739,754 samples, 0.01%)</title><rect x="1.8752%" y="277" width="0.0104%" height="15" fill="rgb(221,136,13)" fg:x="672814361" fg:w="3739754"/><text x="2.1252%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (25,963,620 samples, 0.07%)</title><rect x="1.8340%" y="357" width="0.0724%" height="15" fill="rgb(249,199,10)" fg:x="658043386" fg:w="25963620"/><text x="2.0840%" y="367.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (25,963,620 samples, 0.07%)</title><rect x="1.8340%" y="341" width="0.0724%" height="15" fill="rgb(249,222,13)" fg:x="658043386" fg:w="25963620"/><text x="2.0840%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (25,963,620 samples, 0.07%)</title><rect x="1.8340%" y="325" width="0.0724%" height="15" fill="rgb(244,185,38)" fg:x="658043386" fg:w="25963620"/><text x="2.0840%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (7,452,891 samples, 0.02%)</title><rect x="1.8856%" y="309" width="0.0208%" height="15" fill="rgb(236,202,9)" fg:x="676554115" fg:w="7452891"/><text x="2.1356%" y="319.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (7,452,891 samples, 0.02%)</title><rect x="1.8856%" y="293" width="0.0208%" height="15" fill="rgb(250,229,37)" fg:x="676554115" fg:w="7452891"/><text x="2.1356%" y="303.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::from_slice (7,452,891 samples, 0.02%)</title><rect x="1.8856%" y="277" width="0.0208%" height="15" fill="rgb(206,174,23)" fg:x="676554115" fg:w="7452891"/><text x="2.1356%" y="287.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::load (7,452,891 samples, 0.02%)</title><rect x="1.8856%" y="261" width="0.0208%" height="15" fill="rgb(211,33,43)" fg:x="676554115" fg:w="7452891"/><text x="2.1356%" y="271.50"></text></g><g><title>core::ptr::copy_nonoverlapping (7,452,891 samples, 0.02%)</title><rect x="1.8856%" y="245" width="0.0208%" height="15" fill="rgb(245,58,50)" fg:x="676554115" fg:w="7452891"/><text x="2.1356%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (7,106,321 samples, 0.02%)</title><rect x="1.9064%" y="357" width="0.0198%" height="15" fill="rgb(244,68,36)" fg:x="684007006" fg:w="7106321"/><text x="2.1564%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (7,106,321 samples, 0.02%)</title><rect x="1.9064%" y="341" width="0.0198%" height="15" fill="rgb(232,229,15)" fg:x="684007006" fg:w="7106321"/><text x="2.1564%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (3,748,481 samples, 0.01%)</title><rect x="1.9158%" y="325" width="0.0104%" height="15" fill="rgb(254,30,23)" fg:x="687364846" fg:w="3748481"/><text x="2.1658%" y="335.50"></text></g><g><title>core::ptr::read (3,748,481 samples, 0.01%)</title><rect x="1.9158%" y="309" width="0.0104%" height="15" fill="rgb(235,160,14)" fg:x="687364846" fg:w="3748481"/><text x="2.1658%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (7,480,632 samples, 0.02%)</title><rect x="1.9262%" y="341" width="0.0208%" height="15" fill="rgb(212,155,44)" fg:x="691113327" fg:w="7480632"/><text x="2.1762%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (3,749,613 samples, 0.01%)</title><rect x="1.9366%" y="325" width="0.0105%" height="15" fill="rgb(226,2,50)" fg:x="694844346" fg:w="3749613"/><text x="2.1866%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,749,613 samples, 0.01%)</title><rect x="1.9366%" y="309" width="0.0105%" height="15" fill="rgb(234,177,6)" fg:x="694844346" fg:w="3749613"/><text x="2.1866%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,830,577 samples, 0.01%)</title><rect x="1.9471%" y="341" width="0.0107%" height="15" fill="rgb(217,24,9)" fg:x="698593959" fg:w="3830577"/><text x="2.1971%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (3,830,577 samples, 0.01%)</title><rect x="1.9471%" y="325" width="0.0107%" height="15" fill="rgb(220,13,46)" fg:x="698593959" fg:w="3830577"/><text x="2.1971%" y="335.50"></text></g><g><title>&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,830,577 samples, 0.01%)</title><rect x="1.9471%" y="309" width="0.0107%" height="15" fill="rgb(239,221,27)" fg:x="698593959" fg:w="3830577"/><text x="2.1971%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,830,577 samples, 0.01%)</title><rect x="1.9471%" y="293" width="0.0107%" height="15" fill="rgb(222,198,25)" fg:x="698593959" fg:w="3830577"/><text x="2.1971%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (3,701,179 samples, 0.01%)</title><rect x="1.9577%" y="341" width="0.0103%" height="15" fill="rgb(211,99,13)" fg:x="702424536" fg:w="3701179"/><text x="2.2077%" y="351.50"></text></g><g><title>core::hint::select_unpredictable (3,701,179 samples, 0.01%)</title><rect x="1.9577%" y="325" width="0.0103%" height="15" fill="rgb(232,111,31)" fg:x="702424536" fg:w="3701179"/><text x="2.2077%" y="335.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (7,363,963 samples, 0.02%)</title><rect x="1.9680%" y="325" width="0.0205%" height="15" fill="rgb(245,82,37)" fg:x="706125715" fg:w="7363963"/><text x="2.2180%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7,363,963 samples, 0.02%)</title><rect x="1.9680%" y="309" width="0.0205%" height="15" fill="rgb(227,149,46)" fg:x="706125715" fg:w="7363963"/><text x="2.2180%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (7,363,963 samples, 0.02%)</title><rect x="1.9680%" y="293" width="0.0205%" height="15" fill="rgb(218,36,50)" fg:x="706125715" fg:w="7363963"/><text x="2.2180%" y="303.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,682,280 samples, 0.01%)</title><rect x="1.9783%" y="277" width="0.0103%" height="15" fill="rgb(226,80,48)" fg:x="709807398" fg:w="3682280"/><text x="2.2283%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (26,069,836 samples, 0.07%)</title><rect x="1.9262%" y="357" width="0.0727%" height="15" fill="rgb(238,224,15)" fg:x="691113327" fg:w="26069836"/><text x="2.1762%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (11,057,448 samples, 0.03%)</title><rect x="1.9680%" y="341" width="0.0308%" height="15" fill="rgb(241,136,10)" fg:x="706125715" fg:w="11057448"/><text x="2.2180%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (3,693,485 samples, 0.01%)</title><rect x="1.9886%" y="325" width="0.0103%" height="15" fill="rgb(208,32,45)" fg:x="713489678" fg:w="3693485"/><text x="2.2386%" y="335.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (3,693,485 samples, 0.01%)</title><rect x="1.9886%" y="309" width="0.0103%" height="15" fill="rgb(207,135,9)" fg:x="713489678" fg:w="3693485"/><text x="2.2386%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,693,485 samples, 0.01%)</title><rect x="1.9886%" y="293" width="0.0103%" height="15" fill="rgb(206,86,44)" fg:x="713489678" fg:w="3693485"/><text x="2.2386%" y="303.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_down (3,764,154 samples, 0.01%)</title><rect x="1.9989%" y="309" width="0.0105%" height="15" fill="rgb(245,177,15)" fg:x="717183163" fg:w="3764154"/><text x="2.2489%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,764,154 samples, 0.01%)</title><rect x="1.9989%" y="293" width="0.0105%" height="15" fill="rgb(206,64,50)" fg:x="717183163" fg:w="3764154"/><text x="2.2489%" y="303.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (11,135,115 samples, 0.03%)</title><rect x="1.9989%" y="341" width="0.0310%" height="15" fill="rgb(234,36,40)" fg:x="717183163" fg:w="11135115"/><text x="2.2489%" y="351.50"></text></g><g><title>core::slice::sort::stable::merge::merge (11,135,115 samples, 0.03%)</title><rect x="1.9989%" y="325" width="0.0310%" height="15" fill="rgb(213,64,8)" fg:x="717183163" fg:w="11135115"/><text x="2.2489%" y="335.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_up (7,370,961 samples, 0.02%)</title><rect x="2.0094%" y="309" width="0.0205%" height="15" fill="rgb(210,75,36)" fg:x="720947317" fg:w="7370961"/><text x="2.2594%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,684,295 samples, 0.01%)</title><rect x="2.0196%" y="293" width="0.0103%" height="15" fill="rgb(229,88,21)" fg:x="724633983" fg:w="3684295"/><text x="2.2696%" y="303.50"></text></g><g><title>core::slice::sort::stable::drift::sort (14,892,652 samples, 0.04%)</title><rect x="1.9989%" y="357" width="0.0415%" height="15" fill="rgb(252,204,47)" fg:x="717183163" fg:w="14892652"/><text x="2.2489%" y="367.50"></text></g><g><title>core::slice::sort::stable::drift::stable_quicksort (3,757,537 samples, 0.01%)</title><rect x="2.0299%" y="341" width="0.0105%" height="15" fill="rgb(208,77,27)" fg:x="728318278" fg:w="3757537"/><text x="2.2799%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (3,757,537 samples, 0.01%)</title><rect x="2.0299%" y="325" width="0.0105%" height="15" fill="rgb(221,76,26)" fg:x="728318278" fg:w="3757537"/><text x="2.2799%" y="335.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (3,757,537 samples, 0.01%)</title><rect x="2.0299%" y="309" width="0.0105%" height="15" fill="rgb(225,139,18)" fg:x="728318278" fg:w="3757537"/><text x="2.2799%" y="319.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (3,757,537 samples, 0.01%)</title><rect x="2.0299%" y="293" width="0.0105%" height="15" fill="rgb(230,137,11)" fg:x="728318278" fg:w="3757537"/><text x="2.2799%" y="303.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (3,757,537 samples, 0.01%)</title><rect x="2.0299%" y="277" width="0.0105%" height="15" fill="rgb(212,28,1)" fg:x="728318278" fg:w="3757537"/><text x="2.2799%" y="287.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (3,757,537 samples, 0.01%)</title><rect x="2.0299%" y="261" width="0.0105%" height="15" fill="rgb(248,164,17)" fg:x="728318278" fg:w="3757537"/><text x="2.2799%" y="271.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (3,757,537 samples, 0.01%)</title><rect x="2.0299%" y="245" width="0.0105%" height="15" fill="rgb(222,171,42)" fg:x="728318278" fg:w="3757537"/><text x="2.2799%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3,757,537 samples, 0.01%)</title><rect x="2.0299%" y="229" width="0.0105%" height="15" fill="rgb(243,84,45)" fg:x="728318278" fg:w="3757537"/><text x="2.2799%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,757,537 samples, 0.01%)</title><rect x="2.0299%" y="213" width="0.0105%" height="15" fill="rgb(252,49,23)" fg:x="728318278" fg:w="3757537"/><text x="2.2799%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3,764,355 samples, 0.01%)</title><rect x="2.0404%" y="325" width="0.0105%" height="15" fill="rgb(215,19,7)" fg:x="732075815" fg:w="3764355"/><text x="2.2904%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,764,355 samples, 0.01%)</title><rect x="2.0404%" y="309" width="0.0105%" height="15" fill="rgb(238,81,41)" fg:x="732075815" fg:w="3764355"/><text x="2.2904%" y="319.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (7,524,279 samples, 0.02%)</title><rect x="2.0404%" y="341" width="0.0210%" height="15" fill="rgb(210,199,37)" fg:x="732075815" fg:w="7524279"/><text x="2.2904%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (3,759,924 samples, 0.01%)</title><rect x="2.0509%" y="325" width="0.0105%" height="15" fill="rgb(244,192,49)" fg:x="735840170" fg:w="3759924"/><text x="2.3009%" y="335.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (3,759,924 samples, 0.01%)</title><rect x="2.0509%" y="309" width="0.0105%" height="15" fill="rgb(226,211,11)" fg:x="735840170" fg:w="3759924"/><text x="2.3009%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3,759,924 samples, 0.01%)</title><rect x="2.0509%" y="293" width="0.0105%" height="15" fill="rgb(236,162,54)" fg:x="735840170" fg:w="3759924"/><text x="2.3009%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,759,924 samples, 0.01%)</title><rect x="2.0509%" y="277" width="0.0105%" height="15" fill="rgb(220,229,9)" fg:x="735840170" fg:w="3759924"/><text x="2.3009%" y="287.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (14,958,857 samples, 0.04%)</title><rect x="2.0404%" y="357" width="0.0417%" height="15" fill="rgb(250,87,22)" fg:x="732075815" fg:w="14958857"/><text x="2.2904%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (7,434,578 samples, 0.02%)</title><rect x="2.0613%" y="341" width="0.0207%" height="15" fill="rgb(239,43,17)" fg:x="739600094" fg:w="7434578"/><text x="2.3113%" y="351.50"></text></g><g><title>core::ptr::copy_nonoverlapping (7,434,578 samples, 0.02%)</title><rect x="2.0613%" y="325" width="0.0207%" height="15" fill="rgb(231,177,25)" fg:x="739600094" fg:w="7434578"/><text x="2.3113%" y="335.50"></text></g><g><title>[libc.so.6] (3,748,411 samples, 0.01%)</title><rect x="2.0716%" y="309" width="0.0104%" height="15" fill="rgb(219,179,1)" fg:x="743286261" fg:w="3748411"/><text x="2.3216%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,770,396 samples, 0.01%)</title><rect x="2.0821%" y="357" width="0.0105%" height="15" fill="rgb(238,219,53)" fg:x="747034672" fg:w="3770396"/><text x="2.3321%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (3,756,860 samples, 0.01%)</title><rect x="2.0926%" y="309" width="0.0105%" height="15" fill="rgb(232,167,36)" fg:x="750805068" fg:w="3756860"/><text x="2.3426%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15,129,264 samples, 0.04%)</title><rect x="2.0926%" y="357" width="0.0422%" height="15" fill="rgb(244,19,51)" fg:x="750805068" fg:w="15129264"/><text x="2.3426%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (15,129,264 samples, 0.04%)</title><rect x="2.0926%" y="341" width="0.0422%" height="15" fill="rgb(224,6,22)" fg:x="750805068" fg:w="15129264"/><text x="2.3426%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (15,129,264 samples, 0.04%)</title><rect x="2.0926%" y="325" width="0.0422%" height="15" fill="rgb(224,145,5)" fg:x="750805068" fg:w="15129264"/><text x="2.3426%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="309" width="0.0317%" height="15" fill="rgb(234,130,49)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="293" width="0.0317%" height="15" fill="rgb(254,6,2)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="277" width="0.0317%" height="15" fill="rgb(208,96,46)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="287.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="261" width="0.0317%" height="15" fill="rgb(239,3,39)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="245" width="0.0317%" height="15" fill="rgb(233,210,1)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="229" width="0.0317%" height="15" fill="rgb(244,137,37)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="239.50"></text></g><g><title>alloc::alloc::alloc (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="213" width="0.0317%" height="15" fill="rgb(240,136,2)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="223.50"></text></g><g><title>malloc (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="197" width="0.0317%" height="15" fill="rgb(239,18,37)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="207.50"></text></g><g><title>[libc.so.6] (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="181" width="0.0317%" height="15" fill="rgb(218,185,22)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="191.50"></text></g><g><title>[libc.so.6] (11,372,404 samples, 0.03%)</title><rect x="2.1030%" y="165" width="0.0317%" height="15" fill="rgb(225,218,4)" fg:x="754561928" fg:w="11372404"/><text x="2.3530%" y="175.50"></text></g><g><title>[libc.so.6] (3,775,585 samples, 0.01%)</title><rect x="2.1242%" y="149" width="0.0105%" height="15" fill="rgb(230,182,32)" fg:x="762158747" fg:w="3775585"/><text x="2.3742%" y="159.50"></text></g><g><title>img::png::deflate::encode_block_type_one (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="357" width="0.0100%" height="15" fill="rgb(242,56,43)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,img::png::deflate::bitstream::WriteBitStream&gt;&gt; (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="341" width="0.0100%" height="15" fill="rgb(233,99,24)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,img::png::deflate::bitstream::WriteBitStream,std::hash::random::RandomState&gt;&gt; (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="325" width="0.0100%" height="15" fill="rgb(234,209,42)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,img::png::deflate::bitstream::WriteBitStream)&gt;&gt; (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="309" width="0.0100%" height="15" fill="rgb(227,7,12)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="293" width="0.0100%" height="15" fill="rgb(245,203,43)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="277" width="0.0100%" height="15" fill="rgb(238,205,33)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="261" width="0.0100%" height="15" fill="rgb(231,56,7)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="245" width="0.0100%" height="15" fill="rgb(244,186,29)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="229" width="0.0100%" height="15" fill="rgb(234,111,31)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,img::png::deflate::bitstream::WriteBitStream)&gt; (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="213" width="0.0100%" height="15" fill="rgb(241,149,10)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;img::png::deflate::bitstream::WriteBitStream&gt; (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="197" width="0.0100%" height="15" fill="rgb(249,206,44)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="181" width="0.0100%" height="15" fill="rgb(251,153,30)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="165" width="0.0100%" height="15" fill="rgb(239,152,38)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="149" width="0.0100%" height="15" fill="rgb(249,139,47)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="133" width="0.0100%" height="15" fill="rgb(244,64,35)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="117" width="0.0100%" height="15" fill="rgb(216,46,15)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (3,590,666 samples, 0.01%)</title><rect x="2.1347%" y="101" width="0.0100%" height="15" fill="rgb(250,74,19)" fg:x="765934332" fg:w="3590666"/><text x="2.3847%" y="111.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::flush_buffer (3,686,987 samples, 0.01%)</title><rect x="2.1553%" y="325" width="0.0103%" height="15" fill="rgb(249,42,33)" fg:x="773303129" fg:w="3686987"/><text x="2.4053%" y="335.50"></text></g><g><title>img::png::deflate::encode_block_type_two (11,150,355 samples, 0.03%)</title><rect x="2.1447%" y="357" width="0.0311%" height="15" fill="rgb(242,149,17)" fg:x="769524998" fg:w="11150355"/><text x="2.3947%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (11,150,355 samples, 0.03%)</title><rect x="2.1447%" y="341" width="0.0311%" height="15" fill="rgb(244,29,21)" fg:x="769524998" fg:w="11150355"/><text x="2.3947%" y="351.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (3,685,237 samples, 0.01%)</title><rect x="2.1656%" y="325" width="0.0103%" height="15" fill="rgb(220,130,37)" fg:x="776990116" fg:w="3685237"/><text x="2.4156%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (3,685,237 samples, 0.01%)</title><rect x="2.1656%" y="309" width="0.0103%" height="15" fill="rgb(211,67,2)" fg:x="776990116" fg:w="3685237"/><text x="2.4156%" y="319.50"></text></g><g><title>core::intrinsics::likely (3,737,549 samples, 0.01%)</title><rect x="2.1964%" y="229" width="0.0104%" height="15" fill="rgb(235,68,52)" fg:x="788061319" fg:w="3737549"/><text x="2.4464%" y="239.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (18,604,210 samples, 0.05%)</title><rect x="2.1758%" y="341" width="0.0519%" height="15" fill="rgb(246,142,3)" fg:x="780675353" fg:w="18604210"/><text x="2.4258%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (11,218,244 samples, 0.03%)</title><rect x="2.1964%" y="325" width="0.0313%" height="15" fill="rgb(241,25,7)" fg:x="788061319" fg:w="11218244"/><text x="2.4464%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (11,218,244 samples, 0.03%)</title><rect x="2.1964%" y="309" width="0.0313%" height="15" fill="rgb(242,119,39)" fg:x="788061319" fg:w="11218244"/><text x="2.4464%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (11,218,244 samples, 0.03%)</title><rect x="2.1964%" y="293" width="0.0313%" height="15" fill="rgb(241,98,45)" fg:x="788061319" fg:w="11218244"/><text x="2.4464%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (11,218,244 samples, 0.03%)</title><rect x="2.1964%" y="277" width="0.0313%" height="15" fill="rgb(254,28,30)" fg:x="788061319" fg:w="11218244"/><text x="2.4464%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11,218,244 samples, 0.03%)</title><rect x="2.1964%" y="261" width="0.0313%" height="15" fill="rgb(241,142,54)" fg:x="788061319" fg:w="11218244"/><text x="2.4464%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11,218,244 samples, 0.03%)</title><rect x="2.1964%" y="245" width="0.0313%" height="15" fill="rgb(222,85,15)" fg:x="788061319" fg:w="11218244"/><text x="2.4464%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (7,480,695 samples, 0.02%)</title><rect x="2.2068%" y="229" width="0.0208%" height="15" fill="rgb(210,85,47)" fg:x="791798868" fg:w="7480695"/><text x="2.4568%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (3,682,374 samples, 0.01%)</title><rect x="2.2380%" y="293" width="0.0103%" height="15" fill="rgb(224,206,25)" fg:x="802969834" fg:w="3682374"/><text x="2.4880%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (3,682,374 samples, 0.01%)</title><rect x="2.2380%" y="277" width="0.0103%" height="15" fill="rgb(243,201,19)" fg:x="802969834" fg:w="3682374"/><text x="2.4880%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,682,374 samples, 0.01%)</title><rect x="2.2380%" y="261" width="0.0103%" height="15" fill="rgb(236,59,4)" fg:x="802969834" fg:w="3682374"/><text x="2.4880%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,682,374 samples, 0.01%)</title><rect x="2.2380%" y="245" width="0.0103%" height="15" fill="rgb(254,179,45)" fg:x="802969834" fg:w="3682374"/><text x="2.4880%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,682,374 samples, 0.01%)</title><rect x="2.2380%" y="229" width="0.0103%" height="15" fill="rgb(226,14,10)" fg:x="802969834" fg:w="3682374"/><text x="2.4880%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (3,682,374 samples, 0.01%)</title><rect x="2.2380%" y="213" width="0.0103%" height="15" fill="rgb(244,27,41)" fg:x="802969834" fg:w="3682374"/><text x="2.4880%" y="223.50"></text></g><g><title>cfree (3,682,374 samples, 0.01%)</title><rect x="2.2380%" y="197" width="0.0103%" height="15" fill="rgb(235,35,32)" fg:x="802969834" fg:w="3682374"/><text x="2.4880%" y="207.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (14,816,930 samples, 0.04%)</title><rect x="2.2380%" y="325" width="0.0413%" height="15" fill="rgb(218,68,31)" fg:x="802969834" fg:w="14816930"/><text x="2.4880%" y="335.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (14,816,930 samples, 0.04%)</title><rect x="2.2380%" y="309" width="0.0413%" height="15" fill="rgb(207,120,37)" fg:x="802969834" fg:w="14816930"/><text x="2.4880%" y="319.50"></text></g><g><title>core::ptr::read (11,134,556 samples, 0.03%)</title><rect x="2.2482%" y="293" width="0.0310%" height="15" fill="rgb(227,98,0)" fg:x="806652208" fg:w="11134556"/><text x="2.4982%" y="303.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (40,794,397 samples, 0.11%)</title><rect x="2.1758%" y="357" width="0.1137%" height="15" fill="rgb(207,7,3)" fg:x="780675353" fg:w="40794397"/><text x="2.4258%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (22,190,187 samples, 0.06%)</title><rect x="2.2277%" y="341" width="0.0618%" height="15" fill="rgb(206,98,19)" fg:x="799279563" fg:w="22190187"/><text x="2.4777%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="325" width="0.0103%" height="15" fill="rgb(217,5,26)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="309" width="0.0103%" height="15" fill="rgb(235,190,38)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="293" width="0.0103%" height="15" fill="rgb(247,86,24)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="277" width="0.0103%" height="15" fill="rgb(205,101,16)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="261" width="0.0103%" height="15" fill="rgb(246,168,33)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="245" width="0.0103%" height="15" fill="rgb(231,114,1)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="229" width="0.0103%" height="15" fill="rgb(207,184,53)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="213" width="0.0103%" height="15" fill="rgb(224,95,51)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="197" width="0.0103%" height="15" fill="rgb(212,188,45)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="181" width="0.0103%" height="15" fill="rgb(223,154,38)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="191.50"></text></g><g><title>cfree (3,682,986 samples, 0.01%)</title><rect x="2.2793%" y="165" width="0.0103%" height="15" fill="rgb(251,22,52)" fg:x="817786764" fg:w="3682986"/><text x="2.5293%" y="175.50"></text></g><g><title>img::png::deflate::huffman::construct_canonical_tree_from_lengths (3,772,612 samples, 0.01%)</title><rect x="2.2895%" y="357" width="0.0105%" height="15" fill="rgb(229,209,22)" fg:x="821469750" fg:w="3772612"/><text x="2.5395%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::from_u32_ltr_with_offset (3,772,612 samples, 0.01%)</title><rect x="2.2895%" y="341" width="0.0105%" height="15" fill="rgb(234,138,34)" fg:x="821469750" fg:w="3772612"/><text x="2.5395%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3,777,287 samples, 0.01%)</title><rect x="2.3000%" y="341" width="0.0105%" height="15" fill="rgb(212,95,11)" fg:x="825242362" fg:w="3777287"/><text x="2.5500%" y="351.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (3,777,287 samples, 0.01%)</title><rect x="2.3000%" y="325" width="0.0105%" height="15" fill="rgb(240,179,47)" fg:x="825242362" fg:w="3777287"/><text x="2.5500%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (3,777,287 samples, 0.01%)</title><rect x="2.3000%" y="309" width="0.0105%" height="15" fill="rgb(240,163,11)" fg:x="825242362" fg:w="3777287"/><text x="2.5500%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (3,777,287 samples, 0.01%)</title><rect x="2.3000%" y="293" width="0.0105%" height="15" fill="rgb(236,37,12)" fg:x="825242362" fg:w="3777287"/><text x="2.5500%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,777,287 samples, 0.01%)</title><rect x="2.3000%" y="277" width="0.0105%" height="15" fill="rgb(232,164,16)" fg:x="825242362" fg:w="3777287"/><text x="2.5500%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,777,287 samples, 0.01%)</title><rect x="2.3000%" y="261" width="0.0105%" height="15" fill="rgb(244,205,15)" fg:x="825242362" fg:w="3777287"/><text x="2.5500%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,777,287 samples, 0.01%)</title><rect x="2.3000%" y="245" width="0.0105%" height="15" fill="rgb(223,117,47)" fg:x="825242362" fg:w="3777287"/><text x="2.5500%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (3,777,287 samples, 0.01%)</title><rect x="2.3000%" y="229" width="0.0105%" height="15" fill="rgb(244,107,35)" fg:x="825242362" fg:w="3777287"/><text x="2.5500%" y="239.50"></text></g><g><title>cfree (3,777,287 samples, 0.01%)</title><rect x="2.3000%" y="213" width="0.0105%" height="15" fill="rgb(205,140,8)" fg:x="825242362" fg:w="3777287"/><text x="2.5500%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,685,627 samples, 0.01%)</title><rect x="2.3106%" y="341" width="0.0103%" height="15" fill="rgb(228,84,46)" fg:x="829019649" fg:w="3685627"/><text x="2.5606%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,685,627 samples, 0.01%)</title><rect x="2.3106%" y="325" width="0.0103%" height="15" fill="rgb(254,188,9)" fg:x="829019649" fg:w="3685627"/><text x="2.5606%" y="335.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (3,685,627 samples, 0.01%)</title><rect x="2.3106%" y="309" width="0.0103%" height="15" fill="rgb(206,112,54)" fg:x="829019649" fg:w="3685627"/><text x="2.5606%" y="319.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (11,238,636 samples, 0.03%)</title><rect x="2.3000%" y="357" width="0.0313%" height="15" fill="rgb(216,84,49)" fg:x="825242362" fg:w="11238636"/><text x="2.5500%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt;&gt; (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="341" width="0.0105%" height="15" fill="rgb(214,194,35)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="325" width="0.0105%" height="15" fill="rgb(249,28,3)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u32&gt;,u32)]&gt; (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="309" width="0.0105%" height="15" fill="rgb(222,56,52)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u32&gt;,u32)&gt; (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="293" width="0.0105%" height="15" fill="rgb(245,217,50)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="277" width="0.0105%" height="15" fill="rgb(213,201,24)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="261" width="0.0105%" height="15" fill="rgb(248,116,28)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="245" width="0.0105%" height="15" fill="rgb(219,72,43)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="229" width="0.0105%" height="15" fill="rgb(209,138,14)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="213" width="0.0105%" height="15" fill="rgb(222,18,33)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="197" width="0.0105%" height="15" fill="rgb(213,199,7)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="207.50"></text></g><g><title>cfree (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="181" width="0.0105%" height="15" fill="rgb(250,110,10)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="191.50"></text></g><g><title>[libc.so.6] (3,775,722 samples, 0.01%)</title><rect x="2.3208%" y="165" width="0.0105%" height="15" fill="rgb(248,123,6)" fg:x="832705276" fg:w="3775722"/><text x="2.5708%" y="175.50"></text></g><g><title>img::png::deflate::lzss::construct_distance_encoding_costs (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="341" width="0.0103%" height="15" fill="rgb(206,91,31)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="325" width="0.0103%" height="15" fill="rgb(211,154,13)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="309" width="0.0103%" height="15" fill="rgb(225,148,7)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="293" width="0.0103%" height="15" fill="rgb(220,160,43)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="277" width="0.0103%" height="15" fill="rgb(213,52,39)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="261" width="0.0103%" height="15" fill="rgb(243,137,7)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="245" width="0.0103%" height="15" fill="rgb(230,79,13)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="229" width="0.0103%" height="15" fill="rgb(247,105,23)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="213" width="0.0103%" height="15" fill="rgb(223,179,41)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="197" width="0.0103%" height="15" fill="rgb(218,9,34)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="181" width="0.0103%" height="15" fill="rgb(222,106,8)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (3,695,351 samples, 0.01%)</title><rect x="2.3314%" y="165" width="0.0103%" height="15" fill="rgb(211,220,0)" fg:x="836480998" fg:w="3695351"/><text x="2.5814%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,104,846,037 samples, 3.08%)</title><rect x="27.2508%" y="325" width="3.0793%" height="15" fill="rgb(229,52,16)" fg:x="9777443333" fg:w="1104846037"/><text x="27.5008%" y="335.50">&lt;al..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,104,846,037 samples, 3.08%)</title><rect x="27.2508%" y="309" width="3.0793%" height="15" fill="rgb(212,155,18)" fg:x="9777443333" fg:w="1104846037"/><text x="27.5008%" y="319.50">cor..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,104,846,037 samples, 3.08%)</title><rect x="27.2508%" y="293" width="3.0793%" height="15" fill="rgb(242,21,14)" fg:x="9777443333" fg:w="1104846037"/><text x="27.5008%" y="303.50">&lt;us..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (547,984,157 samples, 1.53%)</title><rect x="30.3301%" y="309" width="1.5273%" height="15" fill="rgb(222,19,48)" fg:x="10882289370" fg:w="547984157"/><text x="30.5801%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (394,571,721 samples, 1.10%)</title><rect x="31.8574%" y="309" width="1.0997%" height="15" fill="rgb(232,45,27)" fg:x="11430273527" fg:w="394571721"/><text x="32.1074%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,471,859,062 samples, 4.10%)</title><rect x="30.3301%" y="325" width="4.1022%" height="15" fill="rgb(249,103,42)" fg:x="10882289370" fg:w="1471859062"/><text x="30.5801%" y="335.50">&lt;all..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (529,303,184 samples, 1.48%)</title><rect x="32.9571%" y="309" width="1.4752%" height="15" fill="rgb(246,81,33)" fg:x="11824845248" fg:w="529303184"/><text x="33.2071%" y="319.50"></text></g><g><title>core::ptr::read (529,303,184 samples, 1.48%)</title><rect x="32.9571%" y="293" width="1.4752%" height="15" fill="rgb(252,33,42)" fg:x="11824845248" fg:w="529303184"/><text x="33.2071%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,773,416 samples, 0.01%)</title><rect x="34.4323%" y="325" width="0.0105%" height="15" fill="rgb(209,212,41)" fg:x="12354148432" fg:w="3773416"/><text x="34.6823%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u16,u16)&gt;&gt; (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="325" width="0.0423%" height="15" fill="rgb(207,154,6)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="309" width="0.0423%" height="15" fill="rgb(223,64,47)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u16,u16),alloc::alloc::Global&gt;&gt; (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="293" width="0.0423%" height="15" fill="rgb(211,161,38)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="277" width="0.0423%" height="15" fill="rgb(219,138,40)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u16,u16)&gt;&gt; (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="261" width="0.0423%" height="15" fill="rgb(241,228,46)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="245" width="0.0423%" height="15" fill="rgb(223,209,38)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="229" width="0.0423%" height="15" fill="rgb(236,164,45)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="213" width="0.0423%" height="15" fill="rgb(231,15,5)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="197" width="0.0423%" height="15" fill="rgb(252,35,15)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="207.50"></text></g><g><title>cfree (15,182,465 samples, 0.04%)</title><rect x="34.4429%" y="181" width="0.0423%" height="15" fill="rgb(248,181,18)" fg:x="12357921848" fg:w="15182465"/><text x="34.6929%" y="191.50"></text></g><g><title>[libc.so.6] (7,622,608 samples, 0.02%)</title><rect x="34.4639%" y="165" width="0.0212%" height="15" fill="rgb(233,39,42)" fg:x="12365481705" fg:w="7622608"/><text x="34.7139%" y="175.50"></text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (2,122,673,209 samples, 5.92%)</title><rect x="34.4852%" y="325" width="5.9161%" height="15" fill="rgb(238,110,33)" fg:x="12373104313" fg:w="2122673209"/><text x="34.7352%" y="335.50">img::png..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (11,336,908 samples, 0.03%)</title><rect x="40.4013%" y="229" width="0.0316%" height="15" fill="rgb(233,195,10)" fg:x="14495777522" fg:w="11336908"/><text x="40.6513%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (11,336,908 samples, 0.03%)</title><rect x="40.4013%" y="213" width="0.0316%" height="15" fill="rgb(254,105,3)" fg:x="14495777522" fg:w="11336908"/><text x="40.6513%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (11,336,908 samples, 0.03%)</title><rect x="40.4013%" y="197" width="0.0316%" height="15" fill="rgb(221,225,9)" fg:x="14495777522" fg:w="11336908"/><text x="40.6513%" y="207.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (13,678,105,400 samples, 38.12%)</title><rect x="2.3314%" y="357" width="38.1223%" height="15" fill="rgb(224,227,45)" fg:x="836480998" fg:w="13678105400"/><text x="2.5814%" y="367.50">img::png::deflate::lzss::encode_lzss_optimized</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (13,674,410,049 samples, 38.11%)</title><rect x="2.3417%" y="341" width="38.1120%" height="15" fill="rgb(229,198,43)" fg:x="840176349" fg:w="13674410049"/><text x="2.5917%" y="351.50">img::png::deflate::lzss::encode_lzss_iteration</text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (18,808,876 samples, 0.05%)</title><rect x="40.4013%" y="325" width="0.0524%" height="15" fill="rgb(206,209,35)" fg:x="14495777522" fg:w="18808876"/><text x="40.6513%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (18,808,876 samples, 0.05%)</title><rect x="40.4013%" y="309" width="0.0524%" height="15" fill="rgb(245,195,53)" fg:x="14495777522" fg:w="18808876"/><text x="40.6513%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,808,876 samples, 0.05%)</title><rect x="40.4013%" y="293" width="0.0524%" height="15" fill="rgb(240,92,26)" fg:x="14495777522" fg:w="18808876"/><text x="40.6513%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18,808,876 samples, 0.05%)</title><rect x="40.4013%" y="277" width="0.0524%" height="15" fill="rgb(207,40,23)" fg:x="14495777522" fg:w="18808876"/><text x="40.6513%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18,808,876 samples, 0.05%)</title><rect x="40.4013%" y="261" width="0.0524%" height="15" fill="rgb(223,111,35)" fg:x="14495777522" fg:w="18808876"/><text x="40.6513%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (18,808,876 samples, 0.05%)</title><rect x="40.4013%" y="245" width="0.0524%" height="15" fill="rgb(229,147,28)" fg:x="14495777522" fg:w="18808876"/><text x="40.6513%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,471,968 samples, 0.02%)</title><rect x="40.4329%" y="229" width="0.0208%" height="15" fill="rgb(211,29,28)" fg:x="14507114430" fg:w="7471968"/><text x="40.6829%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,471,968 samples, 0.02%)</title><rect x="40.4329%" y="213" width="0.0208%" height="15" fill="rgb(228,72,33)" fg:x="14507114430" fg:w="7471968"/><text x="40.6829%" y="223.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter_mut::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,902,596,365 samples, 5.30%)</title><rect x="43.0190%" y="341" width="5.3027%" height="15" fill="rgb(205,214,31)" fg:x="15434983207" fg:w="1902596365"/><text x="43.2690%" y="351.50">&lt;alloc..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (71,402,293 samples, 0.20%)</title><rect x="48.1227%" y="325" width="0.1990%" height="15" fill="rgb(224,111,15)" fg:x="17266177279" fg:w="71402293"/><text x="48.3727%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (71,402,293 samples, 0.20%)</title><rect x="48.1227%" y="309" width="0.1990%" height="15" fill="rgb(253,21,26)" fg:x="17266177279" fg:w="71402293"/><text x="48.3727%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (288,698,522 samples, 0.80%)</title><rect x="55.2431%" y="325" width="0.8046%" height="15" fill="rgb(245,139,43)" fg:x="19820931678" fg:w="288698522"/><text x="55.4931%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (288,698,522 samples, 0.80%)</title><rect x="55.2431%" y="309" width="0.8046%" height="15" fill="rgb(252,170,7)" fg:x="19820931678" fg:w="288698522"/><text x="55.4931%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (288,698,522 samples, 0.80%)</title><rect x="55.2431%" y="293" width="0.8046%" height="15" fill="rgb(231,118,14)" fg:x="19820931678" fg:w="288698522"/><text x="55.4931%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (288,698,522 samples, 0.80%)</title><rect x="55.2431%" y="277" width="0.8046%" height="15" fill="rgb(238,83,0)" fg:x="19820931678" fg:w="288698522"/><text x="55.4931%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,975,423,918 samples, 13.87%)</title><rect x="48.3217%" y="341" width="13.8670%" height="15" fill="rgb(221,39,39)" fg:x="17337579572" fg:w="4975423918"/><text x="48.5717%" y="351.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>core::ptr::write (2,203,373,290 samples, 6.14%)</title><rect x="56.0477%" y="325" width="6.1410%" height="15" fill="rgb(222,119,46)" fg:x="20109630200" fg:w="2203373290"/><text x="56.2977%" y="335.50">core::pt..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11,280,681 samples, 0.03%)</title><rect x="62.1887%" y="341" width="0.0314%" height="15" fill="rgb(222,165,49)" fg:x="22313003490" fg:w="11280681"/><text x="62.4387%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11,280,681 samples, 0.03%)</title><rect x="62.1887%" y="325" width="0.0314%" height="15" fill="rgb(219,113,52)" fg:x="22313003490" fg:w="11280681"/><text x="62.4387%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11,280,681 samples, 0.03%)</title><rect x="62.1887%" y="309" width="0.0314%" height="15" fill="rgb(214,7,15)" fg:x="22313003490" fg:w="11280681"/><text x="62.4387%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (11,280,681 samples, 0.03%)</title><rect x="62.1887%" y="293" width="0.0314%" height="15" fill="rgb(235,32,4)" fg:x="22313003490" fg:w="11280681"/><text x="62.4387%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (11,280,681 samples, 0.03%)</title><rect x="62.1887%" y="277" width="0.0314%" height="15" fill="rgb(238,90,54)" fg:x="22313003490" fg:w="11280681"/><text x="62.4387%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11,280,681 samples, 0.03%)</title><rect x="62.1887%" y="261" width="0.0314%" height="15" fill="rgb(213,208,19)" fg:x="22313003490" fg:w="11280681"/><text x="62.4387%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11,280,681 samples, 0.03%)</title><rect x="62.1887%" y="245" width="0.0314%" height="15" fill="rgb(233,156,4)" fg:x="22313003490" fg:w="11280681"/><text x="62.4387%" y="255.50"></text></g><g><title>alloc::alloc::alloc (11,280,681 samples, 0.03%)</title><rect x="62.1887%" y="229" width="0.0314%" height="15" fill="rgb(207,194,5)" fg:x="22313003490" fg:w="11280681"/><text x="62.4387%" y="239.50"></text></g><g><title>malloc (11,280,681 samples, 0.03%)</title><rect x="62.1887%" y="213" width="0.0314%" height="15" fill="rgb(206,111,30)" fg:x="22313003490" fg:w="11280681"/><text x="62.4387%" y="223.50"></text></g><g><title>[libc.so.6] (7,468,464 samples, 0.02%)</title><rect x="62.1994%" y="197" width="0.0208%" height="15" fill="rgb(243,70,54)" fg:x="22316815707" fg:w="7468464"/><text x="62.4494%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2,229,214,640 samples, 6.21%)</title><rect x="62.2202%" y="341" width="6.2131%" height="15" fill="rgb(242,28,8)" fg:x="22324284171" fg:w="2229214640"/><text x="62.4702%" y="351.50">core::cm..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (22,457,247 samples, 0.06%)</title><rect x="68.4332%" y="245" width="0.0626%" height="15" fill="rgb(219,106,18)" fg:x="24553498811" fg:w="22457247"/><text x="68.6832%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (18,708,421 samples, 0.05%)</title><rect x="68.4437%" y="229" width="0.0521%" height="15" fill="rgb(244,222,10)" fg:x="24557247637" fg:w="18708421"/><text x="68.6937%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (18,708,421 samples, 0.05%)</title><rect x="68.4437%" y="213" width="0.0521%" height="15" fill="rgb(236,179,52)" fg:x="24557247637" fg:w="18708421"/><text x="68.6937%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (14,994,186 samples, 0.04%)</title><rect x="68.4958%" y="229" width="0.0418%" height="15" fill="rgb(213,23,39)" fg:x="24575956058" fg:w="14994186"/><text x="68.7458%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (41,234,382 samples, 0.11%)</title><rect x="68.4332%" y="341" width="0.1149%" height="15" fill="rgb(238,48,10)" fg:x="24553498811" fg:w="41234382"/><text x="68.6832%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (41,234,382 samples, 0.11%)</title><rect x="68.4332%" y="325" width="0.1149%" height="15" fill="rgb(251,196,23)" fg:x="24553498811" fg:w="41234382"/><text x="68.6832%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (41,234,382 samples, 0.11%)</title><rect x="68.4332%" y="309" width="0.1149%" height="15" fill="rgb(250,152,24)" fg:x="24553498811" fg:w="41234382"/><text x="68.6832%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41,234,382 samples, 0.11%)</title><rect x="68.4332%" y="293" width="0.1149%" height="15" fill="rgb(209,150,17)" fg:x="24553498811" fg:w="41234382"/><text x="68.6832%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41,234,382 samples, 0.11%)</title><rect x="68.4332%" y="277" width="0.1149%" height="15" fill="rgb(234,202,34)" fg:x="24553498811" fg:w="41234382"/><text x="68.6832%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (41,234,382 samples, 0.11%)</title><rect x="68.4332%" y="261" width="0.1149%" height="15" fill="rgb(253,148,53)" fg:x="24553498811" fg:w="41234382"/><text x="68.6832%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18,777,135 samples, 0.05%)</title><rect x="68.4958%" y="245" width="0.0523%" height="15" fill="rgb(218,129,16)" fg:x="24575956058" fg:w="18777135"/><text x="68.7458%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3,782,949 samples, 0.01%)</title><rect x="68.5376%" y="229" width="0.0105%" height="15" fill="rgb(216,85,19)" fg:x="24590950244" fg:w="3782949"/><text x="68.7876%" y="239.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (10,083,962,596 samples, 28.11%)</title><rect x="40.4537%" y="357" width="28.1051%" height="15" fill="rgb(235,228,7)" fg:x="14514586398" fg:w="10083962596"/><text x="40.7037%" y="367.50">img::png::deflate::lzss::hash::LzssHashTable:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3,815,801 samples, 0.01%)</title><rect x="68.5482%" y="341" width="0.0106%" height="15" fill="rgb(245,175,0)" fg:x="24594733193" fg:w="3815801"/><text x="68.7982%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3,815,801 samples, 0.01%)</title><rect x="68.5482%" y="325" width="0.0106%" height="15" fill="rgb(208,168,36)" fg:x="24594733193" fg:w="3815801"/><text x="68.7982%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3,815,801 samples, 0.01%)</title><rect x="68.5482%" y="309" width="0.0106%" height="15" fill="rgb(246,171,24)" fg:x="24594733193" fg:w="3815801"/><text x="68.7982%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,815,801 samples, 0.01%)</title><rect x="68.5482%" y="293" width="0.0106%" height="15" fill="rgb(215,142,24)" fg:x="24594733193" fg:w="3815801"/><text x="68.7982%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,815,801 samples, 0.01%)</title><rect x="68.5482%" y="277" width="0.0106%" height="15" fill="rgb(250,187,7)" fg:x="24594733193" fg:w="3815801"/><text x="68.7982%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,815,801 samples, 0.01%)</title><rect x="68.5482%" y="261" width="0.0106%" height="15" fill="rgb(228,66,33)" fg:x="24594733193" fg:w="3815801"/><text x="68.7982%" y="271.50"></text></g><g><title>core::intrinsics::likely (3,815,801 samples, 0.01%)</title><rect x="68.5482%" y="245" width="0.0106%" height="15" fill="rgb(234,215,21)" fg:x="24594733193" fg:w="3815801"/><text x="68.7982%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_key (7,563,401 samples, 0.02%)</title><rect x="68.5588%" y="341" width="0.0211%" height="15" fill="rgb(222,191,20)" fg:x="24598548994" fg:w="7563401"/><text x="68.8088%" y="351.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (11,330,648 samples, 0.03%)</title><rect x="68.5588%" y="357" width="0.0316%" height="15" fill="rgb(245,79,54)" fg:x="24598548994" fg:w="11330648"/><text x="68.8088%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3,767,247 samples, 0.01%)</title><rect x="68.5799%" y="341" width="0.0105%" height="15" fill="rgb(240,10,37)" fg:x="24606112395" fg:w="3767247"/><text x="68.8299%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3,767,247 samples, 0.01%)</title><rect x="68.5799%" y="325" width="0.0105%" height="15" fill="rgb(214,192,32)" fg:x="24606112395" fg:w="3767247"/><text x="68.8299%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3,767,247 samples, 0.01%)</title><rect x="68.5799%" y="309" width="0.0105%" height="15" fill="rgb(209,36,54)" fg:x="24606112395" fg:w="3767247"/><text x="68.8299%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,767,247 samples, 0.01%)</title><rect x="68.5799%" y="293" width="0.0105%" height="15" fill="rgb(220,10,11)" fg:x="24606112395" fg:w="3767247"/><text x="68.8299%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,767,247 samples, 0.01%)</title><rect x="68.5799%" y="277" width="0.0105%" height="15" fill="rgb(221,106,17)" fg:x="24606112395" fg:w="3767247"/><text x="68.8299%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,767,247 samples, 0.01%)</title><rect x="68.5799%" y="261" width="0.0105%" height="15" fill="rgb(251,142,44)" fg:x="24606112395" fg:w="3767247"/><text x="68.8299%" y="271.50"></text></g><g><title>core::intrinsics::likely (3,767,247 samples, 0.01%)</title><rect x="68.5799%" y="245" width="0.0105%" height="15" fill="rgb(238,13,15)" fg:x="24606112395" fg:w="3767247"/><text x="68.8299%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::iter (3,772,856 samples, 0.01%)</title><rect x="68.5904%" y="341" width="0.0105%" height="15" fill="rgb(208,107,27)" fg:x="24609879642" fg:w="3772856"/><text x="68.8404%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_slices (3,772,856 samples, 0.01%)</title><rect x="68.5904%" y="325" width="0.0105%" height="15" fill="rgb(205,136,37)" fg:x="24609879642" fg:w="3772856"/><text x="68.8404%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (3,772,856 samples, 0.01%)</title><rect x="68.5904%" y="309" width="0.0105%" height="15" fill="rgb(250,205,27)" fg:x="24609879642" fg:w="3772856"/><text x="68.8404%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (3,772,856 samples, 0.01%)</title><rect x="68.5904%" y="293" width="0.0105%" height="15" fill="rgb(210,80,43)" fg:x="24609879642" fg:w="3772856"/><text x="68.8404%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (3,772,856 samples, 0.01%)</title><rect x="68.5904%" y="277" width="0.0105%" height="15" fill="rgb(247,160,36)" fg:x="24609879642" fg:w="3772856"/><text x="68.8404%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (3,772,856 samples, 0.01%)</title><rect x="68.5904%" y="261" width="0.0105%" height="15" fill="rgb(234,13,49)" fg:x="24609879642" fg:w="3772856"/><text x="68.8404%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,757,008 samples, 0.01%)</title><rect x="68.6009%" y="293" width="0.0105%" height="15" fill="rgb(234,122,0)" fg:x="24613652498" fg:w="3757008"/><text x="68.8509%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,757,008 samples, 0.01%)</title><rect x="68.6009%" y="277" width="0.0105%" height="15" fill="rgb(207,146,38)" fg:x="24613652498" fg:w="3757008"/><text x="68.8509%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,757,008 samples, 0.01%)</title><rect x="68.6009%" y="261" width="0.0105%" height="15" fill="rgb(207,177,25)" fg:x="24613652498" fg:w="3757008"/><text x="68.8509%" y="271.50"></text></g><g><title>core::iter::adapters::filter::filter_fold (3,757,008 samples, 0.01%)</title><rect x="68.6009%" y="245" width="0.0105%" height="15" fill="rgb(211,178,42)" fg:x="24613652498" fg:w="3757008"/><text x="68.8509%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,649,482 samples, 0.01%)</title><rect x="68.6114%" y="261" width="0.0102%" height="15" fill="rgb(230,69,54)" fg:x="24617409506" fg:w="3649482"/><text x="68.8614%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3,649,482 samples, 0.01%)</title><rect x="68.6114%" y="245" width="0.0102%" height="15" fill="rgb(214,135,41)" fg:x="24617409506" fg:w="3649482"/><text x="68.8614%" y="255.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,649,482 samples, 0.01%)</title><rect x="68.6114%" y="229" width="0.0102%" height="15" fill="rgb(237,67,25)" fg:x="24617409506" fg:w="3649482"/><text x="68.8614%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,649,482 samples, 0.01%)</title><rect x="68.6114%" y="213" width="0.0102%" height="15" fill="rgb(222,189,50)" fg:x="24617409506" fg:w="3649482"/><text x="68.8614%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,649,482 samples, 0.01%)</title><rect x="68.6114%" y="197" width="0.0102%" height="15" fill="rgb(245,148,34)" fg:x="24617409506" fg:w="3649482"/><text x="68.8614%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (3,649,482 samples, 0.01%)</title><rect x="68.6114%" y="181" width="0.0102%" height="15" fill="rgb(222,29,6)" fg:x="24617409506" fg:w="3649482"/><text x="68.8614%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,649,482 samples, 0.01%)</title><rect x="68.6114%" y="165" width="0.0102%" height="15" fill="rgb(221,189,43)" fg:x="24617409506" fg:w="3649482"/><text x="68.8614%" y="175.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (3,649,482 samples, 0.01%)</title><rect x="68.6114%" y="149" width="0.0102%" height="15" fill="rgb(207,36,27)" fg:x="24617409506" fg:w="3649482"/><text x="68.8614%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (14,914,610 samples, 0.04%)</title><rect x="68.6009%" y="341" width="0.0416%" height="15" fill="rgb(217,90,24)" fg:x="24613652498" fg:w="14914610"/><text x="68.8509%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (14,914,610 samples, 0.04%)</title><rect x="68.6009%" y="325" width="0.0416%" height="15" fill="rgb(224,66,35)" fg:x="24613652498" fg:w="14914610"/><text x="68.8509%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (14,914,610 samples, 0.04%)</title><rect x="68.6009%" y="309" width="0.0416%" height="15" fill="rgb(221,13,50)" fg:x="24613652498" fg:w="14914610"/><text x="68.8509%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,157,602 samples, 0.03%)</title><rect x="68.6114%" y="293" width="0.0311%" height="15" fill="rgb(236,68,49)" fg:x="24617409506" fg:w="11157602"/><text x="68.8614%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,157,602 samples, 0.03%)</title><rect x="68.6114%" y="277" width="0.0311%" height="15" fill="rgb(229,146,28)" fg:x="24617409506" fg:w="11157602"/><text x="68.8614%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7,508,120 samples, 0.02%)</title><rect x="68.6215%" y="261" width="0.0209%" height="15" fill="rgb(225,31,38)" fg:x="24621058988" fg:w="7508120"/><text x="68.8715%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7,508,120 samples, 0.02%)</title><rect x="68.6215%" y="245" width="0.0209%" height="15" fill="rgb(250,208,3)" fg:x="24621058988" fg:w="7508120"/><text x="68.8715%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (7,508,120 samples, 0.02%)</title><rect x="68.6215%" y="229" width="0.0209%" height="15" fill="rgb(246,54,23)" fg:x="24621058988" fg:w="7508120"/><text x="68.8715%" y="239.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (3,743,037 samples, 0.01%)</title><rect x="68.6320%" y="213" width="0.0104%" height="15" fill="rgb(243,76,11)" fg:x="24624824071" fg:w="3743037"/><text x="68.8820%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (22,365,287 samples, 0.06%)</title><rect x="68.5904%" y="357" width="0.0623%" height="15" fill="rgb(245,21,50)" fg:x="24609879642" fg:w="22365287"/><text x="68.8404%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,677,821 samples, 0.01%)</title><rect x="68.6425%" y="341" width="0.0103%" height="15" fill="rgb(228,9,43)" fg:x="24628567108" fg:w="3677821"/><text x="68.8925%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,677,821 samples, 0.01%)</title><rect x="68.6425%" y="325" width="0.0103%" height="15" fill="rgb(208,100,47)" fg:x="24628567108" fg:w="3677821"/><text x="68.8925%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,677,821 samples, 0.01%)</title><rect x="68.6425%" y="309" width="0.0103%" height="15" fill="rgb(232,26,8)" fg:x="24628567108" fg:w="3677821"/><text x="68.8925%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3,677,821 samples, 0.01%)</title><rect x="68.6425%" y="293" width="0.0103%" height="15" fill="rgb(216,166,38)" fg:x="24628567108" fg:w="3677821"/><text x="68.8925%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,677,821 samples, 0.01%)</title><rect x="68.6425%" y="277" width="0.0103%" height="15" fill="rgb(251,202,51)" fg:x="24628567108" fg:w="3677821"/><text x="68.8925%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,677,821 samples, 0.01%)</title><rect x="68.6425%" y="261" width="0.0103%" height="15" fill="rgb(254,216,34)" fg:x="24628567108" fg:w="3677821"/><text x="68.8925%" y="271.50"></text></g><g><title>core::intrinsics::likely (3,677,821 samples, 0.01%)</title><rect x="68.6425%" y="245" width="0.0103%" height="15" fill="rgb(251,32,27)" fg:x="24628567108" fg:w="3677821"/><text x="68.8925%" y="255.50"></text></g><g><title>[unknown] (24,221,398,932 samples, 67.51%)</title><rect x="1.1556%" y="373" width="67.5076%" height="15" fill="rgb(208,127,28)" fg:x="414615376" fg:w="24221398932"/><text x="1.4056%" y="383.50">[unknown]</text></g><g><title>img::png::encode_png (3,769,379 samples, 0.01%)</title><rect x="68.6527%" y="357" width="0.0105%" height="15" fill="rgb(224,137,22)" fg:x="24632244929" fg:w="3769379"/><text x="68.9027%" y="367.50"></text></g><g><title>img::png::deflate::compress_scanlines (3,769,379 samples, 0.01%)</title><rect x="68.6527%" y="341" width="0.0105%" height="15" fill="rgb(254,70,32)" fg:x="24632244929" fg:w="3769379"/><text x="68.9027%" y="351.50"></text></g><g><title>img::png::deflate::zlib::ZlibEncoder::write_bytes (3,769,379 samples, 0.01%)</title><rect x="68.6527%" y="325" width="0.0105%" height="15" fill="rgb(229,75,37)" fg:x="24632244929" fg:w="3769379"/><text x="68.9027%" y="335.50"></text></g><g><title>img::png::adler32::Adler32Calculator::update_adler32 (3,769,379 samples, 0.01%)</title><rect x="68.6527%" y="309" width="0.0105%" height="15" fill="rgb(252,64,23)" fg:x="24632244929" fg:w="3769379"/><text x="68.9027%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (3,681,495 samples, 0.01%)</title><rect x="68.6632%" y="373" width="0.0103%" height="15" fill="rgb(232,162,48)" fg:x="24636014308" fg:w="3681495"/><text x="68.9132%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,681,495 samples, 0.01%)</title><rect x="68.6632%" y="357" width="0.0103%" height="15" fill="rgb(246,160,12)" fg:x="24636014308" fg:w="3681495"/><text x="68.9132%" y="367.50"></text></g><g><title>__rustc::__rdl_dealloc (3,766,659 samples, 0.01%)</title><rect x="68.6735%" y="373" width="0.0105%" height="15" fill="rgb(247,166,0)" fg:x="24639695803" fg:w="3766659"/><text x="68.9235%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,766,659 samples, 0.01%)</title><rect x="68.6735%" y="357" width="0.0105%" height="15" fill="rgb(249,219,21)" fg:x="24639695803" fg:w="3766659"/><text x="68.9235%" y="367.50"></text></g><g><title>__rustc::__rust_alloc (3,768,410 samples, 0.01%)</title><rect x="68.6840%" y="373" width="0.0105%" height="15" fill="rgb(205,209,3)" fg:x="24643462462" fg:w="3768410"/><text x="68.9340%" y="383.50"></text></g><g><title>__rustc::__rust_dealloc (7,542,387 samples, 0.02%)</title><rect x="68.6945%" y="373" width="0.0210%" height="15" fill="rgb(243,44,1)" fg:x="24647230872" fg:w="7542387"/><text x="68.9445%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,768,746 samples, 0.01%)</title><rect x="68.7155%" y="373" width="0.0105%" height="15" fill="rgb(206,159,16)" fg:x="24654773259" fg:w="3768746"/><text x="68.9655%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,768,746 samples, 0.01%)</title><rect x="68.7155%" y="357" width="0.0105%" height="15" fill="rgb(244,77,30)" fg:x="24654773259" fg:w="3768746"/><text x="68.9655%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,768,746 samples, 0.01%)</title><rect x="68.7155%" y="341" width="0.0105%" height="15" fill="rgb(218,69,12)" fg:x="24654773259" fg:w="3768746"/><text x="68.9655%" y="351.50"></text></g><g><title>core::cmp::max (3,768,746 samples, 0.01%)</title><rect x="68.7155%" y="325" width="0.0105%" height="15" fill="rgb(212,87,7)" fg:x="24654773259" fg:w="3768746"/><text x="68.9655%" y="335.50"></text></g><g><title>core::cmp::Ord::max (3,768,746 samples, 0.01%)</title><rect x="68.7155%" y="309" width="0.0105%" height="15" fill="rgb(245,114,25)" fg:x="24654773259" fg:w="3768746"/><text x="68.9655%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,777,379 samples, 0.01%)</title><rect x="68.7260%" y="373" width="0.0105%" height="15" fill="rgb(210,61,42)" fg:x="24658542005" fg:w="3777379"/><text x="68.9760%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,777,379 samples, 0.01%)</title><rect x="68.7260%" y="357" width="0.0105%" height="15" fill="rgb(211,52,33)" fg:x="24658542005" fg:w="3777379"/><text x="68.9760%" y="367.50"></text></g><g><title>[libc.so.6] (3,777,379 samples, 0.01%)</title><rect x="68.7260%" y="341" width="0.0105%" height="15" fill="rgb(234,58,33)" fg:x="24658542005" fg:w="3777379"/><text x="68.9760%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,777,379 samples, 0.01%)</title><rect x="68.7260%" y="325" width="0.0105%" height="15" fill="rgb(220,115,36)" fg:x="24658542005" fg:w="3777379"/><text x="68.9760%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,777,379 samples, 0.01%)</title><rect x="68.7260%" y="309" width="0.0105%" height="15" fill="rgb(243,153,54)" fg:x="24658542005" fg:w="3777379"/><text x="68.9760%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,777,379 samples, 0.01%)</title><rect x="68.7260%" y="293" width="0.0105%" height="15" fill="rgb(251,47,18)" fg:x="24658542005" fg:w="3777379"/><text x="68.9760%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (3,777,379 samples, 0.01%)</title><rect x="68.7260%" y="277" width="0.0105%" height="15" fill="rgb(242,102,42)" fg:x="24658542005" fg:w="3777379"/><text x="68.9760%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (80,319,468 samples, 0.22%)</title><rect x="68.7365%" y="373" width="0.2239%" height="15" fill="rgb(234,31,38)" fg:x="24662319384" fg:w="80319468"/><text x="68.9865%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (80,319,468 samples, 0.22%)</title><rect x="68.7365%" y="357" width="0.2239%" height="15" fill="rgb(221,117,51)" fg:x="24662319384" fg:w="80319468"/><text x="68.9865%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (80,319,468 samples, 0.22%)</title><rect x="68.7365%" y="341" width="0.2239%" height="15" fill="rgb(212,20,18)" fg:x="24662319384" fg:w="80319468"/><text x="68.9865%" y="351.50"></text></g><g><title>alloc::alloc::realloc (80,319,468 samples, 0.22%)</title><rect x="68.7365%" y="325" width="0.2239%" height="15" fill="rgb(245,133,36)" fg:x="24662319384" fg:w="80319468"/><text x="68.9865%" y="335.50"></text></g><g><title>realloc (77,970,214 samples, 0.22%)</title><rect x="68.7431%" y="309" width="0.2173%" height="15" fill="rgb(212,6,19)" fg:x="24664668638" fg:w="77970214"/><text x="68.9931%" y="319.50"></text></g><g><title>[libc.so.6] (74,282,283 samples, 0.21%)</title><rect x="68.7534%" y="293" width="0.2070%" height="15" fill="rgb(218,1,36)" fg:x="24668356569" fg:w="74282283"/><text x="69.0034%" y="303.50"></text></g><g><title>[libc.so.6] (70,510,000 samples, 0.20%)</title><rect x="68.7639%" y="277" width="0.1965%" height="15" fill="rgb(246,84,54)" fg:x="24672128852" fg:w="70510000"/><text x="69.0139%" y="287.50"></text></g><g><title>[libc.so.6] (51,898,988 samples, 0.14%)</title><rect x="68.8157%" y="261" width="0.1446%" height="15" fill="rgb(242,110,6)" fg:x="24690739864" fg:w="51898988"/><text x="69.0657%" y="271.50"></text></g><g><title>[libc.so.6] (3,776,016 samples, 0.01%)</title><rect x="68.9499%" y="245" width="0.0105%" height="15" fill="rgb(214,47,5)" fg:x="24738862836" fg:w="3776016"/><text x="69.1999%" y="255.50"></text></g><g><title>cfree (7,530,236 samples, 0.02%)</title><rect x="68.9629%" y="373" width="0.0210%" height="15" fill="rgb(218,159,25)" fg:x="24743527816" fg:w="7530236"/><text x="69.2129%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,768,163 samples, 0.01%)</title><rect x="68.9943%" y="309" width="0.0105%" height="15" fill="rgb(215,211,28)" fg:x="24754792860" fg:w="3768163"/><text x="69.2443%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18,704,777 samples, 0.05%)</title><rect x="69.0258%" y="293" width="0.0521%" height="15" fill="rgb(238,59,32)" fg:x="24766094378" fg:w="18704777"/><text x="69.2758%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (37,428,981 samples, 0.10%)</title><rect x="68.9839%" y="357" width="0.1043%" height="15" fill="rgb(226,82,3)" fg:x="24751058052" fg:w="37428981"/><text x="69.2339%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (37,428,981 samples, 0.10%)</title><rect x="68.9839%" y="341" width="0.1043%" height="15" fill="rgb(240,164,32)" fg:x="24751058052" fg:w="37428981"/><text x="69.2339%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (37,428,981 samples, 0.10%)</title><rect x="68.9839%" y="325" width="0.1043%" height="15" fill="rgb(232,46,7)" fg:x="24751058052" fg:w="37428981"/><text x="69.2339%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (29,926,010 samples, 0.08%)</title><rect x="69.0048%" y="309" width="0.0834%" height="15" fill="rgb(229,129,53)" fg:x="24758561023" fg:w="29926010"/><text x="69.2548%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,687,878 samples, 0.01%)</title><rect x="69.0779%" y="293" width="0.0103%" height="15" fill="rgb(234,188,29)" fg:x="24784799155" fg:w="3687878"/><text x="69.3279%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (52,523,695 samples, 0.15%)</title><rect x="68.9839%" y="373" width="0.1464%" height="15" fill="rgb(246,141,4)" fg:x="24751058052" fg:w="52523695"/><text x="69.2339%" y="383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (15,094,714 samples, 0.04%)</title><rect x="69.0882%" y="357" width="0.0421%" height="15" fill="rgb(229,23,39)" fg:x="24788487033" fg:w="15094714"/><text x="69.3382%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (11,330,586 samples, 0.03%)</title><rect x="69.0987%" y="341" width="0.0316%" height="15" fill="rgb(206,12,3)" fg:x="24792251161" fg:w="11330586"/><text x="69.3487%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (11,330,586 samples, 0.03%)</title><rect x="69.0987%" y="325" width="0.0316%" height="15" fill="rgb(252,226,20)" fg:x="24792251161" fg:w="11330586"/><text x="69.3487%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11,330,586 samples, 0.03%)</title><rect x="69.0987%" y="309" width="0.0316%" height="15" fill="rgb(216,123,35)" fg:x="24792251161" fg:w="11330586"/><text x="69.3487%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (3,777,658 samples, 0.01%)</title><rect x="69.1302%" y="373" width="0.0105%" height="15" fill="rgb(212,68,40)" fg:x="24803581747" fg:w="3777658"/><text x="69.3802%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,777,658 samples, 0.01%)</title><rect x="69.1302%" y="357" width="0.0105%" height="15" fill="rgb(254,125,32)" fg:x="24803581747" fg:w="3777658"/><text x="69.3802%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3,681,740 samples, 0.01%)</title><rect x="69.1408%" y="373" width="0.0103%" height="15" fill="rgb(253,97,22)" fg:x="24807359405" fg:w="3681740"/><text x="69.3908%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (3,681,740 samples, 0.01%)</title><rect x="69.1408%" y="357" width="0.0103%" height="15" fill="rgb(241,101,14)" fg:x="24807359405" fg:w="3681740"/><text x="69.3908%" y="367.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,681,740 samples, 0.01%)</title><rect x="69.1408%" y="341" width="0.0103%" height="15" fill="rgb(238,103,29)" fg:x="24807359405" fg:w="3681740"/><text x="69.3908%" y="351.50"></text></g><g><title>core::slice::sort::stable::driftsort_main (3,770,449 samples, 0.01%)</title><rect x="69.1510%" y="373" width="0.0105%" height="15" fill="rgb(233,195,47)" fg:x="24811041145" fg:w="3770449"/><text x="69.4010%" y="383.50"></text></g><g><title>core::slice::sort::stable::drift::sort (3,770,449 samples, 0.01%)</title><rect x="69.1510%" y="357" width="0.0105%" height="15" fill="rgb(246,218,30)" fg:x="24811041145" fg:w="3770449"/><text x="69.4010%" y="367.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (3,770,449 samples, 0.01%)</title><rect x="69.1510%" y="341" width="0.0105%" height="15" fill="rgb(219,145,47)" fg:x="24811041145" fg:w="3770449"/><text x="69.4010%" y="351.50"></text></g><g><title>core::slice::sort::stable::merge::merge (3,770,449 samples, 0.01%)</title><rect x="69.1510%" y="325" width="0.0105%" height="15" fill="rgb(243,12,26)" fg:x="24811041145" fg:w="3770449"/><text x="69.4010%" y="335.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_down (3,770,449 samples, 0.01%)</title><rect x="69.1510%" y="309" width="0.0105%" height="15" fill="rgb(214,87,16)" fg:x="24811041145" fg:w="3770449"/><text x="69.4010%" y="319.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (3,779,728 samples, 0.01%)</title><rect x="69.1615%" y="341" width="0.0105%" height="15" fill="rgb(208,99,42)" fg:x="24814811594" fg:w="3779728"/><text x="69.4115%" y="351.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (3,779,728 samples, 0.01%)</title><rect x="69.1615%" y="325" width="0.0105%" height="15" fill="rgb(253,99,2)" fg:x="24814811594" fg:w="3779728"/><text x="69.4115%" y="335.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (7,554,986 samples, 0.02%)</title><rect x="69.1615%" y="373" width="0.0211%" height="15" fill="rgb(220,168,23)" fg:x="24814811594" fg:w="7554986"/><text x="69.4115%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (7,554,986 samples, 0.02%)</title><rect x="69.1615%" y="357" width="0.0211%" height="15" fill="rgb(242,38,24)" fg:x="24814811594" fg:w="7554986"/><text x="69.4115%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (3,775,258 samples, 0.01%)</title><rect x="69.1721%" y="341" width="0.0105%" height="15" fill="rgb(225,182,9)" fg:x="24818591322" fg:w="3775258"/><text x="69.4221%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3,777,336 samples, 0.01%)</title><rect x="69.1826%" y="325" width="0.0105%" height="15" fill="rgb(243,178,37)" fg:x="24822366580" fg:w="3777336"/><text x="69.4326%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (7,555,900 samples, 0.02%)</title><rect x="69.1826%" y="357" width="0.0211%" height="15" fill="rgb(232,139,19)" fg:x="24822366580" fg:w="7555900"/><text x="69.4326%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7,555,900 samples, 0.02%)</title><rect x="69.1826%" y="341" width="0.0211%" height="15" fill="rgb(225,201,24)" fg:x="24822366580" fg:w="7555900"/><text x="69.4326%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3,778,564 samples, 0.01%)</title><rect x="69.1931%" y="325" width="0.0105%" height="15" fill="rgb(221,47,46)" fg:x="24826143916" fg:w="3778564"/><text x="69.4431%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3,778,564 samples, 0.01%)</title><rect x="69.1931%" y="309" width="0.0105%" height="15" fill="rgb(249,23,13)" fg:x="24826143916" fg:w="3778564"/><text x="69.4431%" y="319.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty_or_deleted (3,778,564 samples, 0.01%)</title><rect x="69.1931%" y="293" width="0.0105%" height="15" fill="rgb(219,9,5)" fg:x="24826143916" fg:w="3778564"/><text x="69.4431%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,778,564 samples, 0.01%)</title><rect x="69.1931%" y="277" width="0.0105%" height="15" fill="rgb(254,171,16)" fg:x="24826143916" fg:w="3778564"/><text x="69.4431%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11,334,174 samples, 0.03%)</title><rect x="69.1826%" y="373" width="0.0316%" height="15" fill="rgb(230,171,20)" fg:x="24822366580" fg:w="11334174"/><text x="69.4326%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (3,778,274 samples, 0.01%)</title><rect x="69.2037%" y="357" width="0.0105%" height="15" fill="rgb(210,71,41)" fg:x="24829922480" fg:w="3778274"/><text x="69.4537%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3,778,274 samples, 0.01%)</title><rect x="69.2037%" y="341" width="0.0105%" height="15" fill="rgb(206,173,20)" fg:x="24829922480" fg:w="3778274"/><text x="69.4537%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (3,778,274 samples, 0.01%)</title><rect x="69.2037%" y="325" width="0.0105%" height="15" fill="rgb(233,88,34)" fg:x="24829922480" fg:w="3778274"/><text x="69.4537%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (3,778,274 samples, 0.01%)</title><rect x="69.2037%" y="309" width="0.0105%" height="15" fill="rgb(223,209,46)" fg:x="24829922480" fg:w="3778274"/><text x="69.4537%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,748,975 samples, 0.01%)</title><rect x="69.2142%" y="373" width="0.0104%" height="15" fill="rgb(250,43,18)" fg:x="24833700754" fg:w="3748975"/><text x="69.4642%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (3,748,975 samples, 0.01%)</title><rect x="69.2142%" y="357" width="0.0104%" height="15" fill="rgb(208,13,10)" fg:x="24833700754" fg:w="3748975"/><text x="69.4642%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3,748,975 samples, 0.01%)</title><rect x="69.2142%" y="341" width="0.0104%" height="15" fill="rgb(212,200,36)" fg:x="24833700754" fg:w="3748975"/><text x="69.4642%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (3,748,975 samples, 0.01%)</title><rect x="69.2142%" y="325" width="0.0104%" height="15" fill="rgb(225,90,30)" fg:x="24833700754" fg:w="3748975"/><text x="69.4642%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (3,748,975 samples, 0.01%)</title><rect x="69.2142%" y="309" width="0.0104%" height="15" fill="rgb(236,182,39)" fg:x="24833700754" fg:w="3748975"/><text x="69.4642%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3,748,975 samples, 0.01%)</title><rect x="69.2142%" y="293" width="0.0104%" height="15" fill="rgb(212,144,35)" fg:x="24833700754" fg:w="3748975"/><text x="69.4642%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3,748,975 samples, 0.01%)</title><rect x="69.2142%" y="277" width="0.0104%" height="15" fill="rgb(228,63,44)" fg:x="24833700754" fg:w="3748975"/><text x="69.4642%" y="287.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (3,748,975 samples, 0.01%)</title><rect x="69.2142%" y="261" width="0.0104%" height="15" fill="rgb(228,109,6)" fg:x="24833700754" fg:w="3748975"/><text x="69.4642%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,597,873 samples, 0.01%)</title><rect x="69.2246%" y="277" width="0.0100%" height="15" fill="rgb(238,117,24)" fg:x="24837449729" fg:w="3597873"/><text x="69.4746%" y="287.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (7,379,105 samples, 0.02%)</title><rect x="69.2246%" y="309" width="0.0206%" height="15" fill="rgb(242,26,26)" fg:x="24837449729" fg:w="7379105"/><text x="69.4746%" y="319.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (7,379,105 samples, 0.02%)</title><rect x="69.2246%" y="293" width="0.0206%" height="15" fill="rgb(221,92,48)" fg:x="24837449729" fg:w="7379105"/><text x="69.4746%" y="303.50"></text></g><g><title>core::ptr::read (3,781,232 samples, 0.01%)</title><rect x="69.2347%" y="277" width="0.0105%" height="15" fill="rgb(209,209,32)" fg:x="24841047602" fg:w="3781232"/><text x="69.4847%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (3,822,120 samples, 0.01%)</title><rect x="69.2452%" y="309" width="0.0107%" height="15" fill="rgb(221,70,22)" fg:x="24844828834" fg:w="3822120"/><text x="69.4952%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (3,822,120 samples, 0.01%)</title><rect x="69.2452%" y="293" width="0.0107%" height="15" fill="rgb(248,145,5)" fg:x="24844828834" fg:w="3822120"/><text x="69.4952%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (3,822,120 samples, 0.01%)</title><rect x="69.2452%" y="277" width="0.0107%" height="15" fill="rgb(226,116,26)" fg:x="24844828834" fg:w="3822120"/><text x="69.4952%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,822,120 samples, 0.01%)</title><rect x="69.2452%" y="261" width="0.0107%" height="15" fill="rgb(244,5,17)" fg:x="24844828834" fg:w="3822120"/><text x="69.4952%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,514,490 samples, 0.02%)</title><rect x="69.2559%" y="309" width="0.0209%" height="15" fill="rgb(252,159,33)" fg:x="24848650954" fg:w="7514490"/><text x="69.5059%" y="319.50"></text></g><g><title>core::ptr::write (3,749,343 samples, 0.01%)</title><rect x="69.2663%" y="293" width="0.0104%" height="15" fill="rgb(206,71,0)" fg:x="24852416101" fg:w="3749343"/><text x="69.5163%" y="303.50"></text></g><g><title>img::png::deflate::DeflateEncoder::finish (22,485,316 samples, 0.06%)</title><rect x="69.2246%" y="373" width="0.0627%" height="15" fill="rgb(233,118,54)" fg:x="24837449729" fg:w="22485316"/><text x="69.4746%" y="383.50"></text></g><g><title>[img] (22,485,316 samples, 0.06%)</title><rect x="69.2246%" y="357" width="0.0627%" height="15" fill="rgb(234,83,48)" fg:x="24837449729" fg:w="22485316"/><text x="69.4746%" y="367.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (22,485,316 samples, 0.06%)</title><rect x="69.2246%" y="341" width="0.0627%" height="15" fill="rgb(228,3,54)" fg:x="24837449729" fg:w="22485316"/><text x="69.4746%" y="351.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (22,485,316 samples, 0.06%)</title><rect x="69.2246%" y="325" width="0.0627%" height="15" fill="rgb(226,155,13)" fg:x="24837449729" fg:w="22485316"/><text x="69.4746%" y="335.50"></text></g><g><title>cfree (3,769,601 samples, 0.01%)</title><rect x="69.2768%" y="309" width="0.0105%" height="15" fill="rgb(241,28,37)" fg:x="24856165444" fg:w="3769601"/><text x="69.5268%" y="319.50"></text></g><g><title>[libc.so.6] (3,769,601 samples, 0.01%)</title><rect x="69.2768%" y="293" width="0.0105%" height="15" fill="rgb(233,93,10)" fg:x="24856165444" fg:w="3769601"/><text x="69.5268%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,765,454 samples, 0.01%)</title><rect x="69.2980%" y="309" width="0.0105%" height="15" fill="rgb(225,113,19)" fg:x="24863780936" fg:w="3765454"/><text x="69.5480%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (15,097,601 samples, 0.04%)</title><rect x="69.3085%" y="309" width="0.0421%" height="15" fill="rgb(241,2,18)" fg:x="24867546390" fg:w="15097601"/><text x="69.5585%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (15,097,601 samples, 0.04%)</title><rect x="69.3085%" y="293" width="0.0421%" height="15" fill="rgb(228,207,21)" fg:x="24867546390" fg:w="15097601"/><text x="69.5585%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,097,601 samples, 0.04%)</title><rect x="69.3085%" y="277" width="0.0421%" height="15" fill="rgb(213,211,35)" fg:x="24867546390" fg:w="15097601"/><text x="69.5585%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (15,097,601 samples, 0.04%)</title><rect x="69.3085%" y="261" width="0.0421%" height="15" fill="rgb(209,83,10)" fg:x="24867546390" fg:w="15097601"/><text x="69.5585%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15,097,601 samples, 0.04%)</title><rect x="69.3085%" y="245" width="0.0421%" height="15" fill="rgb(209,164,1)" fg:x="24867546390" fg:w="15097601"/><text x="69.5585%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (15,097,601 samples, 0.04%)</title><rect x="69.3085%" y="229" width="0.0421%" height="15" fill="rgb(213,184,43)" fg:x="24867546390" fg:w="15097601"/><text x="69.5585%" y="239.50"></text></g><g><title>cfree (11,313,689 samples, 0.03%)</title><rect x="69.3191%" y="213" width="0.0315%" height="15" fill="rgb(231,61,34)" fg:x="24871330302" fg:w="11313689"/><text x="69.5691%" y="223.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (22,634,474 samples, 0.06%)</title><rect x="69.2980%" y="341" width="0.0631%" height="15" fill="rgb(235,75,3)" fg:x="24863780936" fg:w="22634474"/><text x="69.5480%" y="351.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (22,634,474 samples, 0.06%)</title><rect x="69.2980%" y="325" width="0.0631%" height="15" fill="rgb(220,106,47)" fg:x="24863780936" fg:w="22634474"/><text x="69.5480%" y="335.50"></text></g><g><title>core::ptr::read (3,771,419 samples, 0.01%)</title><rect x="69.3506%" y="309" width="0.0105%" height="15" fill="rgb(210,196,33)" fg:x="24882643991" fg:w="3771419"/><text x="69.6006%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,776,619 samples, 0.01%)</title><rect x="69.3611%" y="325" width="0.0105%" height="15" fill="rgb(229,154,42)" fg:x="24886415410" fg:w="3776619"/><text x="69.6111%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,554,262 samples, 0.02%)</title><rect x="69.3611%" y="341" width="0.0211%" height="15" fill="rgb(228,114,26)" fg:x="24886415410" fg:w="7554262"/><text x="69.6111%" y="351.50"></text></g><g><title>core::ptr::write (3,777,643 samples, 0.01%)</title><rect x="69.3716%" y="325" width="0.0105%" height="15" fill="rgb(208,144,1)" fg:x="24890192029" fg:w="3777643"/><text x="69.6216%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,758,515 samples, 0.01%)</title><rect x="69.3822%" y="325" width="0.0105%" height="15" fill="rgb(239,112,37)" fg:x="24893969672" fg:w="3758515"/><text x="69.6322%" y="335.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (3,758,515 samples, 0.01%)</title><rect x="69.3822%" y="309" width="0.0105%" height="15" fill="rgb(210,96,50)" fg:x="24893969672" fg:w="3758515"/><text x="69.6322%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7,522,856 samples, 0.02%)</title><rect x="69.3822%" y="341" width="0.0210%" height="15" fill="rgb(222,178,2)" fg:x="24893969672" fg:w="7522856"/><text x="69.6322%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="325" width="0.0105%" height="15" fill="rgb(226,74,18)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="309" width="0.0105%" height="15" fill="rgb(225,67,54)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="319.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="293" width="0.0105%" height="15" fill="rgb(251,92,32)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="277" width="0.0105%" height="15" fill="rgb(228,149,22)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="261" width="0.0105%" height="15" fill="rgb(243,54,13)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="245" width="0.0105%" height="15" fill="rgb(243,180,28)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="229" width="0.0105%" height="15" fill="rgb(208,167,24)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="213" width="0.0105%" height="15" fill="rgb(245,73,45)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="197" width="0.0105%" height="15" fill="rgb(237,203,48)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="181" width="0.0105%" height="15" fill="rgb(211,197,16)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3,764,341 samples, 0.01%)</title><rect x="69.3926%" y="165" width="0.0105%" height="15" fill="rgb(243,99,51)" fg:x="24897728187" fg:w="3764341"/><text x="69.6426%" y="175.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (49,058,293 samples, 0.14%)</title><rect x="69.2873%" y="373" width="0.1367%" height="15" fill="rgb(215,123,29)" fg:x="24859935045" fg:w="49058293"/><text x="69.5373%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (45,212,402 samples, 0.13%)</title><rect x="69.2980%" y="357" width="0.1260%" height="15" fill="rgb(239,186,37)" fg:x="24863780936" fg:w="45212402"/><text x="69.5480%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="341" width="0.0209%" height="15" fill="rgb(252,136,39)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="325" width="0.0209%" height="15" fill="rgb(223,213,32)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="309" width="0.0209%" height="15" fill="rgb(233,115,5)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="293" width="0.0209%" height="15" fill="rgb(207,226,44)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="277" width="0.0209%" height="15" fill="rgb(208,126,0)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="261" width="0.0209%" height="15" fill="rgb(244,66,21)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="245" width="0.0209%" height="15" fill="rgb(222,97,12)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="229" width="0.0209%" height="15" fill="rgb(219,213,19)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="213" width="0.0209%" height="15" fill="rgb(252,169,30)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="197" width="0.0209%" height="15" fill="rgb(206,32,51)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="207.50"></text></g><g><title>cfree (7,500,810 samples, 0.02%)</title><rect x="69.4031%" y="181" width="0.0209%" height="15" fill="rgb(250,172,42)" fg:x="24901492528" fg:w="7500810"/><text x="69.6531%" y="191.50"></text></g><g><title>img::png::deflate::huffman::construct_canonical_tree_from_lengths (3,740,943 samples, 0.01%)</title><rect x="69.4240%" y="373" width="0.0104%" height="15" fill="rgb(209,34,43)" fg:x="24908993338" fg:w="3740943"/><text x="69.6740%" y="383.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::from_u32_ltr_with_offset (3,740,943 samples, 0.01%)</title><rect x="69.4240%" y="357" width="0.0104%" height="15" fill="rgb(223,11,35)" fg:x="24908993338" fg:w="3740943"/><text x="69.6740%" y="367.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="373" width="0.0104%" height="15" fill="rgb(251,219,26)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="357" width="0.0104%" height="15" fill="rgb(231,119,3)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="341" width="0.0104%" height="15" fill="rgb(216,97,11)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="325" width="0.0104%" height="15" fill="rgb(223,59,9)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter{{reify.shim}} (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="309" width="0.0104%" height="15" fill="rgb(233,93,31)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="293" width="0.0104%" height="15" fill="rgb(239,81,33)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="277" width="0.0104%" height="15" fill="rgb(213,120,34)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="261" width="0.0104%" height="15" fill="rgb(243,49,53)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="245" width="0.0104%" height="15" fill="rgb(247,216,33)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="229" width="0.0104%" height="15" fill="rgb(226,26,14)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="213" width="0.0104%" height="15" fill="rgb(215,49,53)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="197" width="0.0104%" height="15" fill="rgb(245,162,40)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="181" width="0.0104%" height="15" fill="rgb(229,68,17)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="191.50"></text></g><g><title>alloc::alloc::alloc (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="165" width="0.0104%" height="15" fill="rgb(213,182,10)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="175.50"></text></g><g><title>malloc (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="149" width="0.0104%" height="15" fill="rgb(245,125,30)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="159.50"></text></g><g><title>[libc.so.6] (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="133" width="0.0104%" height="15" fill="rgb(232,202,2)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="143.50"></text></g><g><title>[libc.so.6] (3,732,672 samples, 0.01%)</title><rect x="69.4345%" y="117" width="0.0104%" height="15" fill="rgb(237,140,51)" fg:x="24912734281" fg:w="3732672"/><text x="69.6845%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,691,551 samples, 0.01%)</title><rect x="69.4449%" y="357" width="0.0103%" height="15" fill="rgb(236,157,25)" fg:x="24916466953" fg:w="3691551"/><text x="69.6949%" y="367.50"></text></g><g><title>core::ptr::write (3,691,551 samples, 0.01%)</title><rect x="69.4449%" y="341" width="0.0103%" height="15" fill="rgb(219,209,0)" fg:x="24916466953" fg:w="3691551"/><text x="69.6949%" y="351.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_greedy (6,770,764 samples, 0.02%)</title><rect x="69.4449%" y="373" width="0.0189%" height="15" fill="rgb(240,116,54)" fg:x="24916466953" fg:w="6770764"/><text x="69.6949%" y="383.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (7,476,198 samples, 0.02%)</title><rect x="69.4637%" y="373" width="0.0208%" height="15" fill="rgb(216,10,36)" fg:x="24923237717" fg:w="7476198"/><text x="69.7137%" y="383.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (7,476,198 samples, 0.02%)</title><rect x="69.4637%" y="357" width="0.0208%" height="15" fill="rgb(222,72,44)" fg:x="24923237717" fg:w="7476198"/><text x="69.7137%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u16,u16)&gt;&gt; (3,716,229 samples, 0.01%)</title><rect x="69.4742%" y="341" width="0.0104%" height="15" fill="rgb(232,159,9)" fg:x="24926997686" fg:w="3716229"/><text x="69.7242%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,716,229 samples, 0.01%)</title><rect x="69.4742%" y="325" width="0.0104%" height="15" fill="rgb(210,39,32)" fg:x="24926997686" fg:w="3716229"/><text x="69.7242%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u16,u16),alloc::alloc::Global&gt;&gt; (3,716,229 samples, 0.01%)</title><rect x="69.4742%" y="309" width="0.0104%" height="15" fill="rgb(216,194,45)" fg:x="24926997686" fg:w="3716229"/><text x="69.7242%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,716,229 samples, 0.01%)</title><rect x="69.4742%" y="293" width="0.0104%" height="15" fill="rgb(218,18,35)" fg:x="24926997686" fg:w="3716229"/><text x="69.7242%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u16,u16)&gt;&gt; (3,716,229 samples, 0.01%)</title><rect x="69.4742%" y="277" width="0.0104%" height="15" fill="rgb(207,83,51)" fg:x="24926997686" fg:w="3716229"/><text x="69.7242%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,716,229 samples, 0.01%)</title><rect x="69.4742%" y="261" width="0.0104%" height="15" fill="rgb(225,63,43)" fg:x="24926997686" fg:w="3716229"/><text x="69.7242%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,716,229 samples, 0.01%)</title><rect x="69.4742%" y="245" width="0.0104%" height="15" fill="rgb(207,57,36)" fg:x="24926997686" fg:w="3716229"/><text x="69.7242%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,716,229 samples, 0.01%)</title><rect x="69.4742%" y="229" width="0.0104%" height="15" fill="rgb(216,99,33)" fg:x="24926997686" fg:w="3716229"/><text x="69.7242%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (3,716,229 samples, 0.01%)</title><rect x="69.4742%" y="213" width="0.0104%" height="15" fill="rgb(225,42,16)" fg:x="24926997686" fg:w="3716229"/><text x="69.7242%" y="223.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (3,700,488 samples, 0.01%)</title><rect x="69.5056%" y="357" width="0.0103%" height="15" fill="rgb(220,201,45)" fg:x="24938255451" fg:w="3700488"/><text x="69.7556%" y="367.50"></text></g><g><title>core::intrinsics::likely (11,236,204 samples, 0.03%)</title><rect x="69.5365%" y="261" width="0.0313%" height="15" fill="rgb(225,33,4)" fg:x="24949330569" fg:w="11236204"/><text x="69.7865%" y="271.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (3,763,719 samples, 0.01%)</title><rect x="69.5678%" y="261" width="0.0105%" height="15" fill="rgb(224,33,50)" fg:x="24960566773" fg:w="3763719"/><text x="69.8178%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3,763,719 samples, 0.01%)</title><rect x="69.5678%" y="245" width="0.0105%" height="15" fill="rgb(246,198,51)" fg:x="24960566773" fg:w="3763719"/><text x="69.8178%" y="255.50"></text></g><g><title>core::ptr::copy_nonoverlapping (3,763,719 samples, 0.01%)</title><rect x="69.5678%" y="229" width="0.0105%" height="15" fill="rgb(205,22,4)" fg:x="24960566773" fg:w="3763719"/><text x="69.8178%" y="239.50"></text></g><g><title>hashbrown::control::tag::Tag::full (7,463,207 samples, 0.02%)</title><rect x="69.5783%" y="261" width="0.0208%" height="15" fill="rgb(206,3,8)" fg:x="24964330492" fg:w="7463207"/><text x="69.8283%" y="271.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (44,793,916 samples, 0.12%)</title><rect x="69.4846%" y="373" width="0.1248%" height="15" fill="rgb(251,23,15)" fg:x="24930713915" fg:w="44793916"/><text x="69.7346%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (33,551,892 samples, 0.09%)</title><rect x="69.5159%" y="357" width="0.0935%" height="15" fill="rgb(252,88,28)" fg:x="24941955939" fg:w="33551892"/><text x="69.7659%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (33,551,892 samples, 0.09%)</title><rect x="69.5159%" y="341" width="0.0935%" height="15" fill="rgb(212,127,14)" fg:x="24941955939" fg:w="33551892"/><text x="69.7659%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (29,864,233 samples, 0.08%)</title><rect x="69.5262%" y="325" width="0.0832%" height="15" fill="rgb(247,145,37)" fg:x="24945643598" fg:w="29864233"/><text x="69.7762%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (29,864,233 samples, 0.08%)</title><rect x="69.5262%" y="309" width="0.0832%" height="15" fill="rgb(209,117,53)" fg:x="24945643598" fg:w="29864233"/><text x="69.7762%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (29,864,233 samples, 0.08%)</title><rect x="69.5262%" y="293" width="0.0832%" height="15" fill="rgb(212,90,42)" fg:x="24945643598" fg:w="29864233"/><text x="69.7762%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (29,864,233 samples, 0.08%)</title><rect x="69.5262%" y="277" width="0.0832%" height="15" fill="rgb(218,164,37)" fg:x="24945643598" fg:w="29864233"/><text x="69.7762%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3,714,132 samples, 0.01%)</title><rect x="69.5991%" y="261" width="0.0104%" height="15" fill="rgb(246,65,34)" fg:x="24971793699" fg:w="3714132"/><text x="69.8491%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3,714,132 samples, 0.01%)</title><rect x="69.5991%" y="245" width="0.0104%" height="15" fill="rgb(231,100,33)" fg:x="24971793699" fg:w="3714132"/><text x="69.8491%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3,714,132 samples, 0.01%)</title><rect x="69.5991%" y="229" width="0.0104%" height="15" fill="rgb(228,126,14)" fg:x="24971793699" fg:w="3714132"/><text x="69.8491%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3,714,132 samples, 0.01%)</title><rect x="69.5991%" y="213" width="0.0104%" height="15" fill="rgb(215,173,21)" fg:x="24971793699" fg:w="3714132"/><text x="69.8491%" y="223.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter_mut::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (147,141,978 samples, 0.41%)</title><rect x="87.4510%" y="357" width="0.4101%" height="15" fill="rgb(210,6,40)" fg:x="31376987159" fg:w="147141978"/><text x="87.7010%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,548,682 samples, 0.02%)</title><rect x="87.8401%" y="341" width="0.0210%" height="15" fill="rgb(212,48,18)" fg:x="31516580455" fg:w="7548682"/><text x="88.0901%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,548,682 samples, 0.02%)</title><rect x="87.8401%" y="325" width="0.0210%" height="15" fill="rgb(230,214,11)" fg:x="31516580455" fg:w="7548682"/><text x="88.0901%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (26,568,719 samples, 0.07%)</title><rect x="89.3389%" y="341" width="0.0740%" height="15" fill="rgb(254,105,39)" fg:x="32054354058" fg:w="26568719"/><text x="89.5889%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (26,568,719 samples, 0.07%)</title><rect x="89.3389%" y="325" width="0.0740%" height="15" fill="rgb(245,158,5)" fg:x="32054354058" fg:w="26568719"/><text x="89.5889%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (26,568,719 samples, 0.07%)</title><rect x="89.3389%" y="309" width="0.0740%" height="15" fill="rgb(249,208,11)" fg:x="32054354058" fg:w="26568719"/><text x="89.5889%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (26,568,719 samples, 0.07%)</title><rect x="89.3389%" y="293" width="0.0740%" height="15" fill="rgb(210,39,28)" fg:x="32054354058" fg:w="26568719"/><text x="89.5889%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (749,302,237 samples, 2.09%)</title><rect x="87.8611%" y="357" width="2.0884%" height="15" fill="rgb(211,56,53)" fg:x="31524129137" fg:w="749302237"/><text x="88.1111%" y="367.50">a..</text></g><g><title>core::ptr::write (192,508,597 samples, 0.54%)</title><rect x="89.4130%" y="341" width="0.5365%" height="15" fill="rgb(226,201,30)" fg:x="32080922777" fg:w="192508597"/><text x="89.6630%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1,084,255,860 samples, 3.02%)</title><rect x="89.9495%" y="357" width="3.0219%" height="15" fill="rgb(239,101,34)" fg:x="32273431374" fg:w="1084255860"/><text x="90.1995%" y="367.50">cor..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (338,603,871 samples, 0.94%)</title><rect x="92.9714%" y="325" width="0.9437%" height="15" fill="rgb(226,209,5)" fg:x="33357687234" fg:w="338603871"/><text x="93.2214%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (752,187,290 samples, 2.10%)</title><rect x="92.9714%" y="357" width="2.0964%" height="15" fill="rgb(250,105,47)" fg:x="33357687234" fg:w="752187290"/><text x="93.2214%" y="367.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (752,187,290 samples, 2.10%)</title><rect x="92.9714%" y="341" width="2.0964%" height="15" fill="rgb(230,72,3)" fg:x="33357687234" fg:w="752187290"/><text x="93.2214%" y="351.50">&lt;..</text></g><g><title>core::slice::index::get_offset_len_noubcheck (413,583,419 samples, 1.15%)</title><rect x="93.9152%" y="325" width="1.1527%" height="15" fill="rgb(232,218,39)" fg:x="33696291105" fg:w="413583419"/><text x="94.1652%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count (3,681,317 samples, 0.01%)</title><rect x="95.0679%" y="357" width="0.0103%" height="15" fill="rgb(248,166,6)" fg:x="34109874524" fg:w="3681317"/><text x="95.3179%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (3,681,317 samples, 0.01%)</title><rect x="95.0679%" y="341" width="0.0103%" height="15" fill="rgb(247,89,20)" fg:x="34109874524" fg:w="3681317"/><text x="95.3179%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,681,317 samples, 0.01%)</title><rect x="95.0679%" y="325" width="0.0103%" height="15" fill="rgb(248,130,54)" fg:x="34109874524" fg:w="3681317"/><text x="95.3179%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,681,317 samples, 0.01%)</title><rect x="95.0679%" y="309" width="0.0103%" height="15" fill="rgb(234,196,4)" fg:x="34109874524" fg:w="3681317"/><text x="95.3179%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,681,317 samples, 0.01%)</title><rect x="95.0679%" y="293" width="0.0103%" height="15" fill="rgb(250,143,31)" fg:x="34109874524" fg:w="3681317"/><text x="95.3179%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,681,317 samples, 0.01%)</title><rect x="95.0679%" y="277" width="0.0103%" height="15" fill="rgb(211,110,34)" fg:x="34109874524" fg:w="3681317"/><text x="95.3179%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (3,681,317 samples, 0.01%)</title><rect x="95.0679%" y="261" width="0.0103%" height="15" fill="rgb(215,124,48)" fg:x="34109874524" fg:w="3681317"/><text x="95.3179%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (3,681,317 samples, 0.01%)</title><rect x="95.0679%" y="245" width="0.0103%" height="15" fill="rgb(216,46,13)" fg:x="34109874524" fg:w="3681317"/><text x="95.3179%" y="255.50"></text></g><g><title>img::png::deflate::lzss::hash::first_byte_repeat_count::_{{closure}} (3,681,317 samples, 0.01%)</title><rect x="95.0679%" y="229" width="0.0103%" height="15" fill="rgb(205,184,25)" fg:x="34109874524" fg:w="3681317"/><text x="95.3179%" y="239.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;T,_&gt; as core::cmp::PartialEq&gt;::eq (93,900,027 samples, 0.26%)</title><rect x="96.7449%" y="341" width="0.2617%" height="15" fill="rgb(228,1,10)" fg:x="34711582044" fg:w="93900027"/><text x="96.9949%" y="351.50"></text></g><g><title>core::core_simd::masks::Mask&lt;T,_&gt;::all (93,900,027 samples, 0.26%)</title><rect x="96.7449%" y="325" width="0.2617%" height="15" fill="rgb(213,116,27)" fg:x="34711582044" fg:w="93900027"/><text x="96.9949%" y="335.50"></text></g><g><title>core::core_simd::masks::mask_impl::Mask&lt;T,_&gt;::all (93,900,027 samples, 0.26%)</title><rect x="96.7449%" y="309" width="0.2617%" height="15" fill="rgb(241,95,50)" fg:x="34711582044" fg:w="93900027"/><text x="96.9949%" y="319.50"></text></g><g><title>core::cmp::Ord::min (305,600,881 samples, 0.85%)</title><rect x="97.0066%" y="341" width="0.8517%" height="15" fill="rgb(238,48,32)" fg:x="34805482071" fg:w="305600881"/><text x="97.2566%" y="351.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::from_slice (120,216,306 samples, 0.34%)</title><rect x="97.8584%" y="341" width="0.3351%" height="15" fill="rgb(235,113,49)" fg:x="35111082952" fg:w="120216306"/><text x="98.1084%" y="351.50"></text></g><g><title>core::core_simd::vector::Simd&lt;T,_&gt;::load (120,216,306 samples, 0.34%)</title><rect x="97.8584%" y="325" width="0.3351%" height="15" fill="rgb(205,127,43)" fg:x="35111082952" fg:w="120216306"/><text x="98.1084%" y="335.50"></text></g><g><title>core::ptr::copy_nonoverlapping (120,216,306 samples, 0.34%)</title><rect x="97.8584%" y="309" width="0.3351%" height="15" fill="rgb(250,162,2)" fg:x="35111082952" fg:w="120216306"/><text x="98.1084%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (605,652,761 samples, 1.69%)</title><rect x="98.1934%" y="341" width="1.6880%" height="15" fill="rgb(220,13,41)" fg:x="35231299258" fg:w="605652761"/><text x="98.4434%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (605,652,761 samples, 1.69%)</title><rect x="98.1934%" y="325" width="1.6880%" height="15" fill="rgb(249,221,25)" fg:x="35231299258" fg:w="605652761"/><text x="98.4434%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,655,989 samples, 0.01%)</title><rect x="99.8712%" y="309" width="0.0102%" height="15" fill="rgb(215,208,19)" fg:x="35833296030" fg:w="3655989"/><text x="100.1212%" y="319.50"></text></g><g><title>img::simd_utils::number_of_matching_bytes (1,738,513,956 samples, 4.85%)</title><rect x="95.0781%" y="357" width="4.8454%" height="15" fill="rgb(236,175,2)" fg:x="34113555841" fg:w="1738513956"/><text x="95.3281%" y="367.50">img::s..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15,117,778 samples, 0.04%)</title><rect x="99.8814%" y="341" width="0.0421%" height="15" fill="rgb(241,52,2)" fg:x="35836952019" fg:w="15117778"/><text x="100.1314%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15,117,778 samples, 0.04%)</title><rect x="99.8814%" y="325" width="0.0421%" height="15" fill="rgb(248,140,14)" fg:x="35836952019" fg:w="15117778"/><text x="100.1314%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (15,117,778 samples, 0.04%)</title><rect x="99.8814%" y="309" width="0.0421%" height="15" fill="rgb(253,22,42)" fg:x="35836952019" fg:w="15117778"/><text x="100.1314%" y="319.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (10,880,244,614 samples, 30.32%)</title><rect x="69.6094%" y="373" width="30.3244%" height="15" fill="rgb(234,61,47)" fg:x="24975507831" fg:w="10880244614"/><text x="69.8594%" y="383.50">img::png::deflate::lzss::hash::LzssHashTable::get..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3,682,648 samples, 0.01%)</title><rect x="99.9236%" y="357" width="0.0103%" height="15" fill="rgb(208,226,15)" fg:x="35852069797" fg:w="3682648"/><text x="100.1736%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3,682,648 samples, 0.01%)</title><rect x="99.9236%" y="341" width="0.0103%" height="15" fill="rgb(217,221,4)" fg:x="35852069797" fg:w="3682648"/><text x="100.1736%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3,682,648 samples, 0.01%)</title><rect x="99.9236%" y="325" width="0.0103%" height="15" fill="rgb(212,174,34)" fg:x="35852069797" fg:w="3682648"/><text x="100.1736%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,682,648 samples, 0.01%)</title><rect x="99.9236%" y="309" width="0.0103%" height="15" fill="rgb(253,83,4)" fg:x="35852069797" fg:w="3682648"/><text x="100.1736%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,682,648 samples, 0.01%)</title><rect x="99.9236%" y="293" width="0.0103%" height="15" fill="rgb(250,195,49)" fg:x="35852069797" fg:w="3682648"/><text x="100.1736%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,682,648 samples, 0.01%)</title><rect x="99.9236%" y="277" width="0.0103%" height="15" fill="rgb(241,192,25)" fg:x="35852069797" fg:w="3682648"/><text x="100.1736%" y="287.50"></text></g><g><title>core::intrinsics::likely (3,682,648 samples, 0.01%)</title><rect x="99.9236%" y="261" width="0.0103%" height="15" fill="rgb(208,124,10)" fg:x="35852069797" fg:w="3682648"/><text x="100.1736%" y="271.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::convert::From&lt;[T: N]&gt;&gt;::from (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="357" width="0.0420%" height="15" fill="rgb(222,33,0)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::with_capacity (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="341" width="0.0420%" height="15" fill="rgb(234,209,28)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::with_capacity_in (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="325" width="0.0420%" height="15" fill="rgb(224,11,23)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="309" width="0.0420%" height="15" fill="rgb(232,99,1)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="293" width="0.0420%" height="15" fill="rgb(237,95,45)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="277" width="0.0420%" height="15" fill="rgb(208,109,11)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="261" width="0.0420%" height="15" fill="rgb(216,190,48)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="245" width="0.0420%" height="15" fill="rgb(251,171,36)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="255.50"></text></g><g><title>alloc::alloc::alloc (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="229" width="0.0420%" height="15" fill="rgb(230,62,22)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="239.50"></text></g><g><title>malloc (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="213" width="0.0420%" height="15" fill="rgb(225,114,35)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="223.50"></text></g><g><title>[libc.so.6] (15,086,434 samples, 0.04%)</title><rect x="99.9338%" y="197" width="0.0420%" height="15" fill="rgb(215,118,42)" fg:x="35855752445" fg:w="15086434"/><text x="100.1838%" y="207.50"></text></g><g><title>[libc.so.6] (3,777,711 samples, 0.01%)</title><rect x="99.9653%" y="181" width="0.0105%" height="15" fill="rgb(243,119,21)" fg:x="35867061168" fg:w="3777711"/><text x="100.2153%" y="191.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (18,752,189 samples, 0.05%)</title><rect x="99.9338%" y="373" width="0.0523%" height="15" fill="rgb(252,177,53)" fg:x="35855752445" fg:w="18752189"/><text x="100.1838%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3,665,755 samples, 0.01%)</title><rect x="99.9759%" y="357" width="0.0102%" height="15" fill="rgb(237,209,29)" fg:x="35870838879" fg:w="3665755"/><text x="100.2259%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3,665,755 samples, 0.01%)</title><rect x="99.9759%" y="341" width="0.0102%" height="15" fill="rgb(212,65,23)" fg:x="35870838879" fg:w="3665755"/><text x="100.2259%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3,665,755 samples, 0.01%)</title><rect x="99.9759%" y="325" width="0.0102%" height="15" fill="rgb(230,222,46)" fg:x="35870838879" fg:w="3665755"/><text x="100.2259%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,665,755 samples, 0.01%)</title><rect x="99.9759%" y="309" width="0.0102%" height="15" fill="rgb(215,135,32)" fg:x="35870838879" fg:w="3665755"/><text x="100.2259%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,665,755 samples, 0.01%)</title><rect x="99.9759%" y="293" width="0.0102%" height="15" fill="rgb(246,101,22)" fg:x="35870838879" fg:w="3665755"/><text x="100.2259%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,665,755 samples, 0.01%)</title><rect x="99.9759%" y="277" width="0.0102%" height="15" fill="rgb(206,107,13)" fg:x="35870838879" fg:w="3665755"/><text x="100.2259%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (3,665,755 samples, 0.01%)</title><rect x="99.9759%" y="261" width="0.0102%" height="15" fill="rgb(250,100,44)" fg:x="35870838879" fg:w="3665755"/><text x="100.2259%" y="271.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,665,755 samples, 0.01%)</title><rect x="99.9759%" y="245" width="0.0102%" height="15" fill="rgb(231,147,38)" fg:x="35870838879" fg:w="3665755"/><text x="100.2259%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,665,755 samples, 0.01%)</title><rect x="99.9759%" y="229" width="0.0102%" height="15" fill="rgb(229,8,40)" fg:x="35870838879" fg:w="3665755"/><text x="100.2259%" y="239.50"></text></g><g><title>img::png::deflate::prefix_table::get_cl_codes_for_code_lengths (3,765,482 samples, 0.01%)</title><rect x="99.9861%" y="373" width="0.0105%" height="15" fill="rgb(221,135,30)" fg:x="35874504634" fg:w="3765482"/><text x="100.2361%" y="383.50"></text></g><g><title>all (35,879,496,180 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(249,193,18)" fg:x="0" fg:w="35879496180"/><text x="0.2500%" y="415.50"></text></g><g><title>img (35,879,496,180 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(209,133,39)" fg:x="0" fg:w="35879496180"/><text x="0.2500%" y="399.50">img</text></g></svg></svg>