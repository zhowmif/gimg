<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="669587856814"><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (454,033,761 samples, 0.07%)</title><rect x="0.0065%" y="101" width="0.0678%" height="15" fill="rgb(227,0,7)" fg:x="43741110" fg:w="454033761"/><text x="0.2565%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (454,033,761 samples, 0.07%)</title><rect x="0.0065%" y="85" width="0.0678%" height="15" fill="rgb(217,0,24)" fg:x="43741110" fg:w="454033761"/><text x="0.2565%" y="95.50"></text></g><g><title>alloc::alloc::alloc (454,033,761 samples, 0.07%)</title><rect x="0.0065%" y="69" width="0.0678%" height="15" fill="rgb(221,193,54)" fg:x="43741110" fg:w="454033761"/><text x="0.2565%" y="79.50"></text></g><g><title>malloc (445,897,862 samples, 0.07%)</title><rect x="0.0077%" y="53" width="0.0666%" height="15" fill="rgb(248,212,6)" fg:x="51877009" fg:w="445897862"/><text x="0.2577%" y="63.50"></text></g><g><title>[libc.so.6] (321,347,312 samples, 0.05%)</title><rect x="0.0263%" y="37" width="0.0480%" height="15" fill="rgb(208,68,35)" fg:x="176427559" fg:w="321347312"/><text x="0.2763%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (478,019,767 samples, 0.07%)</title><rect x="0.0053%" y="165" width="0.0714%" height="15" fill="rgb(232,128,0)" fg:x="35647258" fg:w="478019767"/><text x="0.2553%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (478,019,767 samples, 0.07%)</title><rect x="0.0053%" y="149" width="0.0714%" height="15" fill="rgb(207,160,47)" fg:x="35647258" fg:w="478019767"/><text x="0.2553%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (478,019,767 samples, 0.07%)</title><rect x="0.0053%" y="133" width="0.0714%" height="15" fill="rgb(228,23,34)" fg:x="35647258" fg:w="478019767"/><text x="0.2553%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (478,019,767 samples, 0.07%)</title><rect x="0.0053%" y="117" width="0.0714%" height="15" fill="rgb(218,30,26)" fg:x="35647258" fg:w="478019767"/><text x="0.2553%" y="127.50"></text></g><g><title>[libc.so.6] (83,746,051 samples, 0.01%)</title><rect x="0.0773%" y="133" width="0.0125%" height="15" fill="rgb(220,122,19)" fg:x="517569927" fg:w="83746051"/><text x="0.3273%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (609,481,528 samples, 0.09%)</title><rect x="0.0000%" y="373" width="0.0910%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="609481528"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (609,481,528 samples, 0.09%)</title><rect x="0.0000%" y="357" width="0.0910%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="609481528"/><text x="0.2500%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (609,481,528 samples, 0.09%)</title><rect x="0.0000%" y="341" width="0.0910%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="609481528"/><text x="0.2500%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (609,481,528 samples, 0.09%)</title><rect x="0.0000%" y="325" width="0.0910%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="609481528"/><text x="0.2500%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (609,481,528 samples, 0.09%)</title><rect x="0.0000%" y="309" width="0.0910%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="609481528"/><text x="0.2500%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (609,481,528 samples, 0.09%)</title><rect x="0.0000%" y="293" width="0.0910%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="609481528"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (609,481,528 samples, 0.09%)</title><rect x="0.0000%" y="277" width="0.0910%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="609481528"/><text x="0.2500%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (601,320,075 samples, 0.09%)</title><rect x="0.0012%" y="261" width="0.0898%" height="15" fill="rgb(210,31,41)" fg:x="8161453" fg:w="601320075"/><text x="0.2512%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (585,880,999 samples, 0.09%)</title><rect x="0.0035%" y="245" width="0.0875%" height="15" fill="rgb(221,200,47)" fg:x="23600529" fg:w="585880999"/><text x="0.2535%" y="255.50"></text></g><g><title>core::clone::Clone::clone (585,880,999 samples, 0.09%)</title><rect x="0.0035%" y="229" width="0.0875%" height="15" fill="rgb(226,26,5)" fg:x="23600529" fg:w="585880999"/><text x="0.2535%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (577,818,560 samples, 0.09%)</title><rect x="0.0047%" y="213" width="0.0863%" height="15" fill="rgb(249,33,26)" fg:x="31662968" fg:w="577818560"/><text x="0.2547%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (573,834,270 samples, 0.09%)</title><rect x="0.0053%" y="197" width="0.0857%" height="15" fill="rgb(235,183,28)" fg:x="35647258" fg:w="573834270"/><text x="0.2553%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (573,834,270 samples, 0.09%)</title><rect x="0.0053%" y="181" width="0.0857%" height="15" fill="rgb(221,5,38)" fg:x="35647258" fg:w="573834270"/><text x="0.2553%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (95,814,503 samples, 0.01%)</title><rect x="0.0767%" y="165" width="0.0143%" height="15" fill="rgb(247,18,42)" fg:x="513667025" fg:w="95814503"/><text x="0.3267%" y="175.50"></text></g><g><title>core::ptr::copy_nonoverlapping (95,814,503 samples, 0.01%)</title><rect x="0.0767%" y="149" width="0.0143%" height="15" fill="rgb(241,131,45)" fg:x="513667025" fg:w="95814503"/><text x="0.3267%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (77,148,060 samples, 0.01%)</title><rect x="0.0947%" y="325" width="0.0115%" height="15" fill="rgb(249,31,29)" fg:x="633932281" fg:w="77148060"/><text x="0.3447%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (77,148,060 samples, 0.01%)</title><rect x="0.0947%" y="309" width="0.0115%" height="15" fill="rgb(225,111,53)" fg:x="633932281" fg:w="77148060"/><text x="0.3447%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (77,148,060 samples, 0.01%)</title><rect x="0.0947%" y="293" width="0.0115%" height="15" fill="rgb(238,160,17)" fg:x="633932281" fg:w="77148060"/><text x="0.3447%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (77,148,060 samples, 0.01%)</title><rect x="0.0947%" y="277" width="0.0115%" height="15" fill="rgb(214,148,48)" fg:x="633932281" fg:w="77148060"/><text x="0.3447%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77,148,060 samples, 0.01%)</title><rect x="0.0947%" y="261" width="0.0115%" height="15" fill="rgb(232,36,49)" fg:x="633932281" fg:w="77148060"/><text x="0.3447%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77,148,060 samples, 0.01%)</title><rect x="0.0947%" y="245" width="0.0115%" height="15" fill="rgb(209,103,24)" fg:x="633932281" fg:w="77148060"/><text x="0.3447%" y="255.50"></text></g><g><title>alloc::alloc::alloc (77,148,060 samples, 0.01%)</title><rect x="0.0947%" y="229" width="0.0115%" height="15" fill="rgb(229,88,8)" fg:x="633932281" fg:w="77148060"/><text x="0.3447%" y="239.50"></text></g><g><title>malloc (77,148,060 samples, 0.01%)</title><rect x="0.0947%" y="213" width="0.0115%" height="15" fill="rgb(213,181,19)" fg:x="633932281" fg:w="77148060"/><text x="0.3447%" y="223.50"></text></g><g><title>[libc.so.6] (77,148,060 samples, 0.01%)</title><rect x="0.0947%" y="197" width="0.0115%" height="15" fill="rgb(254,191,54)" fg:x="633932281" fg:w="77148060"/><text x="0.3447%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (362,400,518 samples, 0.05%)</title><rect x="0.1086%" y="197" width="0.0541%" height="15" fill="rgb(241,83,37)" fg:x="727101727" fg:w="362400518"/><text x="0.3586%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (362,400,518 samples, 0.05%)</title><rect x="0.1086%" y="181" width="0.0541%" height="15" fill="rgb(233,36,39)" fg:x="727101727" fg:w="362400518"/><text x="0.3586%" y="191.50"></text></g><g><title>alloc::alloc::alloc (362,400,518 samples, 0.05%)</title><rect x="0.1086%" y="165" width="0.0541%" height="15" fill="rgb(226,3,54)" fg:x="727101727" fg:w="362400518"/><text x="0.3586%" y="175.50"></text></g><g><title>malloc (358,328,785 samples, 0.05%)</title><rect x="0.1092%" y="149" width="0.0535%" height="15" fill="rgb(245,192,40)" fg:x="731173460" fg:w="358328785"/><text x="0.3592%" y="159.50"></text></g><g><title>[libc.so.6] (248,376,069 samples, 0.04%)</title><rect x="0.1256%" y="133" width="0.0371%" height="15" fill="rgb(238,167,29)" fg:x="841126176" fg:w="248376069"/><text x="0.3756%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (390,920,391 samples, 0.06%)</title><rect x="0.1080%" y="261" width="0.0584%" height="15" fill="rgb(232,182,51)" fg:x="723027272" fg:w="390920391"/><text x="0.3580%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (390,920,391 samples, 0.06%)</title><rect x="0.1080%" y="245" width="0.0584%" height="15" fill="rgb(231,60,39)" fg:x="723027272" fg:w="390920391"/><text x="0.3580%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (390,920,391 samples, 0.06%)</title><rect x="0.1080%" y="229" width="0.0584%" height="15" fill="rgb(208,69,12)" fg:x="723027272" fg:w="390920391"/><text x="0.3580%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (390,920,391 samples, 0.06%)</title><rect x="0.1080%" y="213" width="0.0584%" height="15" fill="rgb(235,93,37)" fg:x="723027272" fg:w="390920391"/><text x="0.3580%" y="223.50"></text></g><g><title>core::clone::Clone::clone (443,176,401 samples, 0.07%)</title><rect x="0.1062%" y="325" width="0.0662%" height="15" fill="rgb(213,116,39)" fg:x="711080341" fg:w="443176401"/><text x="0.3562%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (431,229,470 samples, 0.06%)</title><rect x="0.1080%" y="309" width="0.0644%" height="15" fill="rgb(222,207,29)" fg:x="723027272" fg:w="431229470"/><text x="0.3580%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (431,229,470 samples, 0.06%)</title><rect x="0.1080%" y="293" width="0.0644%" height="15" fill="rgb(206,96,30)" fg:x="723027272" fg:w="431229470"/><text x="0.3580%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (431,229,470 samples, 0.06%)</title><rect x="0.1080%" y="277" width="0.0644%" height="15" fill="rgb(218,138,4)" fg:x="723027272" fg:w="431229470"/><text x="0.3580%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (548,891,227 samples, 0.08%)</title><rect x="0.0910%" y="373" width="0.0820%" height="15" fill="rgb(250,191,14)" fg:x="609481528" fg:w="548891227"/><text x="0.3410%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (548,891,227 samples, 0.08%)</title><rect x="0.0910%" y="357" width="0.0820%" height="15" fill="rgb(239,60,40)" fg:x="609481528" fg:w="548891227"/><text x="0.3410%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (548,891,227 samples, 0.08%)</title><rect x="0.0910%" y="341" width="0.0820%" height="15" fill="rgb(206,27,48)" fg:x="609481528" fg:w="548891227"/><text x="0.3410%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,351,694,165 samples, 0.65%)</title><rect x="0.8291%" y="293" width="0.6499%" height="15" fill="rgb(225,35,8)" fg:x="5551823145" fg:w="4351694165"/><text x="1.0791%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (4,351,694,165 samples, 0.65%)</title><rect x="0.8291%" y="277" width="0.6499%" height="15" fill="rgb(250,213,24)" fg:x="5551823145" fg:w="4351694165"/><text x="1.0791%" y="287.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4,351,694,165 samples, 0.65%)</title><rect x="0.8291%" y="261" width="0.6499%" height="15" fill="rgb(247,123,22)" fg:x="5551823145" fg:w="4351694165"/><text x="1.0791%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4,351,694,165 samples, 0.65%)</title><rect x="0.8291%" y="245" width="0.6499%" height="15" fill="rgb(231,138,38)" fg:x="5551823145" fg:w="4351694165"/><text x="1.0791%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,351,694,165 samples, 0.65%)</title><rect x="0.8291%" y="229" width="0.6499%" height="15" fill="rgb(231,145,46)" fg:x="5551823145" fg:w="4351694165"/><text x="1.0791%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9,720,046,261 samples, 1.45%)</title><rect x="0.8291%" y="309" width="1.4516%" height="15" fill="rgb(251,118,11)" fg:x="5551823145" fg:w="9720046261"/><text x="1.0791%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,368,352,096 samples, 0.80%)</title><rect x="1.4790%" y="293" width="0.8017%" height="15" fill="rgb(217,147,25)" fg:x="9903517310" fg:w="5368352096"/><text x="1.7290%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,368,352,096 samples, 0.80%)</title><rect x="1.4790%" y="277" width="0.8017%" height="15" fill="rgb(247,81,37)" fg:x="9903517310" fg:w="5368352096"/><text x="1.7290%" y="287.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (5,368,352,096 samples, 0.80%)</title><rect x="1.4790%" y="261" width="0.8017%" height="15" fill="rgb(209,12,38)" fg:x="9903517310" fg:w="5368352096"/><text x="1.7290%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::number_of_matching_bytes (5,368,352,096 samples, 0.80%)</title><rect x="1.4790%" y="245" width="0.8017%" height="15" fill="rgb(227,1,9)" fg:x="9903517310" fg:w="5368352096"/><text x="1.7290%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (968,313,485 samples, 0.14%)</title><rect x="2.2820%" y="309" width="0.1446%" height="15" fill="rgb(248,47,43)" fg:x="15280048311" fg:w="968313485"/><text x="2.5320%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (31,150,995,698 samples, 4.65%)</title><rect x="0.1934%" y="325" width="4.6523%" height="15" fill="rgb(221,10,30)" fg:x="1295247689" fg:w="31150995698"/><text x="0.4434%" y="335.50">alloc..</text></g><g><title>core::ptr::write (16,197,881,591 samples, 2.42%)</title><rect x="2.4266%" y="309" width="2.4191%" height="15" fill="rgb(210,229,1)" fg:x="16248361796" fg:w="16197881591"/><text x="2.6766%" y="319.50">co..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (326,392,858 samples, 0.05%)</title><rect x="4.8583%" y="149" width="0.0487%" height="15" fill="rgb(222,148,37)" fg:x="32530895921" fg:w="326392858"/><text x="5.1083%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (326,392,858 samples, 0.05%)</title><rect x="4.8583%" y="133" width="0.0487%" height="15" fill="rgb(234,67,33)" fg:x="32530895921" fg:w="326392858"/><text x="5.1083%" y="143.50"></text></g><g><title>cfree (294,396,893 samples, 0.04%)</title><rect x="4.8631%" y="117" width="0.0440%" height="15" fill="rgb(247,98,35)" fg:x="32562891886" fg:w="294396893"/><text x="5.1131%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (341,341,457 samples, 0.05%)</title><rect x="4.8583%" y="261" width="0.0510%" height="15" fill="rgb(247,138,52)" fg:x="32530895921" fg:w="341341457"/><text x="5.1083%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (341,341,457 samples, 0.05%)</title><rect x="4.8583%" y="245" width="0.0510%" height="15" fill="rgb(213,79,30)" fg:x="32530895921" fg:w="341341457"/><text x="5.1083%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (341,341,457 samples, 0.05%)</title><rect x="4.8583%" y="229" width="0.0510%" height="15" fill="rgb(246,177,23)" fg:x="32530895921" fg:w="341341457"/><text x="5.1083%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (341,341,457 samples, 0.05%)</title><rect x="4.8583%" y="213" width="0.0510%" height="15" fill="rgb(230,62,27)" fg:x="32530895921" fg:w="341341457"/><text x="5.1083%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (341,341,457 samples, 0.05%)</title><rect x="4.8583%" y="197" width="0.0510%" height="15" fill="rgb(216,154,8)" fg:x="32530895921" fg:w="341341457"/><text x="5.1083%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (341,341,457 samples, 0.05%)</title><rect x="4.8583%" y="181" width="0.0510%" height="15" fill="rgb(244,35,45)" fg:x="32530895921" fg:w="341341457"/><text x="5.1083%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (341,341,457 samples, 0.05%)</title><rect x="4.8583%" y="165" width="0.0510%" height="15" fill="rgb(251,115,12)" fg:x="32530895921" fg:w="341341457"/><text x="5.1083%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (473,950,244 samples, 0.07%)</title><rect x="4.8517%" y="293" width="0.0708%" height="15" fill="rgb(240,54,50)" fg:x="32486117948" fg:w="473950244"/><text x="5.1017%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (473,950,244 samples, 0.07%)</title><rect x="4.8517%" y="277" width="0.0708%" height="15" fill="rgb(233,84,52)" fg:x="32486117948" fg:w="473950244"/><text x="5.1017%" y="287.50"></text></g><g><title>core::ptr::copy (1,018,924,906 samples, 0.15%)</title><rect x="4.9550%" y="213" width="0.1522%" height="15" fill="rgb(207,117,47)" fg:x="33177894498" fg:w="1018924906"/><text x="5.2050%" y="223.50"></text></g><g><title>[libc.so.6] (1,010,893,804 samples, 0.15%)</title><rect x="4.9562%" y="197" width="0.1510%" height="15" fill="rgb(249,43,39)" fg:x="33185925600" fg:w="1010893804"/><text x="5.2062%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (1,035,119,206 samples, 0.15%)</title><rect x="4.9532%" y="277" width="0.1546%" height="15" fill="rgb(209,38,44)" fg:x="33165791737" fg:w="1035119206"/><text x="5.2032%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,035,119,206 samples, 0.15%)</title><rect x="4.9532%" y="261" width="0.1546%" height="15" fill="rgb(236,212,23)" fg:x="33165791737" fg:w="1035119206"/><text x="5.2032%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(alloc::vec::Vec&lt;u16&gt;,u32),alloc::alloc::Global&gt;&gt; (1,035,119,206 samples, 0.15%)</title><rect x="4.9532%" y="245" width="0.1546%" height="15" fill="rgb(242,79,21)" fg:x="33165791737" fg:w="1035119206"/><text x="5.2032%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,035,119,206 samples, 0.15%)</title><rect x="4.9532%" y="229" width="0.1546%" height="15" fill="rgb(211,96,35)" fg:x="33165791737" fg:w="1035119206"/><text x="5.2032%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (32,917,693,082 samples, 4.92%)</title><rect x="0.1934%" y="341" width="4.9161%" height="15" fill="rgb(253,215,40)" fg:x="1295247689" fg:w="32917693082"/><text x="0.4434%" y="351.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,766,697,384 samples, 0.26%)</title><rect x="4.8457%" y="325" width="0.2638%" height="15" fill="rgb(211,81,21)" fg:x="32446243387" fg:w="1766697384"/><text x="5.0957%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,726,822,823 samples, 0.26%)</title><rect x="4.8517%" y="309" width="0.2579%" height="15" fill="rgb(208,190,38)" fg:x="32486117948" fg:w="1726822823"/><text x="5.1017%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,213,386,150 samples, 0.18%)</title><rect x="4.9283%" y="293" width="0.1812%" height="15" fill="rgb(235,213,38)" fg:x="32999554621" fg:w="1213386150"/><text x="5.1783%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33,399,315,781 samples, 4.99%)</title><rect x="0.1730%" y="373" width="4.9880%" height="15" fill="rgb(237,122,38)" fg:x="1158372755" fg:w="33399315781"/><text x="0.4230%" y="383.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33,363,360,985 samples, 4.98%)</title><rect x="0.1784%" y="357" width="4.9827%" height="15" fill="rgb(244,218,35)" fg:x="1194327551" fg:w="33363360985"/><text x="0.4284%" y="367.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (268,105,919 samples, 0.04%)</title><rect x="5.1210%" y="341" width="0.0400%" height="15" fill="rgb(240,68,47)" fg:x="34289582617" fg:w="268105919"/><text x="5.3710%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (268,105,919 samples, 0.04%)</title><rect x="5.1210%" y="325" width="0.0400%" height="15" fill="rgb(210,16,53)" fg:x="34289582617" fg:w="268105919"/><text x="5.3710%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (264,181,586 samples, 0.04%)</title><rect x="5.1216%" y="309" width="0.0395%" height="15" fill="rgb(235,124,12)" fg:x="34293506950" fg:w="264181586"/><text x="5.3716%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (264,181,586 samples, 0.04%)</title><rect x="5.1216%" y="293" width="0.0395%" height="15" fill="rgb(224,169,11)" fg:x="34293506950" fg:w="264181586"/><text x="5.3716%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (264,181,586 samples, 0.04%)</title><rect x="5.1216%" y="277" width="0.0395%" height="15" fill="rgb(250,166,2)" fg:x="34293506950" fg:w="264181586"/><text x="5.3716%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (182,443,563 samples, 0.03%)</title><rect x="5.1338%" y="261" width="0.0272%" height="15" fill="rgb(242,216,29)" fg:x="34375244973" fg:w="182443563"/><text x="5.3838%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (182,443,563 samples, 0.03%)</title><rect x="5.1338%" y="245" width="0.0272%" height="15" fill="rgb(230,116,27)" fg:x="34375244973" fg:w="182443563"/><text x="5.3838%" y="255.50"></text></g><g><title>alloc::alloc::alloc (182,443,563 samples, 0.03%)</title><rect x="5.1338%" y="229" width="0.0272%" height="15" fill="rgb(228,99,48)" fg:x="34375244973" fg:w="182443563"/><text x="5.3838%" y="239.50"></text></g><g><title>malloc (182,443,563 samples, 0.03%)</title><rect x="5.1338%" y="213" width="0.0272%" height="15" fill="rgb(253,11,6)" fg:x="34375244973" fg:w="182443563"/><text x="5.3838%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (578,087,738 samples, 0.09%)</title><rect x="5.1695%" y="373" width="0.0863%" height="15" fill="rgb(247,143,39)" fg:x="34614057019" fg:w="578087738"/><text x="5.4195%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (578,087,738 samples, 0.09%)</title><rect x="5.1695%" y="357" width="0.0863%" height="15" fill="rgb(236,97,10)" fg:x="34614057019" fg:w="578087738"/><text x="5.4195%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (578,087,738 samples, 0.09%)</title><rect x="5.1695%" y="341" width="0.0863%" height="15" fill="rgb(233,208,19)" fg:x="34614057019" fg:w="578087738"/><text x="5.4195%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (418,456,037 samples, 0.06%)</title><rect x="5.1933%" y="325" width="0.0625%" height="15" fill="rgb(216,164,2)" fg:x="34773688720" fg:w="418456037"/><text x="5.4433%" y="335.50"></text></g><g><title>core::cmp::PartialEq::ne (4,277,649,703 samples, 0.64%)</title><rect x="6.1315%" y="341" width="0.6388%" height="15" fill="rgb(220,129,5)" fg:x="41055891685" fg:w="4277649703"/><text x="6.3815%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4,277,649,703 samples, 0.64%)</title><rect x="6.1315%" y="325" width="0.6388%" height="15" fill="rgb(242,17,10)" fg:x="41055891685" fg:w="4277649703"/><text x="6.3815%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (15,606,055,126 samples, 2.33%)</title><rect x="6.7704%" y="325" width="2.3307%" height="15" fill="rgb(242,107,0)" fg:x="45333541388" fg:w="15606055126"/><text x="7.0204%" y="335.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (5,926,413,994 samples, 0.89%)</title><rect x="8.2160%" y="309" width="0.8851%" height="15" fill="rgb(251,28,31)" fg:x="55013182520" fg:w="5926413994"/><text x="8.4660%" y="319.50"></text></g><g><title>core::cmp::min_by (5,926,413,994 samples, 0.89%)</title><rect x="8.2160%" y="293" width="0.8851%" height="15" fill="rgb(233,223,10)" fg:x="55013182520" fg:w="5926413994"/><text x="8.4660%" y="303.50"></text></g><g><title>core::cmp::Ordering::is_lt (469,799,447 samples, 0.07%)</title><rect x="9.0309%" y="277" width="0.0702%" height="15" fill="rgb(215,21,27)" fg:x="60469797067" fg:w="469799447"/><text x="9.2809%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (4,198,136,270 samples, 0.63%)</title><rect x="10.8125%" y="309" width="0.6270%" height="15" fill="rgb(232,23,21)" fg:x="72399281664" fg:w="4198136270"/><text x="11.0625%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (362,556,675 samples, 0.05%)</title><rect x="11.4455%" y="261" width="0.0541%" height="15" fill="rgb(244,5,23)" fg:x="76637943183" fg:w="362556675"/><text x="11.6955%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (362,556,675 samples, 0.05%)</title><rect x="11.4455%" y="245" width="0.0541%" height="15" fill="rgb(226,81,46)" fg:x="76637943183" fg:w="362556675"/><text x="11.6955%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (352,235,648 samples, 0.05%)</title><rect x="11.4471%" y="229" width="0.0526%" height="15" fill="rgb(247,70,30)" fg:x="76648264210" fg:w="352235648"/><text x="11.6971%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (352,235,648 samples, 0.05%)</title><rect x="11.4471%" y="213" width="0.0526%" height="15" fill="rgb(212,68,19)" fg:x="76648264210" fg:w="352235648"/><text x="11.6971%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (352,235,648 samples, 0.05%)</title><rect x="11.4471%" y="197" width="0.0526%" height="15" fill="rgb(240,187,13)" fg:x="76648264210" fg:w="352235648"/><text x="11.6971%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (352,235,648 samples, 0.05%)</title><rect x="11.4471%" y="181" width="0.0526%" height="15" fill="rgb(223,113,26)" fg:x="76648264210" fg:w="352235648"/><text x="11.6971%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,253,527,847 samples, 0.78%)</title><rect x="11.4395%" y="309" width="0.7846%" height="15" fill="rgb(206,192,2)" fg:x="76597417934" fg:w="5253527847"/><text x="11.6895%" y="319.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}}::_{{closure}} (5,253,527,847 samples, 0.78%)</title><rect x="11.4395%" y="293" width="0.7846%" height="15" fill="rgb(241,108,4)" fg:x="76597417934" fg:w="5253527847"/><text x="11.6895%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,213,002,598 samples, 0.78%)</title><rect x="11.4455%" y="277" width="0.7785%" height="15" fill="rgb(247,173,49)" fg:x="76637943183" fg:w="5213002598"/><text x="11.6955%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,850,445,923 samples, 0.72%)</title><rect x="11.4997%" y="261" width="0.7244%" height="15" fill="rgb(224,114,35)" fg:x="77000499858" fg:w="4850445923"/><text x="11.7497%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,850,445,923 samples, 0.72%)</title><rect x="11.4997%" y="245" width="0.7244%" height="15" fill="rgb(245,159,27)" fg:x="77000499858" fg:w="4850445923"/><text x="11.7497%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (68,215,783,690 samples, 10.19%)</title><rect x="6.7704%" y="341" width="10.1877%" height="15" fill="rgb(245,172,44)" fg:x="45333541388" fg:w="68215783690"/><text x="7.0204%" y="351.50">core::iter::ada..</text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (52,609,728,564 samples, 7.86%)</title><rect x="9.1011%" y="325" width="7.8570%" height="15" fill="rgb(236,23,11)" fg:x="60939596514" fg:w="52609728564"/><text x="9.3511%" y="335.50">img::png::d..</text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (31,698,379,297 samples, 4.73%)</title><rect x="12.2241%" y="309" width="4.7340%" height="15" fill="rgb(205,117,38)" fg:x="81850945781" fg:w="31698379297"/><text x="12.4741%" y="319.50">img::p..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (10,924,285,256 samples, 1.63%)</title><rect x="15.3266%" y="293" width="1.6315%" height="15" fill="rgb(237,72,25)" fg:x="102625039822" fg:w="10924285256"/><text x="15.5766%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u16,u16)&gt;&gt; (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="341" width="0.0263%" height="15" fill="rgb(244,70,9)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="325" width="0.0263%" height="15" fill="rgb(217,125,39)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u16,u16),alloc::alloc::Global&gt;&gt; (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="309" width="0.0263%" height="15" fill="rgb(235,36,10)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="293" width="0.0263%" height="15" fill="rgb(251,123,47)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u16,u16)&gt;&gt; (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="277" width="0.0263%" height="15" fill="rgb(221,13,13)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="261" width="0.0263%" height="15" fill="rgb(238,131,9)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="245" width="0.0263%" height="15" fill="rgb(211,50,8)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="229" width="0.0263%" height="15" fill="rgb(245,182,24)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="213" width="0.0263%" height="15" fill="rgb(242,14,37)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="223.50"></text></g><g><title>cfree (176,093,462 samples, 0.03%)</title><rect x="16.9581%" y="197" width="0.0263%" height="15" fill="rgb(246,228,12)" fg:x="113549325078" fg:w="176093462"/><text x="17.2081%" y="207.50"></text></g><g><title>[libc.so.6] (76,252,494 samples, 0.01%)</title><rect x="16.9730%" y="181" width="0.0114%" height="15" fill="rgb(213,55,15)" fg:x="113649166046" fg:w="76252494"/><text x="17.2230%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (461,420,930 samples, 0.07%)</title><rect x="16.9844%" y="341" width="0.0689%" height="15" fill="rgb(209,9,3)" fg:x="113725418540" fg:w="461420930"/><text x="17.2344%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (79,314,327,509 samples, 11.85%)</title><rect x="5.2815%" y="357" width="11.8452%" height="15" fill="rgb(230,59,30)" fg:x="35364033238" fg:w="79314327509"/><text x="5.5315%" y="367.50">&lt;alloc::vec::into_..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (491,521,277 samples, 0.07%)</title><rect x="17.0533%" y="341" width="0.0734%" height="15" fill="rgb(209,121,21)" fg:x="114186839470" fg:w="491521277"/><text x="17.3033%" y="351.50"></text></g><g><title>core::ptr::read (491,521,277 samples, 0.07%)</title><rect x="17.0533%" y="325" width="0.0734%" height="15" fill="rgb(220,109,13)" fg:x="114186839470" fg:w="491521277"/><text x="17.3033%" y="335.50"></text></g><g><title>[libc.so.6] (79,584,979,391 samples, 11.89%)</title><rect x="5.2672%" y="373" width="11.8857%" height="15" fill="rgb(232,18,1)" fg:x="35268287098" fg:w="79584979391"/><text x="5.5172%" y="383.50">[libc.so.6]</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,863,213,866 samples, 0.88%)</title><rect x="23.6858%" y="213" width="0.8756%" height="15" fill="rgb(215,41,42)" fg:x="158597274479" fg:w="5863213866"/><text x="23.9358%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,538,087,293 samples, 1.28%)</title><rect x="23.6858%" y="277" width="1.2751%" height="15" fill="rgb(224,123,36)" fg:x="158597274479" fg:w="8538087293"/><text x="23.9358%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (8,538,087,293 samples, 1.28%)</title><rect x="23.6858%" y="261" width="1.2751%" height="15" fill="rgb(240,125,3)" fg:x="158597274479" fg:w="8538087293"/><text x="23.9358%" y="271.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8,538,087,293 samples, 1.28%)</title><rect x="23.6858%" y="245" width="1.2751%" height="15" fill="rgb(205,98,50)" fg:x="158597274479" fg:w="8538087293"/><text x="23.9358%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8,538,087,293 samples, 1.28%)</title><rect x="23.6858%" y="229" width="1.2751%" height="15" fill="rgb(205,185,37)" fg:x="158597274479" fg:w="8538087293"/><text x="23.9358%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,674,873,427 samples, 0.40%)</title><rect x="24.5615%" y="213" width="0.3995%" height="15" fill="rgb(238,207,15)" fg:x="164460488345" fg:w="2674873427"/><text x="24.8115%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (2,674,873,427 samples, 0.40%)</title><rect x="24.5615%" y="197" width="0.3995%" height="15" fill="rgb(213,199,42)" fg:x="164460488345" fg:w="2674873427"/><text x="24.8115%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,674,873,427 samples, 0.40%)</title><rect x="24.5615%" y="181" width="0.3995%" height="15" fill="rgb(235,201,11)" fg:x="164460488345" fg:w="2674873427"/><text x="24.8115%" y="191.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (2,674,873,427 samples, 0.40%)</title><rect x="24.5615%" y="165" width="0.3995%" height="15" fill="rgb(207,46,11)" fg:x="164460488345" fg:w="2674873427"/><text x="24.8115%" y="175.50"></text></g><g><title>core::cmp::Ord::min (5,046,844,379 samples, 0.75%)</title><rect x="27.1365%" y="229" width="0.7537%" height="15" fill="rgb(241,35,35)" fg:x="181702705686" fg:w="5046844379"/><text x="27.3865%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8,166,241,210 samples, 1.22%)</title><rect x="27.8902%" y="229" width="1.2196%" height="15" fill="rgb(243,32,47)" fg:x="186749550065" fg:w="8166241210"/><text x="28.1402%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8,166,241,210 samples, 1.22%)</title><rect x="27.8902%" y="213" width="1.2196%" height="15" fill="rgb(247,202,23)" fg:x="186749550065" fg:w="8166241210"/><text x="28.1402%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (8,166,241,210 samples, 1.22%)</title><rect x="27.8902%" y="197" width="1.2196%" height="15" fill="rgb(219,102,11)" fg:x="186749550065" fg:w="8166241210"/><text x="28.1402%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (468,244,613,874 samples, 69.93%)</title><rect x="23.6858%" y="293" width="69.9303%" height="15" fill="rgb(243,110,44)" fg:x="158597274479" fg:w="468244613874"/><text x="23.9358%" y="303.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (459,706,526,581 samples, 68.66%)</title><rect x="24.9609%" y="277" width="68.6551%" height="15" fill="rgb(222,74,54)" fg:x="167135361772" fg:w="459706526581"/><text x="25.2109%" y="287.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (459,706,526,581 samples, 68.66%)</title><rect x="24.9609%" y="261" width="68.6551%" height="15" fill="rgb(216,99,12)" fg:x="167135361772" fg:w="459706526581"/><text x="25.2109%" y="271.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (459,706,526,581 samples, 68.66%)</title><rect x="24.9609%" y="245" width="68.6551%" height="15" fill="rgb(226,22,26)" fg:x="167135361772" fg:w="459706526581"/><text x="25.2109%" y="255.50">img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}}</text></g><g><title>img::png::deflate::lzss::hash::number_of_matching_bytes (431,926,097,078 samples, 64.51%)</title><rect x="29.1098%" y="229" width="64.5063%" height="15" fill="rgb(217,163,10)" fg:x="194915791275" fg:w="431926097078"/><text x="29.3598%" y="239.50">img::png::deflate::lzss::hash::number_of_matching_bytes</text></g><g><title>core::cmp::Ord::min (5,190,933,906 samples, 0.78%)</title><rect x="92.8408%" y="213" width="0.7752%" height="15" fill="rgb(213,25,53)" fg:x="621650954447" fg:w="5190933906"/><text x="93.0908%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (117,149,725 samples, 0.02%)</title><rect x="93.6190%" y="293" width="0.0175%" height="15" fill="rgb(252,105,26)" fg:x="626861488416" fg:w="117149725"/><text x="93.8690%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (117,149,725 samples, 0.02%)</title><rect x="93.6190%" y="277" width="0.0175%" height="15" fill="rgb(220,39,43)" fg:x="626861488416" fg:w="117149725"/><text x="93.8690%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (117,149,725 samples, 0.02%)</title><rect x="93.6190%" y="261" width="0.0175%" height="15" fill="rgb(229,68,48)" fg:x="626861488416" fg:w="117149725"/><text x="93.8690%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (512,005,772,271 samples, 76.47%)</title><rect x="17.1713%" y="309" width="76.4658%" height="15" fill="rgb(252,8,32)" fg:x="114976962644" fg:w="512005772271"/><text x="17.4213%" y="319.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u16&gt;&gt; (84,098,088 samples, 0.01%)</title><rect x="93.6383%" y="245" width="0.0126%" height="15" fill="rgb(223,20,43)" fg:x="626990962522" fg:w="84098088"/><text x="93.8883%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84,098,088 samples, 0.01%)</title><rect x="93.6383%" y="229" width="0.0126%" height="15" fill="rgb(229,81,49)" fg:x="626990962522" fg:w="84098088"/><text x="93.8883%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u16,alloc::alloc::Global&gt;&gt; (84,098,088 samples, 0.01%)</title><rect x="93.6383%" y="213" width="0.0126%" height="15" fill="rgb(236,28,36)" fg:x="626990962522" fg:w="84098088"/><text x="93.8883%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84,098,088 samples, 0.01%)</title><rect x="93.6383%" y="197" width="0.0126%" height="15" fill="rgb(249,185,26)" fg:x="626990962522" fg:w="84098088"/><text x="93.8883%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (84,098,088 samples, 0.01%)</title><rect x="93.6383%" y="181" width="0.0126%" height="15" fill="rgb(249,174,33)" fg:x="626990962522" fg:w="84098088"/><text x="93.8883%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84,098,088 samples, 0.01%)</title><rect x="93.6383%" y="165" width="0.0126%" height="15" fill="rgb(233,201,37)" fg:x="626990962522" fg:w="84098088"/><text x="93.8883%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (84,098,088 samples, 0.01%)</title><rect x="93.6383%" y="149" width="0.0126%" height="15" fill="rgb(221,78,26)" fg:x="626990962522" fg:w="84098088"/><text x="93.8883%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (84,098,088 samples, 0.01%)</title><rect x="93.6383%" y="133" width="0.0126%" height="15" fill="rgb(250,127,30)" fg:x="626990962522" fg:w="84098088"/><text x="93.8883%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (84,098,088 samples, 0.01%)</title><rect x="93.6383%" y="117" width="0.0126%" height="15" fill="rgb(230,49,44)" fg:x="626990962522" fg:w="84098088"/><text x="93.8883%" y="127.50"></text></g><g><title>cfree (75,922,573 samples, 0.01%)</title><rect x="93.6396%" y="101" width="0.0113%" height="15" fill="rgb(229,67,23)" fg:x="626999138037" fg:w="75922573"/><text x="93.8896%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (112,473,241 samples, 0.02%)</title><rect x="93.6371%" y="277" width="0.0168%" height="15" fill="rgb(249,83,47)" fg:x="626982734915" fg:w="112473241"/><text x="93.8871%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (112,473,241 samples, 0.02%)</title><rect x="93.6371%" y="261" width="0.0168%" height="15" fill="rgb(215,43,3)" fg:x="626982734915" fg:w="112473241"/><text x="93.8871%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (512,126,476,495 samples, 76.48%)</title><rect x="17.1713%" y="325" width="76.4838%" height="15" fill="rgb(238,154,13)" fg:x="114976962644" fg:w="512126476495"/><text x="17.4213%" y="335.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (120,704,224 samples, 0.02%)</title><rect x="93.6371%" y="309" width="0.0180%" height="15" fill="rgb(219,56,2)" fg:x="626982734915" fg:w="120704224"/><text x="93.8871%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (120,704,224 samples, 0.02%)</title><rect x="93.6371%" y="293" width="0.0180%" height="15" fill="rgb(233,0,4)" fg:x="626982734915" fg:w="120704224"/><text x="93.8871%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (184,295,532 samples, 0.03%)</title><rect x="93.6569%" y="309" width="0.0275%" height="15" fill="rgb(235,30,7)" fg:x="627114948627" fg:w="184295532"/><text x="93.9069%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (184,295,532 samples, 0.03%)</title><rect x="93.6569%" y="293" width="0.0275%" height="15" fill="rgb(250,79,13)" fg:x="627114948627" fg:w="184295532"/><text x="93.9069%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (184,295,532 samples, 0.03%)</title><rect x="93.6569%" y="277" width="0.0275%" height="15" fill="rgb(211,146,34)" fg:x="627114948627" fg:w="184295532"/><text x="93.9069%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (184,295,532 samples, 0.03%)</title><rect x="93.6569%" y="261" width="0.0275%" height="15" fill="rgb(228,22,38)" fg:x="627114948627" fg:w="184295532"/><text x="93.9069%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (180,353,496 samples, 0.03%)</title><rect x="93.6574%" y="245" width="0.0269%" height="15" fill="rgb(235,168,5)" fg:x="627118890663" fg:w="180353496"/><text x="93.9074%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (180,353,496 samples, 0.03%)</title><rect x="93.6574%" y="229" width="0.0269%" height="15" fill="rgb(221,155,16)" fg:x="627118890663" fg:w="180353496"/><text x="93.9074%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (180,353,496 samples, 0.03%)</title><rect x="93.6574%" y="213" width="0.0269%" height="15" fill="rgb(215,215,53)" fg:x="627118890663" fg:w="180353496"/><text x="93.9074%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (180,353,496 samples, 0.03%)</title><rect x="93.6574%" y="197" width="0.0269%" height="15" fill="rgb(223,4,10)" fg:x="627118890663" fg:w="180353496"/><text x="93.9074%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (288,254,521 samples, 0.04%)</title><rect x="93.6569%" y="325" width="0.0430%" height="15" fill="rgb(234,103,6)" fg:x="627114948627" fg:w="288254521"/><text x="93.9069%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (103,958,989 samples, 0.02%)</title><rect x="93.6844%" y="309" width="0.0155%" height="15" fill="rgb(227,97,0)" fg:x="627299244159" fg:w="103958989"/><text x="93.9344%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (103,958,989 samples, 0.02%)</title><rect x="93.6844%" y="293" width="0.0155%" height="15" fill="rgb(234,150,53)" fg:x="627299244159" fg:w="103958989"/><text x="93.9344%" y="303.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (103,958,989 samples, 0.02%)</title><rect x="93.6844%" y="277" width="0.0155%" height="15" fill="rgb(228,201,54)" fg:x="627299244159" fg:w="103958989"/><text x="93.9344%" y="287.50"></text></g><g><title>img::png::deflate::lzss::hash::number_of_matching_bytes (77,405,618 samples, 0.01%)</title><rect x="93.6883%" y="261" width="0.0116%" height="15" fill="rgb(222,22,37)" fg:x="627325797530" fg:w="77405618"/><text x="93.9383%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (125,986,021 samples, 0.02%)</title><rect x="93.7005%" y="245" width="0.0188%" height="15" fill="rgb(237,53,32)" fg:x="627407224463" fg:w="125986021"/><text x="93.9505%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (125,986,021 samples, 0.02%)</title><rect x="93.7005%" y="229" width="0.0188%" height="15" fill="rgb(233,25,53)" fg:x="627407224463" fg:w="125986021"/><text x="93.9505%" y="239.50"></text></g><g><title>alloc::alloc::alloc (125,986,021 samples, 0.02%)</title><rect x="93.7005%" y="213" width="0.0188%" height="15" fill="rgb(210,40,34)" fg:x="627407224463" fg:w="125986021"/><text x="93.9505%" y="223.50"></text></g><g><title>malloc (114,065,081 samples, 0.02%)</title><rect x="93.7023%" y="197" width="0.0170%" height="15" fill="rgb(241,220,44)" fg:x="627419145403" fg:w="114065081"/><text x="93.9523%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (512,656,278,212 samples, 76.56%)</title><rect x="17.1576%" y="357" width="76.5630%" height="15" fill="rgb(235,28,35)" fg:x="114885018782" fg:w="512656278212"/><text x="17.4076%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (512,628,013,297 samples, 76.56%)</title><rect x="17.1618%" y="341" width="76.5587%" height="15" fill="rgb(210,56,17)" fg:x="114913283697" fg:w="512628013297"/><text x="17.4118%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (138,093,846 samples, 0.02%)</title><rect x="93.6999%" y="325" width="0.0206%" height="15" fill="rgb(224,130,29)" fg:x="627403203148" fg:w="138093846"/><text x="93.9499%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (138,093,846 samples, 0.02%)</title><rect x="93.6999%" y="309" width="0.0206%" height="15" fill="rgb(235,212,8)" fg:x="627403203148" fg:w="138093846"/><text x="93.9499%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (134,072,531 samples, 0.02%)</title><rect x="93.7005%" y="293" width="0.0200%" height="15" fill="rgb(223,33,50)" fg:x="627407224463" fg:w="134072531"/><text x="93.9505%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (134,072,531 samples, 0.02%)</title><rect x="93.7005%" y="277" width="0.0200%" height="15" fill="rgb(219,149,13)" fg:x="627407224463" fg:w="134072531"/><text x="93.9505%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (134,072,531 samples, 0.02%)</title><rect x="93.7005%" y="261" width="0.0200%" height="15" fill="rgb(250,156,29)" fg:x="627407224463" fg:w="134072531"/><text x="93.9505%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (141,415,526 samples, 0.02%)</title><rect x="93.7333%" y="213" width="0.0211%" height="15" fill="rgb(216,193,19)" fg:x="627626522112" fg:w="141415526"/><text x="93.9833%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (165,700,501 samples, 0.02%)</title><rect x="93.7333%" y="229" width="0.0247%" height="15" fill="rgb(216,135,14)" fg:x="627626522112" fg:w="165700501"/><text x="93.9833%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (254,807,475 samples, 0.04%)</title><rect x="93.7205%" y="357" width="0.0381%" height="15" fill="rgb(241,47,5)" fg:x="627541296994" fg:w="254807475"/><text x="93.9705%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (246,643,273 samples, 0.04%)</title><rect x="93.7218%" y="341" width="0.0368%" height="15" fill="rgb(233,42,35)" fg:x="627549461196" fg:w="246643273"/><text x="93.9718%" y="351.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths::_{{closure}} (246,643,273 samples, 0.04%)</title><rect x="93.7218%" y="325" width="0.0368%" height="15" fill="rgb(231,13,6)" fg:x="627549461196" fg:w="246643273"/><text x="93.9718%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (246,643,273 samples, 0.04%)</title><rect x="93.7218%" y="309" width="0.0368%" height="15" fill="rgb(207,181,40)" fg:x="627549461196" fg:w="246643273"/><text x="93.9718%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (246,643,273 samples, 0.04%)</title><rect x="93.7218%" y="293" width="0.0368%" height="15" fill="rgb(254,173,49)" fg:x="627549461196" fg:w="246643273"/><text x="93.9718%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (246,643,273 samples, 0.04%)</title><rect x="93.7218%" y="277" width="0.0368%" height="15" fill="rgb(221,1,38)" fg:x="627549461196" fg:w="246643273"/><text x="93.9718%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (246,643,273 samples, 0.04%)</title><rect x="93.7218%" y="261" width="0.0368%" height="15" fill="rgb(206,124,46)" fg:x="627549461196" fg:w="246643273"/><text x="93.9718%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (246,643,273 samples, 0.04%)</title><rect x="93.7218%" y="245" width="0.0368%" height="15" fill="rgb(249,21,11)" fg:x="627549461196" fg:w="246643273"/><text x="93.9718%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (77,182,388 samples, 0.01%)</title><rect x="93.7586%" y="357" width="0.0115%" height="15" fill="rgb(222,201,40)" fg:x="627796104469" fg:w="77182388"/><text x="94.0086%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (77,182,388 samples, 0.01%)</title><rect x="93.7586%" y="341" width="0.0115%" height="15" fill="rgb(235,61,29)" fg:x="627796104469" fg:w="77182388"/><text x="94.0086%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (77,182,388 samples, 0.01%)</title><rect x="93.7586%" y="325" width="0.0115%" height="15" fill="rgb(219,207,3)" fg:x="627796104469" fg:w="77182388"/><text x="94.0086%" y="335.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::convert::From&lt;[T: N]&gt;&gt;::from (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="309" width="0.0110%" height="15" fill="rgb(222,56,46)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::with_capacity (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="293" width="0.0110%" height="15" fill="rgb(239,76,54)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::with_capacity_in (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="277" width="0.0110%" height="15" fill="rgb(231,124,27)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="261" width="0.0110%" height="15" fill="rgb(249,195,6)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="245" width="0.0110%" height="15" fill="rgb(237,174,47)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="229" width="0.0110%" height="15" fill="rgb(206,201,31)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="213" width="0.0110%" height="15" fill="rgb(231,57,52)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="197" width="0.0110%" height="15" fill="rgb(248,177,22)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="207.50"></text></g><g><title>alloc::alloc::alloc (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="181" width="0.0110%" height="15" fill="rgb(215,211,37)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="191.50"></text></g><g><title>malloc (73,597,140 samples, 0.01%)</title><rect x="93.7767%" y="165" width="0.0110%" height="15" fill="rgb(241,128,51)" fg:x="627917580551" fg:w="73597140"/><text x="94.0267%" y="175.50"></text></g><g><title>[libc.so.6] (125,833,335 samples, 0.02%)</title><rect x="93.7726%" y="357" width="0.0188%" height="15" fill="rgb(227,165,31)" fg:x="627889675917" fg:w="125833335"/><text x="94.0226%" y="367.50"></text></g><g><title>[unknown] (97,928,701 samples, 0.01%)</title><rect x="93.7767%" y="341" width="0.0146%" height="15" fill="rgb(228,167,24)" fg:x="627917580551" fg:w="97928701"/><text x="94.0267%" y="351.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (97,928,701 samples, 0.01%)</title><rect x="93.7767%" y="325" width="0.0146%" height="15" fill="rgb(228,143,12)" fg:x="627917580551" fg:w="97928701"/><text x="94.0267%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (188,847,180 samples, 0.03%)</title><rect x="93.7914%" y="341" width="0.0282%" height="15" fill="rgb(249,149,8)" fg:x="628015509252" fg:w="188847180"/><text x="94.0414%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (188,847,180 samples, 0.03%)</title><rect x="93.7914%" y="325" width="0.0282%" height="15" fill="rgb(243,35,44)" fg:x="628015509252" fg:w="188847180"/><text x="94.0414%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (188,847,180 samples, 0.03%)</title><rect x="93.7914%" y="309" width="0.0282%" height="15" fill="rgb(246,89,9)" fg:x="628015509252" fg:w="188847180"/><text x="94.0414%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (188,847,180 samples, 0.03%)</title><rect x="93.7914%" y="293" width="0.0282%" height="15" fill="rgb(233,213,13)" fg:x="628015509252" fg:w="188847180"/><text x="94.0414%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (188,847,180 samples, 0.03%)</title><rect x="93.7914%" y="277" width="0.0282%" height="15" fill="rgb(233,141,41)" fg:x="628015509252" fg:w="188847180"/><text x="94.0414%" y="287.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (188,847,180 samples, 0.03%)</title><rect x="93.7914%" y="261" width="0.0282%" height="15" fill="rgb(239,167,4)" fg:x="628015509252" fg:w="188847180"/><text x="94.0414%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (188,847,180 samples, 0.03%)</title><rect x="93.7914%" y="245" width="0.0282%" height="15" fill="rgb(209,217,16)" fg:x="628015509252" fg:w="188847180"/><text x="94.0414%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (168,605,194 samples, 0.03%)</title><rect x="93.7944%" y="229" width="0.0252%" height="15" fill="rgb(219,88,35)" fg:x="628035751238" fg:w="168605194"/><text x="94.0444%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (168,605,194 samples, 0.03%)</title><rect x="93.7944%" y="213" width="0.0252%" height="15" fill="rgb(220,193,23)" fg:x="628035751238" fg:w="168605194"/><text x="94.0444%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (168,605,194 samples, 0.03%)</title><rect x="93.7944%" y="197" width="0.0252%" height="15" fill="rgb(230,90,52)" fg:x="628035751238" fg:w="168605194"/><text x="94.0444%" y="207.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences::_{{closure}} (168,605,194 samples, 0.03%)</title><rect x="93.7944%" y="181" width="0.0252%" height="15" fill="rgb(252,106,19)" fg:x="628035751238" fg:w="168605194"/><text x="94.0444%" y="191.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (84,739,018 samples, 0.01%)</title><rect x="93.8276%" y="341" width="0.0127%" height="15" fill="rgb(206,74,20)" fg:x="628258513864" fg:w="84739018"/><text x="94.0776%" y="351.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (68,861,339 samples, 0.01%)</title><rect x="93.8300%" y="325" width="0.0103%" height="15" fill="rgb(230,138,44)" fg:x="628274391543" fg:w="68861339"/><text x="94.0800%" y="335.50"></text></g><g><title>[unknown] (335,873,579 samples, 0.05%)</title><rect x="93.7914%" y="357" width="0.0502%" height="15" fill="rgb(235,182,43)" fg:x="628015509252" fg:w="335873579"/><text x="94.0414%" y="367.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (4,671,060,505 samples, 0.70%)</title><rect x="95.2201%" y="325" width="0.6976%" height="15" fill="rgb(242,16,51)" fg:x="637582302160" fg:w="4671060505"/><text x="95.4701%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (4,671,060,505 samples, 0.70%)</title><rect x="95.2201%" y="309" width="0.6976%" height="15" fill="rgb(248,9,4)" fg:x="637582302160" fg:w="4671060505"/><text x="95.4701%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (4,671,060,505 samples, 0.70%)</title><rect x="95.2201%" y="293" width="0.6976%" height="15" fill="rgb(210,31,22)" fg:x="637582302160" fg:w="4671060505"/><text x="95.4701%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (4,671,060,505 samples, 0.70%)</title><rect x="95.2201%" y="277" width="0.6976%" height="15" fill="rgb(239,54,39)" fg:x="637582302160" fg:w="4671060505"/><text x="95.4701%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (4,671,060,505 samples, 0.70%)</title><rect x="95.2201%" y="261" width="0.6976%" height="15" fill="rgb(230,99,41)" fg:x="637582302160" fg:w="4671060505"/><text x="95.4701%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (1,970,970,091 samples, 0.29%)</title><rect x="95.9177%" y="325" width="0.2944%" height="15" fill="rgb(253,106,12)" fg:x="642253362665" fg:w="1970970091"/><text x="96.1677%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert::_{{closure}} (1,970,970,091 samples, 0.29%)</title><rect x="95.9177%" y="309" width="0.2944%" height="15" fill="rgb(213,46,41)" fg:x="642253362665" fg:w="1970970091"/><text x="96.1677%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,547,316,233 samples, 0.38%)</title><rect x="96.4074%" y="277" width="0.3804%" height="15" fill="rgb(215,133,35)" fg:x="645532481929" fg:w="2547316233"/><text x="96.6574%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (3,726,042,288 samples, 0.56%)</title><rect x="96.4074%" y="309" width="0.5565%" height="15" fill="rgb(213,28,5)" fg:x="645532481929" fg:w="3726042288"/><text x="96.6574%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (3,726,042,288 samples, 0.56%)</title><rect x="96.4074%" y="293" width="0.5565%" height="15" fill="rgb(215,77,49)" fg:x="645532481929" fg:w="3726042288"/><text x="96.6574%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1,178,726,055 samples, 0.18%)</title><rect x="96.7879%" y="277" width="0.1760%" height="15" fill="rgb(248,100,22)" fg:x="648079798162" fg:w="1178726055"/><text x="97.0379%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::swap (6,402,652,267 samples, 0.96%)</title><rect x="96.2121%" y="325" width="0.9562%" height="15" fill="rgb(208,67,9)" fg:x="644224332756" fg:w="6402652267"/><text x="96.4621%" y="335.50"></text></g><g><title>core::ptr::swap (1,368,460,806 samples, 0.20%)</title><rect x="96.9639%" y="309" width="0.2044%" height="15" fill="rgb(219,133,21)" fg:x="649258524217" fg:w="1368460806"/><text x="97.2139%" y="319.50"></text></g><g><title>core::ptr::copy_nonoverlapping (1,357,854,368 samples, 0.20%)</title><rect x="96.9655%" y="293" width="0.2028%" height="15" fill="rgb(246,46,29)" fg:x="649269130655" fg:w="1357854368"/><text x="97.2155%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (22,192,761,811 samples, 3.31%)</title><rect x="93.8544%" y="357" width="3.3144%" height="15" fill="rgb(246,185,52)" fg:x="628437805757" fg:w="22192761811"/><text x="94.1044%" y="367.50">all..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (22,173,694,735 samples, 3.31%)</title><rect x="93.8573%" y="341" width="3.3115%" height="15" fill="rgb(252,136,11)" fg:x="628456872833" fg:w="22173694735"/><text x="94.1073%" y="351.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (129,930,903 samples, 0.02%)</title><rect x="97.1716%" y="357" width="0.0194%" height="15" fill="rgb(219,138,53)" fg:x="650649173479" fg:w="129930903"/><text x="97.4216%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (129,930,903 samples, 0.02%)</title><rect x="97.1716%" y="341" width="0.0194%" height="15" fill="rgb(211,51,23)" fg:x="650649173479" fg:w="129930903"/><text x="97.4216%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (749,386,785 samples, 0.11%)</title><rect x="97.1961%" y="341" width="0.1119%" height="15" fill="rgb(247,221,28)" fg:x="650813564769" fg:w="749386785"/><text x="97.4461%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (749,386,785 samples, 0.11%)</title><rect x="97.1961%" y="325" width="0.1119%" height="15" fill="rgb(251,222,45)" fg:x="650813564769" fg:w="749386785"/><text x="97.4461%" y="335.50"></text></g><g><title>alloc::alloc::realloc (749,386,785 samples, 0.11%)</title><rect x="97.1961%" y="309" width="0.1119%" height="15" fill="rgb(217,162,53)" fg:x="650813564769" fg:w="749386785"/><text x="97.4461%" y="319.50"></text></g><g><title>realloc (741,214,385 samples, 0.11%)</title><rect x="97.1974%" y="293" width="0.1107%" height="15" fill="rgb(229,93,14)" fg:x="650821737169" fg:w="741214385"/><text x="97.4474%" y="303.50"></text></g><g><title>[libc.so.6] (708,815,113 samples, 0.11%)</title><rect x="97.2022%" y="277" width="0.1059%" height="15" fill="rgb(209,67,49)" fg:x="650854136441" fg:w="708815113"/><text x="97.4522%" y="287.50"></text></g><g><title>[libc.so.6] (668,940,360 samples, 0.10%)</title><rect x="97.2082%" y="261" width="0.0999%" height="15" fill="rgb(213,87,29)" fg:x="650894011194" fg:w="668940360"/><text x="97.4582%" y="271.50"></text></g><g><title>[libc.so.6] (371,848,721 samples, 0.06%)</title><rect x="97.2525%" y="245" width="0.0555%" height="15" fill="rgb(205,151,52)" fg:x="651191102833" fg:w="371848721"/><text x="97.5025%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (795,999,685 samples, 0.12%)</title><rect x="97.1910%" y="357" width="0.1189%" height="15" fill="rgb(253,215,39)" fg:x="650779104382" fg:w="795999685"/><text x="97.4410%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (117,345,905 samples, 0.02%)</title><rect x="97.3612%" y="277" width="0.0175%" height="15" fill="rgb(221,220,41)" fg:x="651919033180" fg:w="117345905"/><text x="97.6112%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (321,339,951 samples, 0.05%)</title><rect x="97.3511%" y="293" width="0.0480%" height="15" fill="rgb(218,133,21)" fg:x="651851124046" fg:w="321339951"/><text x="97.6011%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (136,084,912 samples, 0.02%)</title><rect x="97.3788%" y="277" width="0.0203%" height="15" fill="rgb(221,193,43)" fg:x="652036379085" fg:w="136084912"/><text x="97.6288%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (562,916,789 samples, 0.08%)</title><rect x="97.4495%" y="277" width="0.0841%" height="15" fill="rgb(240,128,52)" fg:x="652510240751" fg:w="562916789"/><text x="97.6995%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,800,258,902 samples, 0.27%)</title><rect x="97.3168%" y="341" width="0.2689%" height="15" fill="rgb(253,114,12)" fg:x="651621681418" fg:w="1800258902"/><text x="97.5668%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,800,258,902 samples, 0.27%)</title><rect x="97.3168%" y="325" width="0.2689%" height="15" fill="rgb(215,223,47)" fg:x="651621681418" fg:w="1800258902"/><text x="97.5668%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,800,258,902 samples, 0.27%)</title><rect x="97.3168%" y="309" width="0.2689%" height="15" fill="rgb(248,225,23)" fg:x="651621681418" fg:w="1800258902"/><text x="97.5668%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,249,476,323 samples, 0.19%)</title><rect x="97.3991%" y="293" width="0.1866%" height="15" fill="rgb(250,108,0)" fg:x="652172463997" fg:w="1249476323"/><text x="97.6491%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (348,782,780 samples, 0.05%)</title><rect x="97.5336%" y="277" width="0.0521%" height="15" fill="rgb(228,208,7)" fg:x="653073157540" fg:w="348782780"/><text x="97.7836%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (95,425,152 samples, 0.01%)</title><rect x="97.5857%" y="341" width="0.0143%" height="15" fill="rgb(244,45,10)" fg:x="653421940320" fg:w="95425152"/><text x="97.8357%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,982,789,465 samples, 0.30%)</title><rect x="97.3110%" y="357" width="0.2961%" height="15" fill="rgb(207,125,25)" fg:x="651582583006" fg:w="1982789465"/><text x="97.5610%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (80,850,321 samples, 0.01%)</title><rect x="97.6213%" y="293" width="0.0121%" height="15" fill="rgb(210,195,18)" fg:x="653660060297" fg:w="80850321"/><text x="97.8713%" y="303.50"></text></g><g><title>core::cmp::max_by (80,850,321 samples, 0.01%)</title><rect x="97.6213%" y="277" width="0.0121%" height="15" fill="rgb(249,80,12)" fg:x="653660060297" fg:w="80850321"/><text x="97.8713%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (175,002,114 samples, 0.03%)</title><rect x="97.6120%" y="309" width="0.0261%" height="15" fill="rgb(221,65,9)" fg:x="653597787882" fg:w="175002114"/><text x="97.8620%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (455,269,161 samples, 0.07%)</title><rect x="97.6071%" y="357" width="0.0680%" height="15" fill="rgb(235,49,36)" fg:x="653565372471" fg:w="455269161"/><text x="97.8571%" y="367.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (447,069,149 samples, 0.07%)</title><rect x="97.6083%" y="341" width="0.0668%" height="15" fill="rgb(225,32,20)" fg:x="653573572483" fg:w="447069149"/><text x="97.8583%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (422,853,750 samples, 0.06%)</title><rect x="97.6120%" y="325" width="0.0632%" height="15" fill="rgb(215,141,46)" fg:x="653597787882" fg:w="422853750"/><text x="97.8620%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search::_{{closure}} (247,851,636 samples, 0.04%)</title><rect x="97.6381%" y="309" width="0.0370%" height="15" fill="rgb(250,160,47)" fg:x="653772789996" fg:w="247851636"/><text x="97.8881%" y="319.50"></text></g><g><title>img::png::deflate::lzss::hash::number_of_matching_bytes (203,689,562 samples, 0.03%)</title><rect x="97.6447%" y="293" width="0.0304%" height="15" fill="rgb(216,222,40)" fg:x="653816952070" fg:w="203689562"/><text x="97.8947%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (67,551,385 samples, 0.01%)</title><rect x="97.6769%" y="357" width="0.0101%" height="15" fill="rgb(234,217,39)" fg:x="654032907509" fg:w="67551385"/><text x="97.9269%" y="367.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (156,585,582 samples, 0.02%)</title><rect x="97.6895%" y="341" width="0.0234%" height="15" fill="rgb(207,178,40)" fg:x="654116868918" fg:w="156585582"/><text x="97.9395%" y="351.50"></text></g><g><title>core::slice::sort::stable::merge::merge (156,585,582 samples, 0.02%)</title><rect x="97.6895%" y="325" width="0.0234%" height="15" fill="rgb(221,136,13)" fg:x="654116868918" fg:w="156585582"/><text x="97.9395%" y="335.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_up (108,642,992 samples, 0.02%)</title><rect x="97.6966%" y="309" width="0.0162%" height="15" fill="rgb(249,199,10)" fg:x="654164811508" fg:w="108642992"/><text x="97.9466%" y="319.50"></text></g><g><title>core::slice::sort::stable::drift::sort (205,262,937 samples, 0.03%)</title><rect x="97.6870%" y="357" width="0.0307%" height="15" fill="rgb(249,222,13)" fg:x="654100458894" fg:w="205262937"/><text x="97.9370%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (93,266,816 samples, 0.01%)</title><rect x="97.7183%" y="357" width="0.0139%" height="15" fill="rgb(244,185,38)" fg:x="654309773450" fg:w="93266816"/><text x="97.9683%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (222,718,022 samples, 0.03%)</title><rect x="97.7394%" y="341" width="0.0333%" height="15" fill="rgb(236,202,9)" fg:x="654450883576" fg:w="222718022"/><text x="97.9894%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (222,718,022 samples, 0.03%)</title><rect x="97.7394%" y="325" width="0.0333%" height="15" fill="rgb(250,229,37)" fg:x="654450883576" fg:w="222718022"/><text x="97.9894%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (196,831,369 samples, 0.03%)</title><rect x="97.7432%" y="309" width="0.0294%" height="15" fill="rgb(206,174,23)" fg:x="654476770229" fg:w="196831369"/><text x="97.9932%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (76,322,048 samples, 0.01%)</title><rect x="97.7760%" y="325" width="0.0114%" height="15" fill="rgb(211,33,43)" fg:x="654696349217" fg:w="76322048"/><text x="98.0260%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (76,322,048 samples, 0.01%)</title><rect x="97.7760%" y="309" width="0.0114%" height="15" fill="rgb(245,58,50)" fg:x="654696349217" fg:w="76322048"/><text x="98.0260%" y="319.50"></text></g><g><title>core::ptr::write (76,322,048 samples, 0.01%)</title><rect x="97.7760%" y="293" width="0.0114%" height="15" fill="rgb(244,68,36)" fg:x="654696349217" fg:w="76322048"/><text x="98.0260%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (410,157,183 samples, 0.06%)</title><rect x="97.7322%" y="357" width="0.0613%" height="15" fill="rgb(232,229,15)" fg:x="654403040266" fg:w="410157183"/><text x="97.9822%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (116,848,232 samples, 0.02%)</title><rect x="97.7760%" y="341" width="0.0175%" height="15" fill="rgb(254,30,23)" fg:x="654696349217" fg:w="116848232"/><text x="98.0260%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (92,733,997 samples, 0.01%)</title><rect x="97.8102%" y="293" width="0.0138%" height="15" fill="rgb(235,160,14)" fg:x="654925014056" fg:w="92733997"/><text x="98.0602%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (113,153,889 samples, 0.02%)</title><rect x="97.8102%" y="309" width="0.0169%" height="15" fill="rgb(212,155,44)" fg:x="654925014056" fg:w="113153889"/><text x="98.0602%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (281,465,484 samples, 0.04%)</title><rect x="97.7935%" y="357" width="0.0420%" height="15" fill="rgb(226,2,50)" fg:x="654813197449" fg:w="281465484"/><text x="98.0435%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (281,465,484 samples, 0.04%)</title><rect x="97.7935%" y="341" width="0.0420%" height="15" fill="rgb(234,177,6)" fg:x="654813197449" fg:w="281465484"/><text x="98.0435%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (281,465,484 samples, 0.04%)</title><rect x="97.7935%" y="325" width="0.0420%" height="15" fill="rgb(217,24,9)" fg:x="654813197449" fg:w="281465484"/><text x="98.0435%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (126,799,740 samples, 0.02%)</title><rect x="97.8367%" y="357" width="0.0189%" height="15" fill="rgb(220,13,46)" fg:x="655102645716" fg:w="126799740"/><text x="98.0867%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (437,181,647 samples, 0.07%)</title><rect x="97.8970%" y="325" width="0.0653%" height="15" fill="rgb(239,221,27)" fg:x="655506557482" fg:w="437181647"/><text x="98.1470%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (416,652,787 samples, 0.06%)</title><rect x="97.9001%" y="309" width="0.0622%" height="15" fill="rgb(222,198,25)" fg:x="655527086342" fg:w="416652787"/><text x="98.1501%" y="319.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::flush_buffer (208,197,532 samples, 0.03%)</title><rect x="97.9312%" y="293" width="0.0311%" height="15" fill="rgb(211,99,13)" fg:x="655735541597" fg:w="208197532"/><text x="98.1812%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (142,998,085 samples, 0.02%)</title><rect x="97.9410%" y="277" width="0.0214%" height="15" fill="rgb(232,111,31)" fg:x="655800741044" fg:w="142998085"/><text x="98.1910%" y="287.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (823,560,746 samples, 0.12%)</title><rect x="97.8556%" y="341" width="0.1230%" height="15" fill="rgb(245,82,37)" fg:x="655229445456" fg:w="823560746"/><text x="98.1056%" y="351.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl_from_middle (109,267,073 samples, 0.02%)</title><rect x="97.9623%" y="325" width="0.0163%" height="15" fill="rgb(227,149,46)" fg:x="655943739129" fg:w="109267073"/><text x="98.2123%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (109,267,073 samples, 0.02%)</title><rect x="97.9623%" y="309" width="0.0163%" height="15" fill="rgb(218,36,50)" fg:x="655943739129" fg:w="109267073"/><text x="98.2123%" y="319.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (109,267,073 samples, 0.02%)</title><rect x="97.9623%" y="293" width="0.0163%" height="15" fill="rgb(226,80,48)" fg:x="655943739129" fg:w="109267073"/><text x="98.2123%" y="303.50"></text></g><g><title>img::png::deflate::encode_block_type_one (943,261,201 samples, 0.14%)</title><rect x="97.8556%" y="357" width="0.1409%" height="15" fill="rgb(238,224,15)" fg:x="655229445456" fg:w="943261201"/><text x="98.1056%" y="367.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (119,700,455 samples, 0.02%)</title><rect x="97.9786%" y="341" width="0.0179%" height="15" fill="rgb(241,136,10)" fg:x="656053006202" fg:w="119700455"/><text x="98.2286%" y="351.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u8_rtl (207,942,959 samples, 0.03%)</title><rect x="98.0161%" y="325" width="0.0311%" height="15" fill="rgb(208,32,45)" fg:x="656304129916" fg:w="207942959"/><text x="98.2661%" y="335.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (192,402,137 samples, 0.03%)</title><rect x="98.0185%" y="309" width="0.0287%" height="15" fill="rgb(207,135,9)" fg:x="656319670738" fg:w="192402137"/><text x="98.2685%" y="319.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::flush_buffer (96,305,119 samples, 0.01%)</title><rect x="98.0328%" y="293" width="0.0144%" height="15" fill="rgb(206,86,44)" fg:x="656415767756" fg:w="96305119"/><text x="98.2828%" y="303.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (355,613,135 samples, 0.05%)</title><rect x="97.9994%" y="341" width="0.0531%" height="15" fill="rgb(245,177,15)" fg:x="656192309722" fg:w="355613135"/><text x="98.2494%" y="351.50"></text></g><g><title>img::png::deflate::encode_block_type_two (407,578,376 samples, 0.06%)</title><rect x="97.9965%" y="357" width="0.0609%" height="15" fill="rgb(206,64,50)" fg:x="656172706657" fg:w="407578376"/><text x="98.2465%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (198,709,110 samples, 0.03%)</title><rect x="98.0679%" y="245" width="0.0297%" height="15" fill="rgb(234,36,40)" fg:x="656650578385" fg:w="198709110"/><text x="98.3179%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (174,357,061 samples, 0.03%)</title><rect x="98.0715%" y="229" width="0.0260%" height="15" fill="rgb(213,64,8)" fg:x="656674930434" fg:w="174357061"/><text x="98.3215%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (174,357,061 samples, 0.03%)</title><rect x="98.0715%" y="213" width="0.0260%" height="15" fill="rgb(210,75,36)" fg:x="656674930434" fg:w="174357061"/><text x="98.3215%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,alloc::collections::vec_deque::VecDeque&lt;usize&gt;)&gt; (174,357,061 samples, 0.03%)</title><rect x="98.0715%" y="197" width="0.0260%" height="15" fill="rgb(229,88,21)" fg:x="656674930434" fg:w="174357061"/><text x="98.3215%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;usize&gt;&gt; (174,357,061 samples, 0.03%)</title><rect x="98.0715%" y="181" width="0.0260%" height="15" fill="rgb(252,204,47)" fg:x="656674930434" fg:w="174357061"/><text x="98.3215%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (174,357,061 samples, 0.03%)</title><rect x="98.0715%" y="165" width="0.0260%" height="15" fill="rgb(208,77,27)" fg:x="656674930434" fg:w="174357061"/><text x="98.3215%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (174,357,061 samples, 0.03%)</title><rect x="98.0715%" y="149" width="0.0260%" height="15" fill="rgb(221,76,26)" fg:x="656674930434" fg:w="174357061"/><text x="98.3215%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (166,200,917 samples, 0.02%)</title><rect x="98.0727%" y="133" width="0.0248%" height="15" fill="rgb(225,139,18)" fg:x="656683086578" fg:w="166200917"/><text x="98.3227%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (166,200,917 samples, 0.02%)</title><rect x="98.0727%" y="117" width="0.0248%" height="15" fill="rgb(230,137,11)" fg:x="656683086578" fg:w="166200917"/><text x="98.3227%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (166,200,917 samples, 0.02%)</title><rect x="98.0727%" y="101" width="0.0248%" height="15" fill="rgb(212,28,1)" fg:x="656683086578" fg:w="166200917"/><text x="98.3227%" y="111.50"></text></g><g><title>cfree (150,012,167 samples, 0.02%)</title><rect x="98.0751%" y="85" width="0.0224%" height="15" fill="rgb(248,164,17)" fg:x="656699275328" fg:w="150012167"/><text x="98.3251%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;img::png::deflate::lzss::hash::LzssHashTable&gt; (409,596,253 samples, 0.06%)</title><rect x="98.0679%" y="341" width="0.0612%" height="15" fill="rgb(222,171,42)" fg:x="656650578385" fg:w="409596253"/><text x="98.3179%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;usize&gt;&gt;&gt; (409,596,253 samples, 0.06%)</title><rect x="98.0679%" y="325" width="0.0612%" height="15" fill="rgb(243,84,45)" fg:x="656650578385" fg:w="409596253"/><text x="98.3179%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,alloc::collections::vec_deque::VecDeque&lt;usize&gt;,std::hash::random::RandomState&gt;&gt; (409,596,253 samples, 0.06%)</title><rect x="98.0679%" y="309" width="0.0612%" height="15" fill="rgb(252,49,23)" fg:x="656650578385" fg:w="409596253"/><text x="98.3179%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,alloc::collections::vec_deque::VecDeque&lt;usize&gt;)&gt;&gt; (409,596,253 samples, 0.06%)</title><rect x="98.0679%" y="293" width="0.0612%" height="15" fill="rgb(215,19,7)" fg:x="656650578385" fg:w="409596253"/><text x="98.3179%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (409,596,253 samples, 0.06%)</title><rect x="98.0679%" y="277" width="0.0612%" height="15" fill="rgb(238,81,41)" fg:x="656650578385" fg:w="409596253"/><text x="98.3179%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (409,596,253 samples, 0.06%)</title><rect x="98.0679%" y="261" width="0.0612%" height="15" fill="rgb(210,199,37)" fg:x="656650578385" fg:w="409596253"/><text x="98.3179%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (210,887,143 samples, 0.03%)</title><rect x="98.0976%" y="245" width="0.0315%" height="15" fill="rgb(244,192,49)" fg:x="656849287495" fg:w="210887143"/><text x="98.3476%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (210,887,143 samples, 0.03%)</title><rect x="98.0976%" y="229" width="0.0315%" height="15" fill="rgb(226,211,11)" fg:x="656849287495" fg:w="210887143"/><text x="98.3476%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (210,887,143 samples, 0.03%)</title><rect x="98.0976%" y="213" width="0.0315%" height="15" fill="rgb(236,162,54)" fg:x="656849287495" fg:w="210887143"/><text x="98.3476%" y="223.50"></text></g><g><title>cfree (210,887,143 samples, 0.03%)</title><rect x="98.0976%" y="197" width="0.0315%" height="15" fill="rgb(220,229,9)" fg:x="656849287495" fg:w="210887143"/><text x="98.3476%" y="207.50"></text></g><g><title>[libc.so.6] (210,887,143 samples, 0.03%)</title><rect x="98.0976%" y="181" width="0.0315%" height="15" fill="rgb(250,87,22)" fg:x="656849287495" fg:w="210887143"/><text x="98.3476%" y="191.50"></text></g><g><title>[libc.so.6] (206,785,201 samples, 0.03%)</title><rect x="98.0982%" y="165" width="0.0309%" height="15" fill="rgb(239,43,17)" fg:x="656853389437" fg:w="206785201"/><text x="98.3482%" y="175.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_greedy (441,873,789 samples, 0.07%)</title><rect x="98.0655%" y="357" width="0.0660%" height="15" fill="rgb(231,177,25)" fg:x="656634350306" fg:w="441873789"/><text x="98.3155%" y="367.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::convert::From&lt;[T: N]&gt;&gt;::from (181,727,666 samples, 0.03%)</title><rect x="98.1392%" y="341" width="0.0271%" height="15" fill="rgb(219,179,1)" fg:x="657128043220" fg:w="181727666"/><text x="98.3892%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::with_capacity (169,525,590 samples, 0.03%)</title><rect x="98.1410%" y="325" width="0.0253%" height="15" fill="rgb(238,219,53)" fg:x="657140245296" fg:w="169525590"/><text x="98.3910%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::with_capacity_in (169,525,590 samples, 0.03%)</title><rect x="98.1410%" y="309" width="0.0253%" height="15" fill="rgb(232,167,36)" fg:x="657140245296" fg:w="169525590"/><text x="98.3910%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (169,525,590 samples, 0.03%)</title><rect x="98.1410%" y="293" width="0.0253%" height="15" fill="rgb(244,19,51)" fg:x="657140245296" fg:w="169525590"/><text x="98.3910%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (169,525,590 samples, 0.03%)</title><rect x="98.1410%" y="277" width="0.0253%" height="15" fill="rgb(224,6,22)" fg:x="657140245296" fg:w="169525590"/><text x="98.3910%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (169,525,590 samples, 0.03%)</title><rect x="98.1410%" y="261" width="0.0253%" height="15" fill="rgb(224,145,5)" fg:x="657140245296" fg:w="169525590"/><text x="98.3910%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (169,525,590 samples, 0.03%)</title><rect x="98.1410%" y="245" width="0.0253%" height="15" fill="rgb(234,130,49)" fg:x="657140245296" fg:w="169525590"/><text x="98.3910%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (169,525,590 samples, 0.03%)</title><rect x="98.1410%" y="229" width="0.0253%" height="15" fill="rgb(254,6,2)" fg:x="657140245296" fg:w="169525590"/><text x="98.3910%" y="239.50"></text></g><g><title>alloc::alloc::alloc (169,525,590 samples, 0.03%)</title><rect x="98.1410%" y="213" width="0.0253%" height="15" fill="rgb(208,96,46)" fg:x="657140245296" fg:w="169525590"/><text x="98.3910%" y="223.50"></text></g><g><title>malloc (169,525,590 samples, 0.03%)</title><rect x="98.1410%" y="197" width="0.0253%" height="15" fill="rgb(239,3,39)" fg:x="657140245296" fg:w="169525590"/><text x="98.3910%" y="207.50"></text></g><g><title>[libc.so.6] (145,132,493 samples, 0.02%)</title><rect x="98.1446%" y="181" width="0.0217%" height="15" fill="rgb(233,210,1)" fg:x="657164638393" fg:w="145132493"/><text x="98.3946%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (95,520,610 samples, 0.01%)</title><rect x="98.1663%" y="341" width="0.0143%" height="15" fill="rgb(244,137,37)" fg:x="657309770886" fg:w="95520610"/><text x="98.4163%" y="351.50"></text></g><g><title>core::intrinsics::likely (85,417,914 samples, 0.01%)</title><rect x="98.1864%" y="245" width="0.0128%" height="15" fill="rgb(240,136,2)" fg:x="657444440757" fg:w="85417914"/><text x="98.4364%" y="255.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (102,561,023 samples, 0.02%)</title><rect x="98.1992%" y="245" width="0.0153%" height="15" fill="rgb(239,18,37)" fg:x="657529858671" fg:w="102561023"/><text x="98.4492%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (102,561,023 samples, 0.02%)</title><rect x="98.1992%" y="229" width="0.0153%" height="15" fill="rgb(218,185,22)" fg:x="657529858671" fg:w="102561023"/><text x="98.4492%" y="239.50"></text></g><g><title>core::ptr::copy_nonoverlapping (102,561,023 samples, 0.02%)</title><rect x="98.1992%" y="213" width="0.0153%" height="15" fill="rgb(225,218,4)" fg:x="657529858671" fg:w="102561023"/><text x="98.4492%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (590,033,639 samples, 0.09%)</title><rect x="98.1343%" y="357" width="0.0881%" height="15" fill="rgb(230,182,32)" fg:x="657095614493" fg:w="590033639"/><text x="98.3843%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (264,172,278 samples, 0.04%)</title><rect x="98.1830%" y="341" width="0.0395%" height="15" fill="rgb(242,56,43)" fg:x="657421475854" fg:w="264172278"/><text x="98.4330%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (264,172,278 samples, 0.04%)</title><rect x="98.1830%" y="325" width="0.0395%" height="15" fill="rgb(233,99,24)" fg:x="657421475854" fg:w="264172278"/><text x="98.4330%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (264,172,278 samples, 0.04%)</title><rect x="98.1830%" y="309" width="0.0395%" height="15" fill="rgb(234,209,42)" fg:x="657421475854" fg:w="264172278"/><text x="98.4330%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (256,258,027 samples, 0.04%)</title><rect x="98.1842%" y="293" width="0.0383%" height="15" fill="rgb(227,7,12)" fg:x="657429390105" fg:w="256258027"/><text x="98.4342%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (256,258,027 samples, 0.04%)</title><rect x="98.1842%" y="277" width="0.0383%" height="15" fill="rgb(245,203,43)" fg:x="657429390105" fg:w="256258027"/><text x="98.4342%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (249,385,254 samples, 0.04%)</title><rect x="98.1852%" y="261" width="0.0372%" height="15" fill="rgb(238,205,33)" fg:x="657436262878" fg:w="249385254"/><text x="98.4352%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (107,992,347 samples, 0.02%)</title><rect x="98.2381%" y="277" width="0.0161%" height="15" fill="rgb(231,56,7)" fg:x="657790635444" fg:w="107992347"/><text x="98.4881%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (156,768,069 samples, 0.02%)</title><rect x="98.2321%" y="341" width="0.0234%" height="15" fill="rgb(244,186,29)" fg:x="657750011362" fg:w="156768069"/><text x="98.4821%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (156,768,069 samples, 0.02%)</title><rect x="98.2321%" y="325" width="0.0234%" height="15" fill="rgb(234,111,31)" fg:x="657750011362" fg:w="156768069"/><text x="98.4821%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (156,768,069 samples, 0.02%)</title><rect x="98.2321%" y="309" width="0.0234%" height="15" fill="rgb(241,149,10)" fg:x="657750011362" fg:w="156768069"/><text x="98.4821%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (116,143,987 samples, 0.02%)</title><rect x="98.2381%" y="293" width="0.0173%" height="15" fill="rgb(249,206,44)" fg:x="657790635444" fg:w="116143987"/><text x="98.4881%" y="303.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (383,845,961 samples, 0.06%)</title><rect x="98.2225%" y="357" width="0.0573%" height="15" fill="rgb(251,153,30)" fg:x="657685648132" fg:w="383845961"/><text x="98.4725%" y="367.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_chain (162,714,662 samples, 0.02%)</title><rect x="98.2555%" y="341" width="0.0243%" height="15" fill="rgb(239,152,38)" fg:x="657906779431" fg:w="162714662"/><text x="98.5055%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (154,643,020 samples, 0.02%)</title><rect x="98.2567%" y="325" width="0.0231%" height="15" fill="rgb(249,139,47)" fg:x="657914851073" fg:w="154643020"/><text x="98.5067%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (154,643,020 samples, 0.02%)</title><rect x="98.2567%" y="309" width="0.0231%" height="15" fill="rgb(244,64,35)" fg:x="657914851073" fg:w="154643020"/><text x="98.5067%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (154,643,020 samples, 0.02%)</title><rect x="98.2567%" y="293" width="0.0231%" height="15" fill="rgb(216,46,15)" fg:x="657914851073" fg:w="154643020"/><text x="98.5067%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (134,512,427 samples, 0.02%)</title><rect x="98.2597%" y="277" width="0.0201%" height="15" fill="rgb(250,74,19)" fg:x="657934981666" fg:w="134512427"/><text x="98.5097%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (134,512,427 samples, 0.02%)</title><rect x="98.2597%" y="261" width="0.0201%" height="15" fill="rgb(249,42,33)" fg:x="657934981666" fg:w="134512427"/><text x="98.5097%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (134,512,427 samples, 0.02%)</title><rect x="98.2597%" y="245" width="0.0201%" height="15" fill="rgb(242,149,17)" fg:x="657934981666" fg:w="134512427"/><text x="98.5097%" y="255.50"></text></g><g><title>[unknown] (543,369,192,378 samples, 81.15%)</title><rect x="17.1528%" y="373" width="81.1498%" height="15" fill="rgb(244,29,21)" fg:x="114853266489" fg:w="543369192378"/><text x="17.4028%" y="383.50">[unknown]</text></g><g><title>__rustc::__rdl_alloc (105,377,495 samples, 0.02%)</title><rect x="98.3026%" y="373" width="0.0157%" height="15" fill="rgb(220,130,37)" fg:x="658222458867" fg:w="105377495"/><text x="98.5526%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (105,377,495 samples, 0.02%)</title><rect x="98.3026%" y="357" width="0.0157%" height="15" fill="rgb(211,67,2)" fg:x="658222458867" fg:w="105377495"/><text x="98.5526%" y="367.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (896,224,176 samples, 0.13%)</title><rect x="98.5140%" y="341" width="0.1338%" height="15" fill="rgb(235,68,52)" fg:x="659637475765" fg:w="896224176"/><text x="98.7640%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (896,224,176 samples, 0.13%)</title><rect x="98.5140%" y="325" width="0.1338%" height="15" fill="rgb(246,142,3)" fg:x="659637475765" fg:w="896224176"/><text x="98.7640%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (896,224,176 samples, 0.13%)</title><rect x="98.5140%" y="309" width="0.1338%" height="15" fill="rgb(241,25,7)" fg:x="659637475765" fg:w="896224176"/><text x="98.7640%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (896,224,176 samples, 0.13%)</title><rect x="98.5140%" y="293" width="0.1338%" height="15" fill="rgb(242,119,39)" fg:x="659637475765" fg:w="896224176"/><text x="98.7640%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (896,224,176 samples, 0.13%)</title><rect x="98.5140%" y="277" width="0.1338%" height="15" fill="rgb(241,98,45)" fg:x="659637475765" fg:w="896224176"/><text x="98.7640%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain::_{{closure}} (690,254,693 samples, 0.10%)</title><rect x="98.6478%" y="341" width="0.1031%" height="15" fill="rgb(254,28,30)" fg:x="660533699941" fg:w="690254693"/><text x="98.8978%" y="351.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert::_{{closure}} (690,254,693 samples, 0.10%)</title><rect x="98.6478%" y="325" width="0.1031%" height="15" fill="rgb(241,142,54)" fg:x="660533699941" fg:w="690254693"/><text x="98.8978%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain (2,742,954,840 samples, 0.41%)</title><rect x="98.3449%" y="373" width="0.4096%" height="15" fill="rgb(222,85,15)" fg:x="658505252550" fg:w="2742954840"/><text x="98.5949%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::retain_mut (2,742,954,840 samples, 0.41%)</title><rect x="98.3449%" y="357" width="0.4096%" height="15" fill="rgb(210,85,47)" fg:x="658505252550" fg:w="2742954840"/><text x="98.5949%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (93,530,171 samples, 0.01%)</title><rect x="98.7551%" y="373" width="0.0140%" height="15" fill="rgb(224,206,25)" fg:x="661252282966" fg:w="93530171"/><text x="99.0051%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (82,552,357 samples, 0.01%)</title><rect x="98.7568%" y="357" width="0.0123%" height="15" fill="rgb(243,201,19)" fg:x="661263260780" fg:w="82552357"/><text x="99.0068%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (86,755,136 samples, 0.01%)</title><rect x="98.8248%" y="309" width="0.0130%" height="15" fill="rgb(236,59,4)" fg:x="661718983479" fg:w="86755136"/><text x="99.0748%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (409,889,662 samples, 0.06%)</title><rect x="98.7956%" y="357" width="0.0612%" height="15" fill="rgb(254,179,45)" fg:x="661523651603" fg:w="409889662"/><text x="99.0456%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (409,889,662 samples, 0.06%)</title><rect x="98.7956%" y="341" width="0.0612%" height="15" fill="rgb(226,14,10)" fg:x="661523651603" fg:w="409889662"/><text x="99.0456%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (409,889,662 samples, 0.06%)</title><rect x="98.7956%" y="325" width="0.0612%" height="15" fill="rgb(244,27,41)" fg:x="661523651603" fg:w="409889662"/><text x="99.0456%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (127,802,650 samples, 0.02%)</title><rect x="98.8378%" y="309" width="0.0191%" height="15" fill="rgb(235,35,32)" fg:x="661805738615" fg:w="127802650"/><text x="99.0878%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (306,336,337 samples, 0.05%)</title><rect x="98.8569%" y="357" width="0.0457%" height="15" fill="rgb(218,68,31)" fg:x="661933541265" fg:w="306336337"/><text x="99.1069%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (172,785,408 samples, 0.03%)</title><rect x="98.8768%" y="341" width="0.0258%" height="15" fill="rgb(207,120,37)" fg:x="662067092194" fg:w="172785408"/><text x="99.1268%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (172,785,408 samples, 0.03%)</title><rect x="98.8768%" y="325" width="0.0258%" height="15" fill="rgb(227,98,0)" fg:x="662067092194" fg:w="172785408"/><text x="99.1268%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (172,785,408 samples, 0.03%)</title><rect x="98.8768%" y="309" width="0.0258%" height="15" fill="rgb(207,7,3)" fg:x="662067092194" fg:w="172785408"/><text x="99.1268%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (110,523,841 samples, 0.02%)</title><rect x="98.9040%" y="341" width="0.0165%" height="15" fill="rgb(206,98,19)" fg:x="662249463734" fg:w="110523841"/><text x="99.1540%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u16 (110,523,841 samples, 0.02%)</title><rect x="98.9040%" y="325" width="0.0165%" height="15" fill="rgb(217,5,26)" fg:x="662249463734" fg:w="110523841"/><text x="99.1540%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (922,621,654 samples, 0.14%)</title><rect x="98.7852%" y="373" width="0.1378%" height="15" fill="rgb(235,190,38)" fg:x="661453637746" fg:w="922621654"/><text x="99.0352%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (136,381,798 samples, 0.02%)</title><rect x="98.9026%" y="357" width="0.0204%" height="15" fill="rgb(247,86,24)" fg:x="662239877602" fg:w="136381798"/><text x="99.1526%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (87,605,079 samples, 0.01%)</title><rect x="98.9372%" y="325" width="0.0131%" height="15" fill="rgb(205,101,16)" fg:x="662471666260" fg:w="87605079"/><text x="99.1872%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (179,881,262 samples, 0.03%)</title><rect x="98.9343%" y="341" width="0.0269%" height="15" fill="rgb(246,168,33)" fg:x="662452062913" fg:w="179881262"/><text x="99.1843%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (72,672,836 samples, 0.01%)</title><rect x="98.9503%" y="325" width="0.0109%" height="15" fill="rgb(231,114,1)" fg:x="662559271339" fg:w="72672836"/><text x="99.2003%" y="335.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (188,003,817 samples, 0.03%)</title><rect x="98.9337%" y="357" width="0.0281%" height="15" fill="rgb(207,184,53)" fg:x="662447991565" fg:w="188003817"/><text x="99.1837%" y="367.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (300,940,395 samples, 0.04%)</title><rect x="98.9337%" y="373" width="0.0449%" height="15" fill="rgb(224,95,51)" fg:x="662447991565" fg:w="300940395"/><text x="99.1837%" y="383.50"></text></g><g><title>core::slice::sort::stable::quicksort::stable_partition (108,886,273 samples, 0.02%)</title><rect x="98.9624%" y="357" width="0.0163%" height="15" fill="rgb(212,188,45)" fg:x="662640045687" fg:w="108886273"/><text x="99.2124%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::extend (231,150,632 samples, 0.03%)</title><rect x="98.9893%" y="373" width="0.0345%" height="15" fill="rgb(223,154,38)" fg:x="662820336073" fg:w="231150632"/><text x="99.2393%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::add_symbol (149,726,444 samples, 0.02%)</title><rect x="99.0256%" y="357" width="0.0224%" height="15" fill="rgb(251,22,52)" fg:x="663063651316" fg:w="149726444"/><text x="99.2756%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (141,694,638 samples, 0.02%)</title><rect x="99.0268%" y="341" width="0.0212%" height="15" fill="rgb(229,209,22)" fg:x="663071683122" fg:w="141694638"/><text x="99.2768%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (141,694,638 samples, 0.02%)</title><rect x="99.0268%" y="325" width="0.0212%" height="15" fill="rgb(234,138,34)" fg:x="663071683122" fg:w="141694638"/><text x="99.2768%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (141,694,638 samples, 0.02%)</title><rect x="99.0268%" y="309" width="0.0212%" height="15" fill="rgb(212,95,11)" fg:x="663071683122" fg:w="141694638"/><text x="99.2768%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (109,322,081 samples, 0.02%)</title><rect x="99.0317%" y="293" width="0.0163%" height="15" fill="rgb(240,179,47)" fg:x="663104055679" fg:w="109322081"/><text x="99.2817%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (109,322,081 samples, 0.02%)</title><rect x="99.0317%" y="277" width="0.0163%" height="15" fill="rgb(240,163,11)" fg:x="663104055679" fg:w="109322081"/><text x="99.2817%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (109,322,081 samples, 0.02%)</title><rect x="99.0317%" y="261" width="0.0163%" height="15" fill="rgb(236,37,12)" fg:x="663104055679" fg:w="109322081"/><text x="99.2817%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (146,371,707 samples, 0.02%)</title><rect x="99.0528%" y="309" width="0.0219%" height="15" fill="rgb(232,164,16)" fg:x="663245760389" fg:w="146371707"/><text x="99.3028%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (146,371,707 samples, 0.02%)</title><rect x="99.0528%" y="293" width="0.0219%" height="15" fill="rgb(244,205,15)" fg:x="663245760389" fg:w="146371707"/><text x="99.3028%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (146,371,707 samples, 0.02%)</title><rect x="99.0528%" y="277" width="0.0219%" height="15" fill="rgb(223,117,47)" fg:x="663245760389" fg:w="146371707"/><text x="99.3028%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (146,371,707 samples, 0.02%)</title><rect x="99.0528%" y="261" width="0.0219%" height="15" fill="rgb(244,107,35)" fg:x="663245760389" fg:w="146371707"/><text x="99.3028%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (146,371,707 samples, 0.02%)</title><rect x="99.0528%" y="245" width="0.0219%" height="15" fill="rgb(205,140,8)" fg:x="663245760389" fg:w="146371707"/><text x="99.3028%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (146,371,707 samples, 0.02%)</title><rect x="99.0528%" y="229" width="0.0219%" height="15" fill="rgb(228,84,46)" fg:x="663245760389" fg:w="146371707"/><text x="99.3028%" y="239.50"></text></g><g><title>cfree (121,549,302 samples, 0.02%)</title><rect x="99.0565%" y="213" width="0.0182%" height="15" fill="rgb(254,188,9)" fg:x="663270582794" fg:w="121549302"/><text x="99.3065%" y="223.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (218,876,942 samples, 0.03%)</title><rect x="99.0516%" y="341" width="0.0327%" height="15" fill="rgb(206,112,54)" fg:x="663237600646" fg:w="218876942"/><text x="99.3016%" y="351.50"></text></g><g><title>alloc::vec::_&lt;impl core::convert::TryFrom&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for [T: N]&gt;::try_from (218,876,942 samples, 0.03%)</title><rect x="99.0516%" y="325" width="0.0327%" height="15" fill="rgb(216,84,49)" fg:x="663237600646" fg:w="218876942"/><text x="99.3016%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (124,593,137 samples, 0.02%)</title><rect x="99.0976%" y="213" width="0.0186%" height="15" fill="rgb(214,194,35)" fg:x="663545593932" fg:w="124593137"/><text x="99.3476%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (124,593,137 samples, 0.02%)</title><rect x="99.0976%" y="197" width="0.0186%" height="15" fill="rgb(249,28,3)" fg:x="663545593932" fg:w="124593137"/><text x="99.3476%" y="207.50"></text></g><g><title>cfree (120,263,251 samples, 0.02%)</title><rect x="99.0983%" y="181" width="0.0180%" height="15" fill="rgb(222,56,52)" fg:x="663549923818" fg:w="120263251"/><text x="99.3483%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (136,663,345 samples, 0.02%)</title><rect x="99.0964%" y="325" width="0.0204%" height="15" fill="rgb(245,217,50)" fg:x="663537600809" fg:w="136663345"/><text x="99.3464%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::vec::Vec&lt;u16&gt;,u32)]&gt; (136,663,345 samples, 0.02%)</title><rect x="99.0964%" y="309" width="0.0204%" height="15" fill="rgb(213,201,24)" fg:x="663537600809" fg:w="136663345"/><text x="99.3464%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt; (128,670,222 samples, 0.02%)</title><rect x="99.0976%" y="293" width="0.0192%" height="15" fill="rgb(248,116,28)" fg:x="663545593932" fg:w="128670222"/><text x="99.3476%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (128,670,222 samples, 0.02%)</title><rect x="99.0976%" y="277" width="0.0192%" height="15" fill="rgb(219,72,43)" fg:x="663545593932" fg:w="128670222"/><text x="99.3476%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (128,670,222 samples, 0.02%)</title><rect x="99.0976%" y="261" width="0.0192%" height="15" fill="rgb(209,138,14)" fg:x="663545593932" fg:w="128670222"/><text x="99.3476%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (128,670,222 samples, 0.02%)</title><rect x="99.0976%" y="245" width="0.0192%" height="15" fill="rgb(222,18,33)" fg:x="663545593932" fg:w="128670222"/><text x="99.3476%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (128,670,222 samples, 0.02%)</title><rect x="99.0976%" y="229" width="0.0192%" height="15" fill="rgb(213,199,7)" fg:x="663545593932" fg:w="128670222"/><text x="99.3476%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::vec::Vec&lt;u16&gt;,u32)&gt;&gt; (184,994,775 samples, 0.03%)</title><rect x="99.0964%" y="341" width="0.0276%" height="15" fill="rgb(250,110,10)" fg:x="663537600809" fg:w="184994775"/><text x="99.3464%" y="351.50"></text></g><g><title>img::png::deflate::generate_prefix_codes_from_lzss_stream (675,136,271 samples, 0.10%)</title><rect x="99.0238%" y="373" width="0.1008%" height="15" fill="rgb(248,123,6)" fg:x="663051486705" fg:w="675136271"/><text x="99.2738%" y="383.50"></text></g><g><title>img::png::deflate::huffman::package_merge::PackageMergeEncoder&lt;T&gt;::get_symbol_lengths (513,245,216 samples, 0.08%)</title><rect x="99.0480%" y="357" width="0.0767%" height="15" fill="rgb(206,91,31)" fg:x="663213377760" fg:w="513245216"/><text x="99.2980%" y="367.50"></text></g><g><title>__rustc::__rdl_realloc (69,599,719 samples, 0.01%)</title><rect x="99.1577%" y="277" width="0.0104%" height="15" fill="rgb(211,154,13)" fg:x="663947753594" fg:w="69599719"/><text x="99.4077%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,994,481,243 samples, 0.30%)</title><rect x="99.1548%" y="325" width="0.2979%" height="15" fill="rgb(225,148,7)" fg:x="663928796100" fg:w="1994481243"/><text x="99.4048%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,994,481,243 samples, 0.30%)</title><rect x="99.1548%" y="309" width="0.2979%" height="15" fill="rgb(220,160,43)" fg:x="663928796100" fg:w="1994481243"/><text x="99.4048%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1,983,606,786 samples, 0.30%)</title><rect x="99.1565%" y="293" width="0.2962%" height="15" fill="rgb(213,52,39)" fg:x="663939670557" fg:w="1983606786"/><text x="99.4065%" y="303.50"></text></g><g><title>realloc (1,905,924,030 samples, 0.28%)</title><rect x="99.1681%" y="277" width="0.2846%" height="15" fill="rgb(243,137,7)" fg:x="664017353313" fg:w="1905924030"/><text x="99.4181%" y="287.50"></text></g><g><title>[libc.so.6] (1,525,815,731 samples, 0.23%)</title><rect x="99.2248%" y="261" width="0.2279%" height="15" fill="rgb(230,79,13)" fg:x="664397461612" fg:w="1525815731"/><text x="99.4748%" y="271.50"></text></g><g><title>[libc.so.6] (1,117,073,737 samples, 0.17%)</title><rect x="99.2859%" y="245" width="0.1668%" height="15" fill="rgb(247,105,23)" fg:x="664806203606" fg:w="1117073737"/><text x="99.5359%" y="255.50"></text></g><g><title>[libc.so.6] (199,861,075 samples, 0.03%)</title><rect x="99.4229%" y="229" width="0.0298%" height="15" fill="rgb(223,179,41)" fg:x="665723416268" fg:w="199861075"/><text x="99.6729%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,017,606,684 samples, 0.30%)</title><rect x="99.1519%" y="341" width="0.3013%" height="15" fill="rgb(218,9,34)" fg:x="663909397257" fg:w="2017606684"/><text x="99.4019%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by_key (140,427,494 samples, 0.02%)</title><rect x="99.4580%" y="341" width="0.0210%" height="15" fill="rgb(222,106,8)" fg:x="665958624152" fg:w="140427494"/><text x="99.7080%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (140,427,494 samples, 0.02%)</title><rect x="99.4580%" y="325" width="0.0210%" height="15" fill="rgb(211,220,0)" fg:x="665958624152" fg:w="140427494"/><text x="99.7080%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (140,427,494 samples, 0.02%)</title><rect x="99.4580%" y="309" width="0.0210%" height="15" fill="rgb(229,52,16)" fg:x="665958624152" fg:w="140427494"/><text x="99.7080%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (124,624,448 samples, 0.02%)</title><rect x="99.4604%" y="293" width="0.0186%" height="15" fill="rgb(212,155,18)" fg:x="665974427198" fg:w="124624448"/><text x="99.7104%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (124,624,448 samples, 0.02%)</title><rect x="99.4604%" y="277" width="0.0186%" height="15" fill="rgb(242,21,14)" fg:x="665974427198" fg:w="124624448"/><text x="99.7104%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (106,148,029 samples, 0.02%)</title><rect x="99.4631%" y="261" width="0.0159%" height="15" fill="rgb(222,19,48)" fg:x="665992903617" fg:w="106148029"/><text x="99.7131%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (106,148,029 samples, 0.02%)</title><rect x="99.4631%" y="245" width="0.0159%" height="15" fill="rgb(232,45,27)" fg:x="665992903617" fg:w="106148029"/><text x="99.7131%" y="255.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration::_{{closure}} (106,148,029 samples, 0.02%)</title><rect x="99.4631%" y="229" width="0.0159%" height="15" fill="rgb(249,103,42)" fg:x="665992903617" fg:w="106148029"/><text x="99.7131%" y="239.50"></text></g><g><title>img::png::deflate::lzss::cost_of_encoding_backreference (98,690,448 samples, 0.01%)</title><rect x="99.4642%" y="213" width="0.0147%" height="15" fill="rgb(246,81,33)" fg:x="666000361198" fg:w="98690448"/><text x="99.7142%" y="223.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_optimized (2,343,513,496 samples, 0.35%)</title><rect x="99.1367%" y="373" width="0.3500%" height="15" fill="rgb(252,33,42)" fg:x="663807173519" fg:w="2343513496"/><text x="99.3867%" y="383.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_iteration (2,343,513,496 samples, 0.35%)</title><rect x="99.1367%" y="357" width="0.3500%" height="15" fill="rgb(209,212,41)" fg:x="663807173519" fg:w="2343513496"/><text x="99.3867%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::push_u16_rtl (356,817,577 samples, 0.05%)</title><rect x="99.5455%" y="357" width="0.0533%" height="15" fill="rgb(207,154,6)" fg:x="666544326465" fg:w="356817577"/><text x="99.7955%" y="367.50"></text></g><g><title>img::png::deflate::bitstream::WriteBitStream::flush_buffer (137,485,144 samples, 0.02%)</title><rect x="99.5782%" y="341" width="0.0205%" height="15" fill="rgb(223,64,47)" fg:x="666763658898" fg:w="137485144"/><text x="99.8282%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (89,023,241 samples, 0.01%)</title><rect x="99.5855%" y="325" width="0.0133%" height="15" fill="rgb(211,161,38)" fg:x="666812120801" fg:w="89023241"/><text x="99.8355%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (124,020,655 samples, 0.02%)</title><rect x="99.6019%" y="293" width="0.0185%" height="15" fill="rgb(219,138,40)" fg:x="666922199160" fg:w="124020655"/><text x="99.8519%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (124,020,655 samples, 0.02%)</title><rect x="99.6019%" y="277" width="0.0185%" height="15" fill="rgb(241,228,46)" fg:x="666922199160" fg:w="124020655"/><text x="99.8519%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (124,020,655 samples, 0.02%)</title><rect x="99.6019%" y="261" width="0.0185%" height="15" fill="rgb(223,209,38)" fg:x="666922199160" fg:w="124020655"/><text x="99.8519%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (67,478,086 samples, 0.01%)</title><rect x="99.6103%" y="245" width="0.0101%" height="15" fill="rgb(236,164,45)" fg:x="666978741729" fg:w="67478086"/><text x="99.8603%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (134,413,362 samples, 0.02%)</title><rect x="99.6019%" y="309" width="0.0201%" height="15" fill="rgb(231,15,5)" fg:x="666922199160" fg:w="134413362"/><text x="99.8519%" y="319.50"></text></g><g><title>core::intrinsics::likely (455,810,161 samples, 0.07%)</title><rect x="99.6519%" y="261" width="0.0681%" height="15" fill="rgb(252,35,15)" fg:x="667256749400" fg:w="455810161"/><text x="99.9019%" y="271.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (79,631,625 samples, 0.01%)</title><rect x="99.7199%" y="261" width="0.0119%" height="15" fill="rgb(248,181,18)" fg:x="667712559561" fg:w="79631625"/><text x="99.9699%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (79,631,625 samples, 0.01%)</title><rect x="99.7199%" y="245" width="0.0119%" height="15" fill="rgb(233,39,42)" fg:x="667712559561" fg:w="79631625"/><text x="99.9699%" y="255.50"></text></g><g><title>core::ptr::copy_nonoverlapping (79,631,625 samples, 0.01%)</title><rect x="99.7199%" y="229" width="0.0119%" height="15" fill="rgb(238,110,33)" fg:x="667712559561" fg:w="79631625"/><text x="99.9699%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (296,403,115 samples, 0.04%)</title><rect x="99.7318%" y="261" width="0.0443%" height="15" fill="rgb(233,195,10)" fg:x="667792191186" fg:w="296403115"/><text x="99.9818%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (296,403,115 samples, 0.04%)</title><rect x="99.7318%" y="245" width="0.0443%" height="15" fill="rgb(254,105,3)" fg:x="667792191186" fg:w="296403115"/><text x="99.9818%" y="255.50"></text></g><g><title>hashbrown::control::tag::Tag::full (256,392,982 samples, 0.04%)</title><rect x="99.7761%" y="261" width="0.0383%" height="15" fill="rgb(221,225,9)" fg:x="668088594301" fg:w="256392982"/><text x="100.0261%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (131,212,403 samples, 0.02%)</title><rect x="99.8144%" y="245" width="0.0196%" height="15" fill="rgb(224,227,45)" fg:x="668344987283" fg:w="131212403"/><text x="100.0644%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (131,212,403 samples, 0.02%)</title><rect x="99.8144%" y="229" width="0.0196%" height="15" fill="rgb(229,198,43)" fg:x="668344987283" fg:w="131212403"/><text x="100.0644%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (131,212,403 samples, 0.02%)</title><rect x="99.8144%" y="213" width="0.0196%" height="15" fill="rgb(206,209,35)" fg:x="668344987283" fg:w="131212403"/><text x="100.0644%" y="223.50"></text></g><g><title>img::png::deflate::lzss::encode_lzss_to_bitstream (2,360,485,212 samples, 0.35%)</title><rect x="99.4867%" y="373" width="0.3525%" height="15" fill="rgb(245,195,53)" fg:x="666150687015" fg:w="2360485212"/><text x="99.7367%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,610,028,185 samples, 0.24%)</title><rect x="99.5988%" y="357" width="0.2405%" height="15" fill="rgb(240,92,26)" fg:x="666901144042" fg:w="1610028185"/><text x="99.8488%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,610,028,185 samples, 0.24%)</title><rect x="99.5988%" y="341" width="0.2405%" height="15" fill="rgb(207,40,23)" fg:x="666901144042" fg:w="1610028185"/><text x="99.8488%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,599,822,736 samples, 0.24%)</title><rect x="99.6003%" y="325" width="0.2389%" height="15" fill="rgb(223,111,35)" fg:x="666911349491" fg:w="1599822736"/><text x="99.8503%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,454,559,705 samples, 0.22%)</title><rect x="99.6220%" y="309" width="0.2172%" height="15" fill="rgb(229,147,28)" fg:x="667056612522" fg:w="1454559705"/><text x="99.8720%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,454,559,705 samples, 0.22%)</title><rect x="99.6220%" y="293" width="0.2172%" height="15" fill="rgb(211,29,28)" fg:x="667056612522" fg:w="1454559705"/><text x="99.8720%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,454,559,705 samples, 0.22%)</title><rect x="99.6220%" y="277" width="0.2172%" height="15" fill="rgb(228,72,33)" fg:x="667056612522" fg:w="1454559705"/><text x="99.8720%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (166,184,944 samples, 0.02%)</title><rect x="99.8144%" y="261" width="0.0248%" height="15" fill="rgb(205,214,31)" fg:x="668344987283" fg:w="166184944"/><text x="100.0644%" y="271.50"></text></g><g><title>core::intrinsics::likely (183,169,666 samples, 0.03%)</title><rect x="99.8543%" y="245" width="0.0274%" height="15" fill="rgb(224,111,15)" fg:x="668612590158" fg:w="183169666"/><text x="100.1043%" y="255.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (106,752,975 samples, 0.02%)</title><rect x="99.8817%" y="245" width="0.0159%" height="15" fill="rgb(253,21,26)" fg:x="668795759824" fg:w="106752975"/><text x="100.1317%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (106,752,975 samples, 0.02%)</title><rect x="99.8817%" y="229" width="0.0159%" height="15" fill="rgb(245,139,43)" fg:x="668795759824" fg:w="106752975"/><text x="100.1317%" y="239.50"></text></g><g><title>core::ptr::copy_nonoverlapping (106,752,975 samples, 0.02%)</title><rect x="99.8817%" y="213" width="0.0159%" height="15" fill="rgb(252,170,7)" fg:x="668795759824" fg:w="106752975"/><text x="100.1317%" y="223.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_all_backreferences (411,807,267 samples, 0.06%)</title><rect x="99.8392%" y="373" width="0.0615%" height="15" fill="rgb(231,118,14)" fg:x="668511172227" fg:w="411807267"/><text x="100.0892%" y="383.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_chain (330,571,504 samples, 0.05%)</title><rect x="99.8513%" y="357" width="0.0494%" height="15" fill="rgb(238,83,0)" fg:x="668592407990" fg:w="330571504"/><text x="100.1013%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (326,638,317 samples, 0.05%)</title><rect x="99.8519%" y="341" width="0.0488%" height="15" fill="rgb(221,39,39)" fg:x="668596341177" fg:w="326638317"/><text x="100.1019%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (326,638,317 samples, 0.05%)</title><rect x="99.8519%" y="325" width="0.0488%" height="15" fill="rgb(222,119,46)" fg:x="668596341177" fg:w="326638317"/><text x="100.1019%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (326,638,317 samples, 0.05%)</title><rect x="99.8519%" y="309" width="0.0488%" height="15" fill="rgb(222,165,49)" fg:x="668596341177" fg:w="326638317"/><text x="100.1019%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (318,258,380 samples, 0.05%)</title><rect x="99.8532%" y="293" width="0.0475%" height="15" fill="rgb(219,113,52)" fg:x="668604721114" fg:w="318258380"/><text x="100.1032%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (318,258,380 samples, 0.05%)</title><rect x="99.8532%" y="277" width="0.0475%" height="15" fill="rgb(214,7,15)" fg:x="668604721114" fg:w="318258380"/><text x="100.1032%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (318,258,380 samples, 0.05%)</title><rect x="99.8532%" y="261" width="0.0475%" height="15" fill="rgb(235,32,4)" fg:x="668604721114" fg:w="318258380"/><text x="100.1032%" y="271.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::insert (106,962,680 samples, 0.02%)</title><rect x="99.9007%" y="373" width="0.0160%" height="15" fill="rgb(238,90,54)" fg:x="668922979494" fg:w="106962680"/><text x="100.1507%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (74,656,845 samples, 0.01%)</title><rect x="99.9055%" y="357" width="0.0111%" height="15" fill="rgb(213,208,19)" fg:x="668955285329" fg:w="74656845"/><text x="100.1555%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (74,656,845 samples, 0.01%)</title><rect x="99.9055%" y="341" width="0.0111%" height="15" fill="rgb(233,156,4)" fg:x="668955285329" fg:w="74656845"/><text x="100.1555%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (74,656,845 samples, 0.01%)</title><rect x="99.9055%" y="325" width="0.0111%" height="15" fill="rgb(207,194,5)" fg:x="668955285329" fg:w="74656845"/><text x="100.1555%" y="335.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::search (143,160,177 samples, 0.02%)</title><rect x="99.9167%" y="373" width="0.0214%" height="15" fill="rgb(206,111,30)" fg:x="669029942174" fg:w="143160177"/><text x="100.1667%" y="383.50"></text></g><g><title>img::png::deflate::lzss::hash::LzssHashTable::get_chain (110,750,283 samples, 0.02%)</title><rect x="99.9215%" y="357" width="0.0165%" height="15" fill="rgb(243,70,54)" fg:x="669062352068" fg:w="110750283"/><text x="100.1715%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (101,007,394 samples, 0.02%)</title><rect x="99.9230%" y="341" width="0.0151%" height="15" fill="rgb(242,28,8)" fg:x="669072094957" fg:w="101007394"/><text x="100.1730%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (101,007,394 samples, 0.02%)</title><rect x="99.9230%" y="325" width="0.0151%" height="15" fill="rgb(219,106,18)" fg:x="669072094957" fg:w="101007394"/><text x="100.1730%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (101,007,394 samples, 0.02%)</title><rect x="99.9230%" y="309" width="0.0151%" height="15" fill="rgb(244,222,10)" fg:x="669072094957" fg:w="101007394"/><text x="100.1730%" y="319.50"></text></g><g><title>img::png::deflate::lzss::waste_time (305,132,447 samples, 0.05%)</title><rect x="99.9381%" y="373" width="0.0456%" height="15" fill="rgb(236,179,52)" fg:x="669173102351" fg:w="305132447"/><text x="100.1881%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (214,475,638 samples, 0.03%)</title><rect x="99.9516%" y="357" width="0.0320%" height="15" fill="rgb(213,23,39)" fg:x="669263759160" fg:w="214475638"/><text x="100.2016%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (214,475,638 samples, 0.03%)</title><rect x="99.9516%" y="341" width="0.0320%" height="15" fill="rgb(238,48,10)" fg:x="669263759160" fg:w="214475638"/><text x="100.2016%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (214,475,638 samples, 0.03%)</title><rect x="99.9516%" y="325" width="0.0320%" height="15" fill="rgb(251,196,23)" fg:x="669263759160" fg:w="214475638"/><text x="100.2016%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (175,172,824 samples, 0.03%)</title><rect x="99.9575%" y="309" width="0.0262%" height="15" fill="rgb(250,152,24)" fg:x="669303061974" fg:w="175172824"/><text x="100.2075%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (175,172,824 samples, 0.03%)</title><rect x="99.9575%" y="293" width="0.0262%" height="15" fill="rgb(209,150,17)" fg:x="669303061974" fg:w="175172824"/><text x="100.2075%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (175,172,824 samples, 0.03%)</title><rect x="99.9575%" y="277" width="0.0262%" height="15" fill="rgb(234,202,34)" fg:x="669303061974" fg:w="175172824"/><text x="100.2075%" y="287.50"></text></g><g><title>all (669,587,856,814 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(253,148,53)" fg:x="0" fg:w="669587856814"/><text x="0.2500%" y="415.50"></text></g><g><title>img (669,587,856,814 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(218,129,16)" fg:x="0" fg:w="669587856814"/><text x="0.2500%" y="399.50">img</text></g></svg></svg>